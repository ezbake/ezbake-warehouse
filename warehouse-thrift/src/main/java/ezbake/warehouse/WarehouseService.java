/*   Copyright (C) 2013-2014 Computer Sciences Corporation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License. */

/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package ezbake.warehouse;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class WarehouseService {

  public interface Iface extends ezbake.base.thrift.EzBakeBasePurgeService.Iface {

    /**
     * Insert a record.
     * 
     * @param data
     * @param visibility
     * @param security
     */
    public ezbake.warehouse.IngestStatus insert(ezbake.warehouse.Repository data, ezbake.base.thrift.Visibility visibility, ezbake.base.thrift.EzSecurityToken security) throws org.apache.thrift.TException;

    /**
     * Get latest version of the relevant data segment.
     * 
     * @param uri
     * @param security
     */
    public ezbake.warehouse.BinaryReplay getLatestRaw(String uri, ezbake.base.thrift.EzSecurityToken security) throws ezbake.warehouse.EntryNotInWarehouseException, org.apache.thrift.TException;

    public ezbake.warehouse.BinaryReplay getLatestParsed(String uri, ezbake.base.thrift.EzSecurityToken security) throws ezbake.warehouse.EntryNotInWarehouseException, org.apache.thrift.TException;

    /**
     * Get a specific version (using timestamp versioning) of the relevant data segment.
     * 
     * @param uri
     * @param version
     * @param security
     */
    public ezbake.warehouse.BinaryReplay getRaw(String uri, long version, ezbake.base.thrift.EzSecurityToken security) throws ezbake.warehouse.EntryNotInWarehouseException, org.apache.thrift.TException;

    public ezbake.warehouse.BinaryReplay getParsed(String uri, long version, ezbake.base.thrift.EzSecurityToken security) throws ezbake.warehouse.EntryNotInWarehouseException, org.apache.thrift.TException;

    /**
     * Get a list of binary replays, given a GetRequest with list of uris of interest.
     * 
     * @param getRequest
     * @param security
     */
    public List<ezbake.warehouse.BinaryReplay> get(ezbake.warehouse.GetRequest getRequest, ezbake.base.thrift.EzSecurityToken security) throws ezbake.warehouse.MaxGetRequestSizeExceededException, org.apache.thrift.TException;

    /**
     * Returns a list of URIs that have been ingested with the given URI prefix for the provided time period. URIs will only be returned for parsed objects
     * that have been ingested in that time period. The URI prefix is a required parameter, while the start and finish parameters are optional. If start or finish are omitted,
     * the time range will be from the beginning of time or to the end of time respectively. The type parameter is also optional, and defaults to PARSED. Currently we do not
     * support replaying a VIEW type, so that will throw an exception if selected. Returns in ascending temporal order. The uriPrefix is expected to conform to the
     * EzBake URI schema e.g. "CATEGORY://feed_name".
     * 
     * @param uriPrefix
     * @param replayOnlyLatest
     * @param start
     * @param finish
     * @param type
     * @param security
     */
    public List<ezbake.warehouse.DatedURI> replay(String uriPrefix, boolean replayOnlyLatest, ezbake.base.thrift.DateTime start, ezbake.base.thrift.DateTime finish, ezbake.warehouse.GetDataType type, ezbake.base.thrift.EzSecurityToken security) throws org.apache.thrift.TException;

    /**
     * As replay but returns a count. ATM this actually gets the results and
     * counts them as a placeholder so using it is a bad idea.
     * 
     * @param uriPrefix
     * @param start
     * @param finish
     * @param type
     * @param security
     */
    public int replayCount(String uriPrefix, ezbake.base.thrift.DateTime start, ezbake.base.thrift.DateTime finish, ezbake.warehouse.GetDataType type, ezbake.base.thrift.EzSecurityToken security) throws org.apache.thrift.TException;

    /**
     * Returns a list of timestamps for the various versions to make sure the user
     * knows what are valid version numbers.
     * 
     * @param uri
     * @param security
     */
    public List<Long> getVersions(String uri, ezbake.base.thrift.EzSecurityToken security) throws org.apache.thrift.TException;

    /**
     * As insert and get but for arbitrary data.
     * 
     * @param data
     * @param id
     * @param visibility
     * @param security
     */
    public ezbake.warehouse.IngestStatus insertView(ByteBuffer data, ezbake.warehouse.ViewId id, ezbake.base.thrift.Visibility visibility, ezbake.base.thrift.EzSecurityToken security) throws org.apache.thrift.TException;

    public ezbake.warehouse.BinaryReplay getLatestView(ezbake.warehouse.ViewId id, ezbake.base.thrift.EzSecurityToken security) throws ezbake.warehouse.EntryNotInWarehouseException, org.apache.thrift.TException;

    public ezbake.warehouse.BinaryReplay getView(ezbake.warehouse.ViewId id, long timestamp, ezbake.base.thrift.EzSecurityToken security) throws ezbake.warehouse.EntryNotInWarehouseException, org.apache.thrift.TException;

    /**
     * Convenience function to import data from hadoop instead of across the wire.
     * 
     * @param filename
     * @param visibility
     * @param security
     */
    public void importFromHadoop(String filename, ezbake.base.thrift.Visibility visibility, ezbake.base.thrift.EzSecurityToken security) throws org.apache.thrift.TException;

    /**
     * Update data for a specific data type. This updates the document with
     * updated raw/parsed data by adding a new version of the entry.
     * 
     * @param update
     * @param visibility
     * @param security
     */
    public ezbake.warehouse.IngestStatus updateEntry(ezbake.warehouse.UpdateEntry update, ezbake.base.thrift.Visibility visibility, ezbake.base.thrift.EzSecurityToken security) throws org.apache.thrift.TException;

    /**
     * Bulk update, given a PutRequest with list of entries.
     * 
     * @param putRequest
     * @param security
     */
    public ezbake.warehouse.IngestStatus put(ezbake.warehouse.PutRequest putRequest, ezbake.base.thrift.EzSecurityToken security) throws org.apache.thrift.TException;

    /**
     * Fetches all version details pertaining to an entry.
     * 
     * @param uri
     * @param security
     */
    public ezbake.warehouse.EntryDetail getEntryDetails(String uri, ezbake.base.thrift.EzSecurityToken security) throws org.apache.thrift.TException;

  }

  public interface AsyncIface extends ezbake.base.thrift.EzBakeBasePurgeService .AsyncIface {

    public void insert(ezbake.warehouse.Repository data, ezbake.base.thrift.Visibility visibility, ezbake.base.thrift.EzSecurityToken security, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getLatestRaw(String uri, ezbake.base.thrift.EzSecurityToken security, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getLatestParsed(String uri, ezbake.base.thrift.EzSecurityToken security, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getRaw(String uri, long version, ezbake.base.thrift.EzSecurityToken security, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getParsed(String uri, long version, ezbake.base.thrift.EzSecurityToken security, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void get(ezbake.warehouse.GetRequest getRequest, ezbake.base.thrift.EzSecurityToken security, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void replay(String uriPrefix, boolean replayOnlyLatest, ezbake.base.thrift.DateTime start, ezbake.base.thrift.DateTime finish, ezbake.warehouse.GetDataType type, ezbake.base.thrift.EzSecurityToken security, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void replayCount(String uriPrefix, ezbake.base.thrift.DateTime start, ezbake.base.thrift.DateTime finish, ezbake.warehouse.GetDataType type, ezbake.base.thrift.EzSecurityToken security, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getVersions(String uri, ezbake.base.thrift.EzSecurityToken security, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void insertView(ByteBuffer data, ezbake.warehouse.ViewId id, ezbake.base.thrift.Visibility visibility, ezbake.base.thrift.EzSecurityToken security, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getLatestView(ezbake.warehouse.ViewId id, ezbake.base.thrift.EzSecurityToken security, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getView(ezbake.warehouse.ViewId id, long timestamp, ezbake.base.thrift.EzSecurityToken security, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void importFromHadoop(String filename, ezbake.base.thrift.Visibility visibility, ezbake.base.thrift.EzSecurityToken security, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void updateEntry(ezbake.warehouse.UpdateEntry update, ezbake.base.thrift.Visibility visibility, ezbake.base.thrift.EzSecurityToken security, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void put(ezbake.warehouse.PutRequest putRequest, ezbake.base.thrift.EzSecurityToken security, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getEntryDetails(String uri, ezbake.base.thrift.EzSecurityToken security, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends ezbake.base.thrift.EzBakeBasePurgeService.Client implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public ezbake.warehouse.IngestStatus insert(ezbake.warehouse.Repository data, ezbake.base.thrift.Visibility visibility, ezbake.base.thrift.EzSecurityToken security) throws org.apache.thrift.TException
    {
      send_insert(data, visibility, security);
      return recv_insert();
    }

    public void send_insert(ezbake.warehouse.Repository data, ezbake.base.thrift.Visibility visibility, ezbake.base.thrift.EzSecurityToken security) throws org.apache.thrift.TException
    {
      insert_args args = new insert_args();
      args.setData(data);
      args.setVisibility(visibility);
      args.setSecurity(security);
      sendBase("insert", args);
    }

    public ezbake.warehouse.IngestStatus recv_insert() throws org.apache.thrift.TException
    {
      insert_result result = new insert_result();
      receiveBase(result, "insert");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "insert failed: unknown result");
    }

    public ezbake.warehouse.BinaryReplay getLatestRaw(String uri, ezbake.base.thrift.EzSecurityToken security) throws ezbake.warehouse.EntryNotInWarehouseException, org.apache.thrift.TException
    {
      send_getLatestRaw(uri, security);
      return recv_getLatestRaw();
    }

    public void send_getLatestRaw(String uri, ezbake.base.thrift.EzSecurityToken security) throws org.apache.thrift.TException
    {
      getLatestRaw_args args = new getLatestRaw_args();
      args.setUri(uri);
      args.setSecurity(security);
      sendBase("getLatestRaw", args);
    }

    public ezbake.warehouse.BinaryReplay recv_getLatestRaw() throws ezbake.warehouse.EntryNotInWarehouseException, org.apache.thrift.TException
    {
      getLatestRaw_result result = new getLatestRaw_result();
      receiveBase(result, "getLatestRaw");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getLatestRaw failed: unknown result");
    }

    public ezbake.warehouse.BinaryReplay getLatestParsed(String uri, ezbake.base.thrift.EzSecurityToken security) throws ezbake.warehouse.EntryNotInWarehouseException, org.apache.thrift.TException
    {
      send_getLatestParsed(uri, security);
      return recv_getLatestParsed();
    }

    public void send_getLatestParsed(String uri, ezbake.base.thrift.EzSecurityToken security) throws org.apache.thrift.TException
    {
      getLatestParsed_args args = new getLatestParsed_args();
      args.setUri(uri);
      args.setSecurity(security);
      sendBase("getLatestParsed", args);
    }

    public ezbake.warehouse.BinaryReplay recv_getLatestParsed() throws ezbake.warehouse.EntryNotInWarehouseException, org.apache.thrift.TException
    {
      getLatestParsed_result result = new getLatestParsed_result();
      receiveBase(result, "getLatestParsed");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getLatestParsed failed: unknown result");
    }

    public ezbake.warehouse.BinaryReplay getRaw(String uri, long version, ezbake.base.thrift.EzSecurityToken security) throws ezbake.warehouse.EntryNotInWarehouseException, org.apache.thrift.TException
    {
      send_getRaw(uri, version, security);
      return recv_getRaw();
    }

    public void send_getRaw(String uri, long version, ezbake.base.thrift.EzSecurityToken security) throws org.apache.thrift.TException
    {
      getRaw_args args = new getRaw_args();
      args.setUri(uri);
      args.setVersion(version);
      args.setSecurity(security);
      sendBase("getRaw", args);
    }

    public ezbake.warehouse.BinaryReplay recv_getRaw() throws ezbake.warehouse.EntryNotInWarehouseException, org.apache.thrift.TException
    {
      getRaw_result result = new getRaw_result();
      receiveBase(result, "getRaw");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getRaw failed: unknown result");
    }

    public ezbake.warehouse.BinaryReplay getParsed(String uri, long version, ezbake.base.thrift.EzSecurityToken security) throws ezbake.warehouse.EntryNotInWarehouseException, org.apache.thrift.TException
    {
      send_getParsed(uri, version, security);
      return recv_getParsed();
    }

    public void send_getParsed(String uri, long version, ezbake.base.thrift.EzSecurityToken security) throws org.apache.thrift.TException
    {
      getParsed_args args = new getParsed_args();
      args.setUri(uri);
      args.setVersion(version);
      args.setSecurity(security);
      sendBase("getParsed", args);
    }

    public ezbake.warehouse.BinaryReplay recv_getParsed() throws ezbake.warehouse.EntryNotInWarehouseException, org.apache.thrift.TException
    {
      getParsed_result result = new getParsed_result();
      receiveBase(result, "getParsed");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getParsed failed: unknown result");
    }

    public List<ezbake.warehouse.BinaryReplay> get(ezbake.warehouse.GetRequest getRequest, ezbake.base.thrift.EzSecurityToken security) throws ezbake.warehouse.MaxGetRequestSizeExceededException, org.apache.thrift.TException
    {
      send_get(getRequest, security);
      return recv_get();
    }

    public void send_get(ezbake.warehouse.GetRequest getRequest, ezbake.base.thrift.EzSecurityToken security) throws org.apache.thrift.TException
    {
      get_args args = new get_args();
      args.setGetRequest(getRequest);
      args.setSecurity(security);
      sendBase("get", args);
    }

    public List<ezbake.warehouse.BinaryReplay> recv_get() throws ezbake.warehouse.MaxGetRequestSizeExceededException, org.apache.thrift.TException
    {
      get_result result = new get_result();
      receiveBase(result, "get");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "get failed: unknown result");
    }

    public List<ezbake.warehouse.DatedURI> replay(String uriPrefix, boolean replayOnlyLatest, ezbake.base.thrift.DateTime start, ezbake.base.thrift.DateTime finish, ezbake.warehouse.GetDataType type, ezbake.base.thrift.EzSecurityToken security) throws org.apache.thrift.TException
    {
      send_replay(uriPrefix, replayOnlyLatest, start, finish, type, security);
      return recv_replay();
    }

    public void send_replay(String uriPrefix, boolean replayOnlyLatest, ezbake.base.thrift.DateTime start, ezbake.base.thrift.DateTime finish, ezbake.warehouse.GetDataType type, ezbake.base.thrift.EzSecurityToken security) throws org.apache.thrift.TException
    {
      replay_args args = new replay_args();
      args.setUriPrefix(uriPrefix);
      args.setReplayOnlyLatest(replayOnlyLatest);
      args.setStart(start);
      args.setFinish(finish);
      args.setType(type);
      args.setSecurity(security);
      sendBase("replay", args);
    }

    public List<ezbake.warehouse.DatedURI> recv_replay() throws org.apache.thrift.TException
    {
      replay_result result = new replay_result();
      receiveBase(result, "replay");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "replay failed: unknown result");
    }

    public int replayCount(String uriPrefix, ezbake.base.thrift.DateTime start, ezbake.base.thrift.DateTime finish, ezbake.warehouse.GetDataType type, ezbake.base.thrift.EzSecurityToken security) throws org.apache.thrift.TException
    {
      send_replayCount(uriPrefix, start, finish, type, security);
      return recv_replayCount();
    }

    public void send_replayCount(String uriPrefix, ezbake.base.thrift.DateTime start, ezbake.base.thrift.DateTime finish, ezbake.warehouse.GetDataType type, ezbake.base.thrift.EzSecurityToken security) throws org.apache.thrift.TException
    {
      replayCount_args args = new replayCount_args();
      args.setUriPrefix(uriPrefix);
      args.setStart(start);
      args.setFinish(finish);
      args.setType(type);
      args.setSecurity(security);
      sendBase("replayCount", args);
    }

    public int recv_replayCount() throws org.apache.thrift.TException
    {
      replayCount_result result = new replayCount_result();
      receiveBase(result, "replayCount");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "replayCount failed: unknown result");
    }

    public List<Long> getVersions(String uri, ezbake.base.thrift.EzSecurityToken security) throws org.apache.thrift.TException
    {
      send_getVersions(uri, security);
      return recv_getVersions();
    }

    public void send_getVersions(String uri, ezbake.base.thrift.EzSecurityToken security) throws org.apache.thrift.TException
    {
      getVersions_args args = new getVersions_args();
      args.setUri(uri);
      args.setSecurity(security);
      sendBase("getVersions", args);
    }

    public List<Long> recv_getVersions() throws org.apache.thrift.TException
    {
      getVersions_result result = new getVersions_result();
      receiveBase(result, "getVersions");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getVersions failed: unknown result");
    }

    public ezbake.warehouse.IngestStatus insertView(ByteBuffer data, ezbake.warehouse.ViewId id, ezbake.base.thrift.Visibility visibility, ezbake.base.thrift.EzSecurityToken security) throws org.apache.thrift.TException
    {
      send_insertView(data, id, visibility, security);
      return recv_insertView();
    }

    public void send_insertView(ByteBuffer data, ezbake.warehouse.ViewId id, ezbake.base.thrift.Visibility visibility, ezbake.base.thrift.EzSecurityToken security) throws org.apache.thrift.TException
    {
      insertView_args args = new insertView_args();
      args.setData(data);
      args.setId(id);
      args.setVisibility(visibility);
      args.setSecurity(security);
      sendBase("insertView", args);
    }

    public ezbake.warehouse.IngestStatus recv_insertView() throws org.apache.thrift.TException
    {
      insertView_result result = new insertView_result();
      receiveBase(result, "insertView");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "insertView failed: unknown result");
    }

    public ezbake.warehouse.BinaryReplay getLatestView(ezbake.warehouse.ViewId id, ezbake.base.thrift.EzSecurityToken security) throws ezbake.warehouse.EntryNotInWarehouseException, org.apache.thrift.TException
    {
      send_getLatestView(id, security);
      return recv_getLatestView();
    }

    public void send_getLatestView(ezbake.warehouse.ViewId id, ezbake.base.thrift.EzSecurityToken security) throws org.apache.thrift.TException
    {
      getLatestView_args args = new getLatestView_args();
      args.setId(id);
      args.setSecurity(security);
      sendBase("getLatestView", args);
    }

    public ezbake.warehouse.BinaryReplay recv_getLatestView() throws ezbake.warehouse.EntryNotInWarehouseException, org.apache.thrift.TException
    {
      getLatestView_result result = new getLatestView_result();
      receiveBase(result, "getLatestView");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getLatestView failed: unknown result");
    }

    public ezbake.warehouse.BinaryReplay getView(ezbake.warehouse.ViewId id, long timestamp, ezbake.base.thrift.EzSecurityToken security) throws ezbake.warehouse.EntryNotInWarehouseException, org.apache.thrift.TException
    {
      send_getView(id, timestamp, security);
      return recv_getView();
    }

    public void send_getView(ezbake.warehouse.ViewId id, long timestamp, ezbake.base.thrift.EzSecurityToken security) throws org.apache.thrift.TException
    {
      getView_args args = new getView_args();
      args.setId(id);
      args.setTimestamp(timestamp);
      args.setSecurity(security);
      sendBase("getView", args);
    }

    public ezbake.warehouse.BinaryReplay recv_getView() throws ezbake.warehouse.EntryNotInWarehouseException, org.apache.thrift.TException
    {
      getView_result result = new getView_result();
      receiveBase(result, "getView");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getView failed: unknown result");
    }

    public void importFromHadoop(String filename, ezbake.base.thrift.Visibility visibility, ezbake.base.thrift.EzSecurityToken security) throws org.apache.thrift.TException
    {
      send_importFromHadoop(filename, visibility, security);
      recv_importFromHadoop();
    }

    public void send_importFromHadoop(String filename, ezbake.base.thrift.Visibility visibility, ezbake.base.thrift.EzSecurityToken security) throws org.apache.thrift.TException
    {
      importFromHadoop_args args = new importFromHadoop_args();
      args.setFilename(filename);
      args.setVisibility(visibility);
      args.setSecurity(security);
      sendBase("importFromHadoop", args);
    }

    public void recv_importFromHadoop() throws org.apache.thrift.TException
    {
      importFromHadoop_result result = new importFromHadoop_result();
      receiveBase(result, "importFromHadoop");
      return;
    }

    public ezbake.warehouse.IngestStatus updateEntry(ezbake.warehouse.UpdateEntry update, ezbake.base.thrift.Visibility visibility, ezbake.base.thrift.EzSecurityToken security) throws org.apache.thrift.TException
    {
      send_updateEntry(update, visibility, security);
      return recv_updateEntry();
    }

    public void send_updateEntry(ezbake.warehouse.UpdateEntry update, ezbake.base.thrift.Visibility visibility, ezbake.base.thrift.EzSecurityToken security) throws org.apache.thrift.TException
    {
      updateEntry_args args = new updateEntry_args();
      args.setUpdate(update);
      args.setVisibility(visibility);
      args.setSecurity(security);
      sendBase("updateEntry", args);
    }

    public ezbake.warehouse.IngestStatus recv_updateEntry() throws org.apache.thrift.TException
    {
      updateEntry_result result = new updateEntry_result();
      receiveBase(result, "updateEntry");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "updateEntry failed: unknown result");
    }

    public ezbake.warehouse.IngestStatus put(ezbake.warehouse.PutRequest putRequest, ezbake.base.thrift.EzSecurityToken security) throws org.apache.thrift.TException
    {
      send_put(putRequest, security);
      return recv_put();
    }

    public void send_put(ezbake.warehouse.PutRequest putRequest, ezbake.base.thrift.EzSecurityToken security) throws org.apache.thrift.TException
    {
      put_args args = new put_args();
      args.setPutRequest(putRequest);
      args.setSecurity(security);
      sendBase("put", args);
    }

    public ezbake.warehouse.IngestStatus recv_put() throws org.apache.thrift.TException
    {
      put_result result = new put_result();
      receiveBase(result, "put");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "put failed: unknown result");
    }

    public ezbake.warehouse.EntryDetail getEntryDetails(String uri, ezbake.base.thrift.EzSecurityToken security) throws org.apache.thrift.TException
    {
      send_getEntryDetails(uri, security);
      return recv_getEntryDetails();
    }

    public void send_getEntryDetails(String uri, ezbake.base.thrift.EzSecurityToken security) throws org.apache.thrift.TException
    {
      getEntryDetails_args args = new getEntryDetails_args();
      args.setUri(uri);
      args.setSecurity(security);
      sendBase("getEntryDetails", args);
    }

    public ezbake.warehouse.EntryDetail recv_getEntryDetails() throws org.apache.thrift.TException
    {
      getEntryDetails_result result = new getEntryDetails_result();
      receiveBase(result, "getEntryDetails");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getEntryDetails failed: unknown result");
    }

  }
  public static class AsyncClient extends ezbake.base.thrift.EzBakeBasePurgeService.AsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void insert(ezbake.warehouse.Repository data, ezbake.base.thrift.Visibility visibility, ezbake.base.thrift.EzSecurityToken security, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      insert_call method_call = new insert_call(data, visibility, security, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class insert_call extends org.apache.thrift.async.TAsyncMethodCall {
      private ezbake.warehouse.Repository data;
      private ezbake.base.thrift.Visibility visibility;
      private ezbake.base.thrift.EzSecurityToken security;
      public insert_call(ezbake.warehouse.Repository data, ezbake.base.thrift.Visibility visibility, ezbake.base.thrift.EzSecurityToken security, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.data = data;
        this.visibility = visibility;
        this.security = security;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("insert", org.apache.thrift.protocol.TMessageType.CALL, 0));
        insert_args args = new insert_args();
        args.setData(data);
        args.setVisibility(visibility);
        args.setSecurity(security);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public ezbake.warehouse.IngestStatus getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_insert();
      }
    }

    public void getLatestRaw(String uri, ezbake.base.thrift.EzSecurityToken security, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getLatestRaw_call method_call = new getLatestRaw_call(uri, security, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getLatestRaw_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String uri;
      private ezbake.base.thrift.EzSecurityToken security;
      public getLatestRaw_call(String uri, ezbake.base.thrift.EzSecurityToken security, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.uri = uri;
        this.security = security;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getLatestRaw", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getLatestRaw_args args = new getLatestRaw_args();
        args.setUri(uri);
        args.setSecurity(security);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public ezbake.warehouse.BinaryReplay getResult() throws ezbake.warehouse.EntryNotInWarehouseException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getLatestRaw();
      }
    }

    public void getLatestParsed(String uri, ezbake.base.thrift.EzSecurityToken security, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getLatestParsed_call method_call = new getLatestParsed_call(uri, security, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getLatestParsed_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String uri;
      private ezbake.base.thrift.EzSecurityToken security;
      public getLatestParsed_call(String uri, ezbake.base.thrift.EzSecurityToken security, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.uri = uri;
        this.security = security;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getLatestParsed", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getLatestParsed_args args = new getLatestParsed_args();
        args.setUri(uri);
        args.setSecurity(security);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public ezbake.warehouse.BinaryReplay getResult() throws ezbake.warehouse.EntryNotInWarehouseException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getLatestParsed();
      }
    }

    public void getRaw(String uri, long version, ezbake.base.thrift.EzSecurityToken security, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getRaw_call method_call = new getRaw_call(uri, version, security, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getRaw_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String uri;
      private long version;
      private ezbake.base.thrift.EzSecurityToken security;
      public getRaw_call(String uri, long version, ezbake.base.thrift.EzSecurityToken security, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.uri = uri;
        this.version = version;
        this.security = security;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getRaw", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getRaw_args args = new getRaw_args();
        args.setUri(uri);
        args.setVersion(version);
        args.setSecurity(security);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public ezbake.warehouse.BinaryReplay getResult() throws ezbake.warehouse.EntryNotInWarehouseException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getRaw();
      }
    }

    public void getParsed(String uri, long version, ezbake.base.thrift.EzSecurityToken security, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getParsed_call method_call = new getParsed_call(uri, version, security, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getParsed_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String uri;
      private long version;
      private ezbake.base.thrift.EzSecurityToken security;
      public getParsed_call(String uri, long version, ezbake.base.thrift.EzSecurityToken security, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.uri = uri;
        this.version = version;
        this.security = security;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getParsed", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getParsed_args args = new getParsed_args();
        args.setUri(uri);
        args.setVersion(version);
        args.setSecurity(security);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public ezbake.warehouse.BinaryReplay getResult() throws ezbake.warehouse.EntryNotInWarehouseException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getParsed();
      }
    }

    public void get(ezbake.warehouse.GetRequest getRequest, ezbake.base.thrift.EzSecurityToken security, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      get_call method_call = new get_call(getRequest, security, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class get_call extends org.apache.thrift.async.TAsyncMethodCall {
      private ezbake.warehouse.GetRequest getRequest;
      private ezbake.base.thrift.EzSecurityToken security;
      public get_call(ezbake.warehouse.GetRequest getRequest, ezbake.base.thrift.EzSecurityToken security, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.getRequest = getRequest;
        this.security = security;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("get", org.apache.thrift.protocol.TMessageType.CALL, 0));
        get_args args = new get_args();
        args.setGetRequest(getRequest);
        args.setSecurity(security);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<ezbake.warehouse.BinaryReplay> getResult() throws ezbake.warehouse.MaxGetRequestSizeExceededException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_get();
      }
    }

    public void replay(String uriPrefix, boolean replayOnlyLatest, ezbake.base.thrift.DateTime start, ezbake.base.thrift.DateTime finish, ezbake.warehouse.GetDataType type, ezbake.base.thrift.EzSecurityToken security, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      replay_call method_call = new replay_call(uriPrefix, replayOnlyLatest, start, finish, type, security, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class replay_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String uriPrefix;
      private boolean replayOnlyLatest;
      private ezbake.base.thrift.DateTime start;
      private ezbake.base.thrift.DateTime finish;
      private ezbake.warehouse.GetDataType type;
      private ezbake.base.thrift.EzSecurityToken security;
      public replay_call(String uriPrefix, boolean replayOnlyLatest, ezbake.base.thrift.DateTime start, ezbake.base.thrift.DateTime finish, ezbake.warehouse.GetDataType type, ezbake.base.thrift.EzSecurityToken security, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.uriPrefix = uriPrefix;
        this.replayOnlyLatest = replayOnlyLatest;
        this.start = start;
        this.finish = finish;
        this.type = type;
        this.security = security;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("replay", org.apache.thrift.protocol.TMessageType.CALL, 0));
        replay_args args = new replay_args();
        args.setUriPrefix(uriPrefix);
        args.setReplayOnlyLatest(replayOnlyLatest);
        args.setStart(start);
        args.setFinish(finish);
        args.setType(type);
        args.setSecurity(security);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<ezbake.warehouse.DatedURI> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_replay();
      }
    }

    public void replayCount(String uriPrefix, ezbake.base.thrift.DateTime start, ezbake.base.thrift.DateTime finish, ezbake.warehouse.GetDataType type, ezbake.base.thrift.EzSecurityToken security, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      replayCount_call method_call = new replayCount_call(uriPrefix, start, finish, type, security, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class replayCount_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String uriPrefix;
      private ezbake.base.thrift.DateTime start;
      private ezbake.base.thrift.DateTime finish;
      private ezbake.warehouse.GetDataType type;
      private ezbake.base.thrift.EzSecurityToken security;
      public replayCount_call(String uriPrefix, ezbake.base.thrift.DateTime start, ezbake.base.thrift.DateTime finish, ezbake.warehouse.GetDataType type, ezbake.base.thrift.EzSecurityToken security, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.uriPrefix = uriPrefix;
        this.start = start;
        this.finish = finish;
        this.type = type;
        this.security = security;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("replayCount", org.apache.thrift.protocol.TMessageType.CALL, 0));
        replayCount_args args = new replayCount_args();
        args.setUriPrefix(uriPrefix);
        args.setStart(start);
        args.setFinish(finish);
        args.setType(type);
        args.setSecurity(security);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public int getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_replayCount();
      }
    }

    public void getVersions(String uri, ezbake.base.thrift.EzSecurityToken security, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getVersions_call method_call = new getVersions_call(uri, security, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getVersions_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String uri;
      private ezbake.base.thrift.EzSecurityToken security;
      public getVersions_call(String uri, ezbake.base.thrift.EzSecurityToken security, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.uri = uri;
        this.security = security;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getVersions", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getVersions_args args = new getVersions_args();
        args.setUri(uri);
        args.setSecurity(security);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<Long> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getVersions();
      }
    }

    public void insertView(ByteBuffer data, ezbake.warehouse.ViewId id, ezbake.base.thrift.Visibility visibility, ezbake.base.thrift.EzSecurityToken security, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      insertView_call method_call = new insertView_call(data, id, visibility, security, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class insertView_call extends org.apache.thrift.async.TAsyncMethodCall {
      private ByteBuffer data;
      private ezbake.warehouse.ViewId id;
      private ezbake.base.thrift.Visibility visibility;
      private ezbake.base.thrift.EzSecurityToken security;
      public insertView_call(ByteBuffer data, ezbake.warehouse.ViewId id, ezbake.base.thrift.Visibility visibility, ezbake.base.thrift.EzSecurityToken security, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.data = data;
        this.id = id;
        this.visibility = visibility;
        this.security = security;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("insertView", org.apache.thrift.protocol.TMessageType.CALL, 0));
        insertView_args args = new insertView_args();
        args.setData(data);
        args.setId(id);
        args.setVisibility(visibility);
        args.setSecurity(security);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public ezbake.warehouse.IngestStatus getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_insertView();
      }
    }

    public void getLatestView(ezbake.warehouse.ViewId id, ezbake.base.thrift.EzSecurityToken security, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getLatestView_call method_call = new getLatestView_call(id, security, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getLatestView_call extends org.apache.thrift.async.TAsyncMethodCall {
      private ezbake.warehouse.ViewId id;
      private ezbake.base.thrift.EzSecurityToken security;
      public getLatestView_call(ezbake.warehouse.ViewId id, ezbake.base.thrift.EzSecurityToken security, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.id = id;
        this.security = security;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getLatestView", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getLatestView_args args = new getLatestView_args();
        args.setId(id);
        args.setSecurity(security);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public ezbake.warehouse.BinaryReplay getResult() throws ezbake.warehouse.EntryNotInWarehouseException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getLatestView();
      }
    }

    public void getView(ezbake.warehouse.ViewId id, long timestamp, ezbake.base.thrift.EzSecurityToken security, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getView_call method_call = new getView_call(id, timestamp, security, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getView_call extends org.apache.thrift.async.TAsyncMethodCall {
      private ezbake.warehouse.ViewId id;
      private long timestamp;
      private ezbake.base.thrift.EzSecurityToken security;
      public getView_call(ezbake.warehouse.ViewId id, long timestamp, ezbake.base.thrift.EzSecurityToken security, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.id = id;
        this.timestamp = timestamp;
        this.security = security;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getView", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getView_args args = new getView_args();
        args.setId(id);
        args.setTimestamp(timestamp);
        args.setSecurity(security);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public ezbake.warehouse.BinaryReplay getResult() throws ezbake.warehouse.EntryNotInWarehouseException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getView();
      }
    }

    public void importFromHadoop(String filename, ezbake.base.thrift.Visibility visibility, ezbake.base.thrift.EzSecurityToken security, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      importFromHadoop_call method_call = new importFromHadoop_call(filename, visibility, security, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class importFromHadoop_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String filename;
      private ezbake.base.thrift.Visibility visibility;
      private ezbake.base.thrift.EzSecurityToken security;
      public importFromHadoop_call(String filename, ezbake.base.thrift.Visibility visibility, ezbake.base.thrift.EzSecurityToken security, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.filename = filename;
        this.visibility = visibility;
        this.security = security;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("importFromHadoop", org.apache.thrift.protocol.TMessageType.CALL, 0));
        importFromHadoop_args args = new importFromHadoop_args();
        args.setFilename(filename);
        args.setVisibility(visibility);
        args.setSecurity(security);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_importFromHadoop();
      }
    }

    public void updateEntry(ezbake.warehouse.UpdateEntry update, ezbake.base.thrift.Visibility visibility, ezbake.base.thrift.EzSecurityToken security, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      updateEntry_call method_call = new updateEntry_call(update, visibility, security, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class updateEntry_call extends org.apache.thrift.async.TAsyncMethodCall {
      private ezbake.warehouse.UpdateEntry update;
      private ezbake.base.thrift.Visibility visibility;
      private ezbake.base.thrift.EzSecurityToken security;
      public updateEntry_call(ezbake.warehouse.UpdateEntry update, ezbake.base.thrift.Visibility visibility, ezbake.base.thrift.EzSecurityToken security, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.update = update;
        this.visibility = visibility;
        this.security = security;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("updateEntry", org.apache.thrift.protocol.TMessageType.CALL, 0));
        updateEntry_args args = new updateEntry_args();
        args.setUpdate(update);
        args.setVisibility(visibility);
        args.setSecurity(security);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public ezbake.warehouse.IngestStatus getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_updateEntry();
      }
    }

    public void put(ezbake.warehouse.PutRequest putRequest, ezbake.base.thrift.EzSecurityToken security, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      put_call method_call = new put_call(putRequest, security, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class put_call extends org.apache.thrift.async.TAsyncMethodCall {
      private ezbake.warehouse.PutRequest putRequest;
      private ezbake.base.thrift.EzSecurityToken security;
      public put_call(ezbake.warehouse.PutRequest putRequest, ezbake.base.thrift.EzSecurityToken security, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.putRequest = putRequest;
        this.security = security;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("put", org.apache.thrift.protocol.TMessageType.CALL, 0));
        put_args args = new put_args();
        args.setPutRequest(putRequest);
        args.setSecurity(security);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public ezbake.warehouse.IngestStatus getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_put();
      }
    }

    public void getEntryDetails(String uri, ezbake.base.thrift.EzSecurityToken security, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getEntryDetails_call method_call = new getEntryDetails_call(uri, security, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getEntryDetails_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String uri;
      private ezbake.base.thrift.EzSecurityToken security;
      public getEntryDetails_call(String uri, ezbake.base.thrift.EzSecurityToken security, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.uri = uri;
        this.security = security;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getEntryDetails", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getEntryDetails_args args = new getEntryDetails_args();
        args.setUri(uri);
        args.setSecurity(security);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public ezbake.warehouse.EntryDetail getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getEntryDetails();
      }
    }

  }

  public static class Processor<I extends Iface> extends ezbake.base.thrift.EzBakeBasePurgeService.Processor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("insert", new insert());
      processMap.put("getLatestRaw", new getLatestRaw());
      processMap.put("getLatestParsed", new getLatestParsed());
      processMap.put("getRaw", new getRaw());
      processMap.put("getParsed", new getParsed());
      processMap.put("get", new get());
      processMap.put("replay", new replay());
      processMap.put("replayCount", new replayCount());
      processMap.put("getVersions", new getVersions());
      processMap.put("insertView", new insertView());
      processMap.put("getLatestView", new getLatestView());
      processMap.put("getView", new getView());
      processMap.put("importFromHadoop", new importFromHadoop());
      processMap.put("updateEntry", new updateEntry());
      processMap.put("put", new put());
      processMap.put("getEntryDetails", new getEntryDetails());
      return processMap;
    }

    public static class insert<I extends Iface> extends org.apache.thrift.ProcessFunction<I, insert_args> {
      public insert() {
        super("insert");
      }

      public insert_args getEmptyArgsInstance() {
        return new insert_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public insert_result getResult(I iface, insert_args args) throws org.apache.thrift.TException {
        insert_result result = new insert_result();
        result.success = iface.insert(args.data, args.visibility, args.security);
        return result;
      }
    }

    public static class getLatestRaw<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getLatestRaw_args> {
      public getLatestRaw() {
        super("getLatestRaw");
      }

      public getLatestRaw_args getEmptyArgsInstance() {
        return new getLatestRaw_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getLatestRaw_result getResult(I iface, getLatestRaw_args args) throws org.apache.thrift.TException {
        getLatestRaw_result result = new getLatestRaw_result();
        try {
          result.success = iface.getLatestRaw(args.uri, args.security);
        } catch (ezbake.warehouse.EntryNotInWarehouseException e) {
          result.e = e;
        }
        return result;
      }
    }

    public static class getLatestParsed<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getLatestParsed_args> {
      public getLatestParsed() {
        super("getLatestParsed");
      }

      public getLatestParsed_args getEmptyArgsInstance() {
        return new getLatestParsed_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getLatestParsed_result getResult(I iface, getLatestParsed_args args) throws org.apache.thrift.TException {
        getLatestParsed_result result = new getLatestParsed_result();
        try {
          result.success = iface.getLatestParsed(args.uri, args.security);
        } catch (ezbake.warehouse.EntryNotInWarehouseException e) {
          result.e = e;
        }
        return result;
      }
    }

    public static class getRaw<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getRaw_args> {
      public getRaw() {
        super("getRaw");
      }

      public getRaw_args getEmptyArgsInstance() {
        return new getRaw_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getRaw_result getResult(I iface, getRaw_args args) throws org.apache.thrift.TException {
        getRaw_result result = new getRaw_result();
        try {
          result.success = iface.getRaw(args.uri, args.version, args.security);
        } catch (ezbake.warehouse.EntryNotInWarehouseException e) {
          result.e = e;
        }
        return result;
      }
    }

    public static class getParsed<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getParsed_args> {
      public getParsed() {
        super("getParsed");
      }

      public getParsed_args getEmptyArgsInstance() {
        return new getParsed_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getParsed_result getResult(I iface, getParsed_args args) throws org.apache.thrift.TException {
        getParsed_result result = new getParsed_result();
        try {
          result.success = iface.getParsed(args.uri, args.version, args.security);
        } catch (ezbake.warehouse.EntryNotInWarehouseException e) {
          result.e = e;
        }
        return result;
      }
    }

    public static class get<I extends Iface> extends org.apache.thrift.ProcessFunction<I, get_args> {
      public get() {
        super("get");
      }

      public get_args getEmptyArgsInstance() {
        return new get_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public get_result getResult(I iface, get_args args) throws org.apache.thrift.TException {
        get_result result = new get_result();
        try {
          result.success = iface.get(args.getRequest, args.security);
        } catch (ezbake.warehouse.MaxGetRequestSizeExceededException e) {
          result.e = e;
        }
        return result;
      }
    }

    public static class replay<I extends Iface> extends org.apache.thrift.ProcessFunction<I, replay_args> {
      public replay() {
        super("replay");
      }

      public replay_args getEmptyArgsInstance() {
        return new replay_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public replay_result getResult(I iface, replay_args args) throws org.apache.thrift.TException {
        replay_result result = new replay_result();
        result.success = iface.replay(args.uriPrefix, args.replayOnlyLatest, args.start, args.finish, args.type, args.security);
        return result;
      }
    }

    public static class replayCount<I extends Iface> extends org.apache.thrift.ProcessFunction<I, replayCount_args> {
      public replayCount() {
        super("replayCount");
      }

      public replayCount_args getEmptyArgsInstance() {
        return new replayCount_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public replayCount_result getResult(I iface, replayCount_args args) throws org.apache.thrift.TException {
        replayCount_result result = new replayCount_result();
        result.success = iface.replayCount(args.uriPrefix, args.start, args.finish, args.type, args.security);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class getVersions<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getVersions_args> {
      public getVersions() {
        super("getVersions");
      }

      public getVersions_args getEmptyArgsInstance() {
        return new getVersions_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getVersions_result getResult(I iface, getVersions_args args) throws org.apache.thrift.TException {
        getVersions_result result = new getVersions_result();
        result.success = iface.getVersions(args.uri, args.security);
        return result;
      }
    }

    public static class insertView<I extends Iface> extends org.apache.thrift.ProcessFunction<I, insertView_args> {
      public insertView() {
        super("insertView");
      }

      public insertView_args getEmptyArgsInstance() {
        return new insertView_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public insertView_result getResult(I iface, insertView_args args) throws org.apache.thrift.TException {
        insertView_result result = new insertView_result();
        result.success = iface.insertView(args.data, args.id, args.visibility, args.security);
        return result;
      }
    }

    public static class getLatestView<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getLatestView_args> {
      public getLatestView() {
        super("getLatestView");
      }

      public getLatestView_args getEmptyArgsInstance() {
        return new getLatestView_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getLatestView_result getResult(I iface, getLatestView_args args) throws org.apache.thrift.TException {
        getLatestView_result result = new getLatestView_result();
        try {
          result.success = iface.getLatestView(args.id, args.security);
        } catch (ezbake.warehouse.EntryNotInWarehouseException e) {
          result.e = e;
        }
        return result;
      }
    }

    public static class getView<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getView_args> {
      public getView() {
        super("getView");
      }

      public getView_args getEmptyArgsInstance() {
        return new getView_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getView_result getResult(I iface, getView_args args) throws org.apache.thrift.TException {
        getView_result result = new getView_result();
        try {
          result.success = iface.getView(args.id, args.timestamp, args.security);
        } catch (ezbake.warehouse.EntryNotInWarehouseException e) {
          result.e = e;
        }
        return result;
      }
    }

    public static class importFromHadoop<I extends Iface> extends org.apache.thrift.ProcessFunction<I, importFromHadoop_args> {
      public importFromHadoop() {
        super("importFromHadoop");
      }

      public importFromHadoop_args getEmptyArgsInstance() {
        return new importFromHadoop_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public importFromHadoop_result getResult(I iface, importFromHadoop_args args) throws org.apache.thrift.TException {
        importFromHadoop_result result = new importFromHadoop_result();
        iface.importFromHadoop(args.filename, args.visibility, args.security);
        return result;
      }
    }

    public static class updateEntry<I extends Iface> extends org.apache.thrift.ProcessFunction<I, updateEntry_args> {
      public updateEntry() {
        super("updateEntry");
      }

      public updateEntry_args getEmptyArgsInstance() {
        return new updateEntry_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public updateEntry_result getResult(I iface, updateEntry_args args) throws org.apache.thrift.TException {
        updateEntry_result result = new updateEntry_result();
        result.success = iface.updateEntry(args.update, args.visibility, args.security);
        return result;
      }
    }

    public static class put<I extends Iface> extends org.apache.thrift.ProcessFunction<I, put_args> {
      public put() {
        super("put");
      }

      public put_args getEmptyArgsInstance() {
        return new put_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public put_result getResult(I iface, put_args args) throws org.apache.thrift.TException {
        put_result result = new put_result();
        result.success = iface.put(args.putRequest, args.security);
        return result;
      }
    }

    public static class getEntryDetails<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getEntryDetails_args> {
      public getEntryDetails() {
        super("getEntryDetails");
      }

      public getEntryDetails_args getEmptyArgsInstance() {
        return new getEntryDetails_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getEntryDetails_result getResult(I iface, getEntryDetails_args args) throws org.apache.thrift.TException {
        getEntryDetails_result result = new getEntryDetails_result();
        result.success = iface.getEntryDetails(args.uri, args.security);
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends ezbake.base.thrift.EzBakeBasePurgeService.AsyncProcessor<I> {
    private static final Logger LOGGER = LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("insert", new insert());
      processMap.put("getLatestRaw", new getLatestRaw());
      processMap.put("getLatestParsed", new getLatestParsed());
      processMap.put("getRaw", new getRaw());
      processMap.put("getParsed", new getParsed());
      processMap.put("get", new get());
      processMap.put("replay", new replay());
      processMap.put("replayCount", new replayCount());
      processMap.put("getVersions", new getVersions());
      processMap.put("insertView", new insertView());
      processMap.put("getLatestView", new getLatestView());
      processMap.put("getView", new getView());
      processMap.put("importFromHadoop", new importFromHadoop());
      processMap.put("updateEntry", new updateEntry());
      processMap.put("put", new put());
      processMap.put("getEntryDetails", new getEntryDetails());
      return processMap;
    }

    public static class insert<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, insert_args, ezbake.warehouse.IngestStatus> {
      public insert() {
        super("insert");
      }

      public insert_args getEmptyArgsInstance() {
        return new insert_args();
      }

      public AsyncMethodCallback<ezbake.warehouse.IngestStatus> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<ezbake.warehouse.IngestStatus>() { 
          public void onComplete(ezbake.warehouse.IngestStatus o) {
            insert_result result = new insert_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            insert_result result = new insert_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, insert_args args, org.apache.thrift.async.AsyncMethodCallback<ezbake.warehouse.IngestStatus> resultHandler) throws TException {
        iface.insert(args.data, args.visibility, args.security,resultHandler);
      }
    }

    public static class getLatestRaw<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getLatestRaw_args, ezbake.warehouse.BinaryReplay> {
      public getLatestRaw() {
        super("getLatestRaw");
      }

      public getLatestRaw_args getEmptyArgsInstance() {
        return new getLatestRaw_args();
      }

      public AsyncMethodCallback<ezbake.warehouse.BinaryReplay> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<ezbake.warehouse.BinaryReplay>() { 
          public void onComplete(ezbake.warehouse.BinaryReplay o) {
            getLatestRaw_result result = new getLatestRaw_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getLatestRaw_result result = new getLatestRaw_result();
            if (e instanceof ezbake.warehouse.EntryNotInWarehouseException) {
                        result.e = (ezbake.warehouse.EntryNotInWarehouseException) e;
                        result.setEIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getLatestRaw_args args, org.apache.thrift.async.AsyncMethodCallback<ezbake.warehouse.BinaryReplay> resultHandler) throws TException {
        iface.getLatestRaw(args.uri, args.security,resultHandler);
      }
    }

    public static class getLatestParsed<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getLatestParsed_args, ezbake.warehouse.BinaryReplay> {
      public getLatestParsed() {
        super("getLatestParsed");
      }

      public getLatestParsed_args getEmptyArgsInstance() {
        return new getLatestParsed_args();
      }

      public AsyncMethodCallback<ezbake.warehouse.BinaryReplay> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<ezbake.warehouse.BinaryReplay>() { 
          public void onComplete(ezbake.warehouse.BinaryReplay o) {
            getLatestParsed_result result = new getLatestParsed_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getLatestParsed_result result = new getLatestParsed_result();
            if (e instanceof ezbake.warehouse.EntryNotInWarehouseException) {
                        result.e = (ezbake.warehouse.EntryNotInWarehouseException) e;
                        result.setEIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getLatestParsed_args args, org.apache.thrift.async.AsyncMethodCallback<ezbake.warehouse.BinaryReplay> resultHandler) throws TException {
        iface.getLatestParsed(args.uri, args.security,resultHandler);
      }
    }

    public static class getRaw<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getRaw_args, ezbake.warehouse.BinaryReplay> {
      public getRaw() {
        super("getRaw");
      }

      public getRaw_args getEmptyArgsInstance() {
        return new getRaw_args();
      }

      public AsyncMethodCallback<ezbake.warehouse.BinaryReplay> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<ezbake.warehouse.BinaryReplay>() { 
          public void onComplete(ezbake.warehouse.BinaryReplay o) {
            getRaw_result result = new getRaw_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getRaw_result result = new getRaw_result();
            if (e instanceof ezbake.warehouse.EntryNotInWarehouseException) {
                        result.e = (ezbake.warehouse.EntryNotInWarehouseException) e;
                        result.setEIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getRaw_args args, org.apache.thrift.async.AsyncMethodCallback<ezbake.warehouse.BinaryReplay> resultHandler) throws TException {
        iface.getRaw(args.uri, args.version, args.security,resultHandler);
      }
    }

    public static class getParsed<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getParsed_args, ezbake.warehouse.BinaryReplay> {
      public getParsed() {
        super("getParsed");
      }

      public getParsed_args getEmptyArgsInstance() {
        return new getParsed_args();
      }

      public AsyncMethodCallback<ezbake.warehouse.BinaryReplay> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<ezbake.warehouse.BinaryReplay>() { 
          public void onComplete(ezbake.warehouse.BinaryReplay o) {
            getParsed_result result = new getParsed_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getParsed_result result = new getParsed_result();
            if (e instanceof ezbake.warehouse.EntryNotInWarehouseException) {
                        result.e = (ezbake.warehouse.EntryNotInWarehouseException) e;
                        result.setEIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getParsed_args args, org.apache.thrift.async.AsyncMethodCallback<ezbake.warehouse.BinaryReplay> resultHandler) throws TException {
        iface.getParsed(args.uri, args.version, args.security,resultHandler);
      }
    }

    public static class get<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, get_args, List<ezbake.warehouse.BinaryReplay>> {
      public get() {
        super("get");
      }

      public get_args getEmptyArgsInstance() {
        return new get_args();
      }

      public AsyncMethodCallback<List<ezbake.warehouse.BinaryReplay>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<ezbake.warehouse.BinaryReplay>>() { 
          public void onComplete(List<ezbake.warehouse.BinaryReplay> o) {
            get_result result = new get_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            get_result result = new get_result();
            if (e instanceof ezbake.warehouse.MaxGetRequestSizeExceededException) {
                        result.e = (ezbake.warehouse.MaxGetRequestSizeExceededException) e;
                        result.setEIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, get_args args, org.apache.thrift.async.AsyncMethodCallback<List<ezbake.warehouse.BinaryReplay>> resultHandler) throws TException {
        iface.get(args.getRequest, args.security,resultHandler);
      }
    }

    public static class replay<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, replay_args, List<ezbake.warehouse.DatedURI>> {
      public replay() {
        super("replay");
      }

      public replay_args getEmptyArgsInstance() {
        return new replay_args();
      }

      public AsyncMethodCallback<List<ezbake.warehouse.DatedURI>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<ezbake.warehouse.DatedURI>>() { 
          public void onComplete(List<ezbake.warehouse.DatedURI> o) {
            replay_result result = new replay_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            replay_result result = new replay_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, replay_args args, org.apache.thrift.async.AsyncMethodCallback<List<ezbake.warehouse.DatedURI>> resultHandler) throws TException {
        iface.replay(args.uriPrefix, args.replayOnlyLatest, args.start, args.finish, args.type, args.security,resultHandler);
      }
    }

    public static class replayCount<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, replayCount_args, Integer> {
      public replayCount() {
        super("replayCount");
      }

      public replayCount_args getEmptyArgsInstance() {
        return new replayCount_args();
      }

      public AsyncMethodCallback<Integer> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Integer>() { 
          public void onComplete(Integer o) {
            replayCount_result result = new replayCount_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            replayCount_result result = new replayCount_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, replayCount_args args, org.apache.thrift.async.AsyncMethodCallback<Integer> resultHandler) throws TException {
        iface.replayCount(args.uriPrefix, args.start, args.finish, args.type, args.security,resultHandler);
      }
    }

    public static class getVersions<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getVersions_args, List<Long>> {
      public getVersions() {
        super("getVersions");
      }

      public getVersions_args getEmptyArgsInstance() {
        return new getVersions_args();
      }

      public AsyncMethodCallback<List<Long>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<Long>>() { 
          public void onComplete(List<Long> o) {
            getVersions_result result = new getVersions_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getVersions_result result = new getVersions_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getVersions_args args, org.apache.thrift.async.AsyncMethodCallback<List<Long>> resultHandler) throws TException {
        iface.getVersions(args.uri, args.security,resultHandler);
      }
    }

    public static class insertView<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, insertView_args, ezbake.warehouse.IngestStatus> {
      public insertView() {
        super("insertView");
      }

      public insertView_args getEmptyArgsInstance() {
        return new insertView_args();
      }

      public AsyncMethodCallback<ezbake.warehouse.IngestStatus> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<ezbake.warehouse.IngestStatus>() { 
          public void onComplete(ezbake.warehouse.IngestStatus o) {
            insertView_result result = new insertView_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            insertView_result result = new insertView_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, insertView_args args, org.apache.thrift.async.AsyncMethodCallback<ezbake.warehouse.IngestStatus> resultHandler) throws TException {
        iface.insertView(args.data, args.id, args.visibility, args.security,resultHandler);
      }
    }

    public static class getLatestView<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getLatestView_args, ezbake.warehouse.BinaryReplay> {
      public getLatestView() {
        super("getLatestView");
      }

      public getLatestView_args getEmptyArgsInstance() {
        return new getLatestView_args();
      }

      public AsyncMethodCallback<ezbake.warehouse.BinaryReplay> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<ezbake.warehouse.BinaryReplay>() { 
          public void onComplete(ezbake.warehouse.BinaryReplay o) {
            getLatestView_result result = new getLatestView_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getLatestView_result result = new getLatestView_result();
            if (e instanceof ezbake.warehouse.EntryNotInWarehouseException) {
                        result.e = (ezbake.warehouse.EntryNotInWarehouseException) e;
                        result.setEIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getLatestView_args args, org.apache.thrift.async.AsyncMethodCallback<ezbake.warehouse.BinaryReplay> resultHandler) throws TException {
        iface.getLatestView(args.id, args.security,resultHandler);
      }
    }

    public static class getView<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getView_args, ezbake.warehouse.BinaryReplay> {
      public getView() {
        super("getView");
      }

      public getView_args getEmptyArgsInstance() {
        return new getView_args();
      }

      public AsyncMethodCallback<ezbake.warehouse.BinaryReplay> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<ezbake.warehouse.BinaryReplay>() { 
          public void onComplete(ezbake.warehouse.BinaryReplay o) {
            getView_result result = new getView_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getView_result result = new getView_result();
            if (e instanceof ezbake.warehouse.EntryNotInWarehouseException) {
                        result.e = (ezbake.warehouse.EntryNotInWarehouseException) e;
                        result.setEIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getView_args args, org.apache.thrift.async.AsyncMethodCallback<ezbake.warehouse.BinaryReplay> resultHandler) throws TException {
        iface.getView(args.id, args.timestamp, args.security,resultHandler);
      }
    }

    public static class importFromHadoop<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, importFromHadoop_args, Void> {
      public importFromHadoop() {
        super("importFromHadoop");
      }

      public importFromHadoop_args getEmptyArgsInstance() {
        return new importFromHadoop_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            importFromHadoop_result result = new importFromHadoop_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            importFromHadoop_result result = new importFromHadoop_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, importFromHadoop_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.importFromHadoop(args.filename, args.visibility, args.security,resultHandler);
      }
    }

    public static class updateEntry<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, updateEntry_args, ezbake.warehouse.IngestStatus> {
      public updateEntry() {
        super("updateEntry");
      }

      public updateEntry_args getEmptyArgsInstance() {
        return new updateEntry_args();
      }

      public AsyncMethodCallback<ezbake.warehouse.IngestStatus> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<ezbake.warehouse.IngestStatus>() { 
          public void onComplete(ezbake.warehouse.IngestStatus o) {
            updateEntry_result result = new updateEntry_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            updateEntry_result result = new updateEntry_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, updateEntry_args args, org.apache.thrift.async.AsyncMethodCallback<ezbake.warehouse.IngestStatus> resultHandler) throws TException {
        iface.updateEntry(args.update, args.visibility, args.security,resultHandler);
      }
    }

    public static class put<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, put_args, ezbake.warehouse.IngestStatus> {
      public put() {
        super("put");
      }

      public put_args getEmptyArgsInstance() {
        return new put_args();
      }

      public AsyncMethodCallback<ezbake.warehouse.IngestStatus> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<ezbake.warehouse.IngestStatus>() { 
          public void onComplete(ezbake.warehouse.IngestStatus o) {
            put_result result = new put_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            put_result result = new put_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, put_args args, org.apache.thrift.async.AsyncMethodCallback<ezbake.warehouse.IngestStatus> resultHandler) throws TException {
        iface.put(args.putRequest, args.security,resultHandler);
      }
    }

    public static class getEntryDetails<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getEntryDetails_args, ezbake.warehouse.EntryDetail> {
      public getEntryDetails() {
        super("getEntryDetails");
      }

      public getEntryDetails_args getEmptyArgsInstance() {
        return new getEntryDetails_args();
      }

      public AsyncMethodCallback<ezbake.warehouse.EntryDetail> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<ezbake.warehouse.EntryDetail>() { 
          public void onComplete(ezbake.warehouse.EntryDetail o) {
            getEntryDetails_result result = new getEntryDetails_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getEntryDetails_result result = new getEntryDetails_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getEntryDetails_args args, org.apache.thrift.async.AsyncMethodCallback<ezbake.warehouse.EntryDetail> resultHandler) throws TException {
        iface.getEntryDetails(args.uri, args.security,resultHandler);
      }
    }

  }

  public static class insert_args implements org.apache.thrift.TBase<insert_args, insert_args._Fields>, java.io.Serializable, Cloneable, Comparable<insert_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("insert_args");

    private static final org.apache.thrift.protocol.TField DATA_FIELD_DESC = new org.apache.thrift.protocol.TField("data", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField VISIBILITY_FIELD_DESC = new org.apache.thrift.protocol.TField("visibility", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField SECURITY_FIELD_DESC = new org.apache.thrift.protocol.TField("security", org.apache.thrift.protocol.TType.STRUCT, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new insert_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new insert_argsTupleSchemeFactory());
    }

    public ezbake.warehouse.Repository data; // required
    public ezbake.base.thrift.Visibility visibility; // required
    public ezbake.base.thrift.EzSecurityToken security; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      DATA((short)1, "data"),
      VISIBILITY((short)2, "visibility"),
      SECURITY((short)3, "security");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // DATA
            return DATA;
          case 2: // VISIBILITY
            return VISIBILITY;
          case 3: // SECURITY
            return SECURITY;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.DATA, new org.apache.thrift.meta_data.FieldMetaData("data", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ezbake.warehouse.Repository.class)));
      tmpMap.put(_Fields.VISIBILITY, new org.apache.thrift.meta_data.FieldMetaData("visibility", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ezbake.base.thrift.Visibility.class)));
      tmpMap.put(_Fields.SECURITY, new org.apache.thrift.meta_data.FieldMetaData("security", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ezbake.base.thrift.EzSecurityToken.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(insert_args.class, metaDataMap);
    }

    public insert_args() {
    }

    public insert_args(
      ezbake.warehouse.Repository data,
      ezbake.base.thrift.Visibility visibility,
      ezbake.base.thrift.EzSecurityToken security)
    {
      this();
      this.data = data;
      this.visibility = visibility;
      this.security = security;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public insert_args(insert_args other) {
      if (other.isSetData()) {
        this.data = new ezbake.warehouse.Repository(other.data);
      }
      if (other.isSetVisibility()) {
        this.visibility = new ezbake.base.thrift.Visibility(other.visibility);
      }
      if (other.isSetSecurity()) {
        this.security = new ezbake.base.thrift.EzSecurityToken(other.security);
      }
    }

    public insert_args deepCopy() {
      return new insert_args(this);
    }

    @Override
    public void clear() {
      this.data = null;
      this.visibility = null;
      this.security = null;
    }

    public ezbake.warehouse.Repository getData() {
      return this.data;
    }

    public insert_args setData(ezbake.warehouse.Repository data) {
      this.data = data;
      return this;
    }

    public void unsetData() {
      this.data = null;
    }

    /** Returns true if field data is set (has been assigned a value) and false otherwise */
    public boolean isSetData() {
      return this.data != null;
    }

    public void setDataIsSet(boolean value) {
      if (!value) {
        this.data = null;
      }
    }

    public ezbake.base.thrift.Visibility getVisibility() {
      return this.visibility;
    }

    public insert_args setVisibility(ezbake.base.thrift.Visibility visibility) {
      this.visibility = visibility;
      return this;
    }

    public void unsetVisibility() {
      this.visibility = null;
    }

    /** Returns true if field visibility is set (has been assigned a value) and false otherwise */
    public boolean isSetVisibility() {
      return this.visibility != null;
    }

    public void setVisibilityIsSet(boolean value) {
      if (!value) {
        this.visibility = null;
      }
    }

    public ezbake.base.thrift.EzSecurityToken getSecurity() {
      return this.security;
    }

    public insert_args setSecurity(ezbake.base.thrift.EzSecurityToken security) {
      this.security = security;
      return this;
    }

    public void unsetSecurity() {
      this.security = null;
    }

    /** Returns true if field security is set (has been assigned a value) and false otherwise */
    public boolean isSetSecurity() {
      return this.security != null;
    }

    public void setSecurityIsSet(boolean value) {
      if (!value) {
        this.security = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case DATA:
        if (value == null) {
          unsetData();
        } else {
          setData((ezbake.warehouse.Repository)value);
        }
        break;

      case VISIBILITY:
        if (value == null) {
          unsetVisibility();
        } else {
          setVisibility((ezbake.base.thrift.Visibility)value);
        }
        break;

      case SECURITY:
        if (value == null) {
          unsetSecurity();
        } else {
          setSecurity((ezbake.base.thrift.EzSecurityToken)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case DATA:
        return getData();

      case VISIBILITY:
        return getVisibility();

      case SECURITY:
        return getSecurity();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case DATA:
        return isSetData();
      case VISIBILITY:
        return isSetVisibility();
      case SECURITY:
        return isSetSecurity();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof insert_args)
        return this.equals((insert_args)that);
      return false;
    }

    public boolean equals(insert_args that) {
      if (that == null)
        return false;

      boolean this_present_data = true && this.isSetData();
      boolean that_present_data = true && that.isSetData();
      if (this_present_data || that_present_data) {
        if (!(this_present_data && that_present_data))
          return false;
        if (!this.data.equals(that.data))
          return false;
      }

      boolean this_present_visibility = true && this.isSetVisibility();
      boolean that_present_visibility = true && that.isSetVisibility();
      if (this_present_visibility || that_present_visibility) {
        if (!(this_present_visibility && that_present_visibility))
          return false;
        if (!this.visibility.equals(that.visibility))
          return false;
      }

      boolean this_present_security = true && this.isSetSecurity();
      boolean that_present_security = true && that.isSetSecurity();
      if (this_present_security || that_present_security) {
        if (!(this_present_security && that_present_security))
          return false;
        if (!this.security.equals(that.security))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(insert_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetData()).compareTo(other.isSetData());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetData()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.data, other.data);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetVisibility()).compareTo(other.isSetVisibility());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetVisibility()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.visibility, other.visibility);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSecurity()).compareTo(other.isSetSecurity());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSecurity()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.security, other.security);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("insert_args(");
      boolean first = true;

      sb.append("data:");
      if (this.data == null) {
        sb.append("null");
      } else {
        sb.append(this.data);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("visibility:");
      if (this.visibility == null) {
        sb.append("null");
      } else {
        sb.append(this.visibility);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("security:");
      if (this.security == null) {
        sb.append("null");
      } else {
        sb.append(this.security);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (data != null) {
        data.validate();
      }
      if (visibility != null) {
        visibility.validate();
      }
      if (security != null) {
        security.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class insert_argsStandardSchemeFactory implements SchemeFactory {
      public insert_argsStandardScheme getScheme() {
        return new insert_argsStandardScheme();
      }
    }

    private static class insert_argsStandardScheme extends StandardScheme<insert_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, insert_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // DATA
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.data = new ezbake.warehouse.Repository();
                struct.data.read(iprot);
                struct.setDataIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // VISIBILITY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.visibility = new ezbake.base.thrift.Visibility();
                struct.visibility.read(iprot);
                struct.setVisibilityIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // SECURITY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.security = new ezbake.base.thrift.EzSecurityToken();
                struct.security.read(iprot);
                struct.setSecurityIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, insert_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.data != null) {
          oprot.writeFieldBegin(DATA_FIELD_DESC);
          struct.data.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.visibility != null) {
          oprot.writeFieldBegin(VISIBILITY_FIELD_DESC);
          struct.visibility.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.security != null) {
          oprot.writeFieldBegin(SECURITY_FIELD_DESC);
          struct.security.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class insert_argsTupleSchemeFactory implements SchemeFactory {
      public insert_argsTupleScheme getScheme() {
        return new insert_argsTupleScheme();
      }
    }

    private static class insert_argsTupleScheme extends TupleScheme<insert_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, insert_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetData()) {
          optionals.set(0);
        }
        if (struct.isSetVisibility()) {
          optionals.set(1);
        }
        if (struct.isSetSecurity()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetData()) {
          struct.data.write(oprot);
        }
        if (struct.isSetVisibility()) {
          struct.visibility.write(oprot);
        }
        if (struct.isSetSecurity()) {
          struct.security.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, insert_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.data = new ezbake.warehouse.Repository();
          struct.data.read(iprot);
          struct.setDataIsSet(true);
        }
        if (incoming.get(1)) {
          struct.visibility = new ezbake.base.thrift.Visibility();
          struct.visibility.read(iprot);
          struct.setVisibilityIsSet(true);
        }
        if (incoming.get(2)) {
          struct.security = new ezbake.base.thrift.EzSecurityToken();
          struct.security.read(iprot);
          struct.setSecurityIsSet(true);
        }
      }
    }

  }

  public static class insert_result implements org.apache.thrift.TBase<insert_result, insert_result._Fields>, java.io.Serializable, Cloneable, Comparable<insert_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("insert_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new insert_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new insert_resultTupleSchemeFactory());
    }

    public ezbake.warehouse.IngestStatus success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ezbake.warehouse.IngestStatus.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(insert_result.class, metaDataMap);
    }

    public insert_result() {
    }

    public insert_result(
      ezbake.warehouse.IngestStatus success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public insert_result(insert_result other) {
      if (other.isSetSuccess()) {
        this.success = new ezbake.warehouse.IngestStatus(other.success);
      }
    }

    public insert_result deepCopy() {
      return new insert_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public ezbake.warehouse.IngestStatus getSuccess() {
      return this.success;
    }

    public insert_result setSuccess(ezbake.warehouse.IngestStatus success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((ezbake.warehouse.IngestStatus)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof insert_result)
        return this.equals((insert_result)that);
      return false;
    }

    public boolean equals(insert_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(insert_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("insert_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class insert_resultStandardSchemeFactory implements SchemeFactory {
      public insert_resultStandardScheme getScheme() {
        return new insert_resultStandardScheme();
      }
    }

    private static class insert_resultStandardScheme extends StandardScheme<insert_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, insert_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new ezbake.warehouse.IngestStatus();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, insert_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class insert_resultTupleSchemeFactory implements SchemeFactory {
      public insert_resultTupleScheme getScheme() {
        return new insert_resultTupleScheme();
      }
    }

    private static class insert_resultTupleScheme extends TupleScheme<insert_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, insert_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, insert_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new ezbake.warehouse.IngestStatus();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getLatestRaw_args implements org.apache.thrift.TBase<getLatestRaw_args, getLatestRaw_args._Fields>, java.io.Serializable, Cloneable, Comparable<getLatestRaw_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getLatestRaw_args");

    private static final org.apache.thrift.protocol.TField URI_FIELD_DESC = new org.apache.thrift.protocol.TField("uri", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField SECURITY_FIELD_DESC = new org.apache.thrift.protocol.TField("security", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getLatestRaw_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getLatestRaw_argsTupleSchemeFactory());
    }

    public String uri; // required
    public ezbake.base.thrift.EzSecurityToken security; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      URI((short)1, "uri"),
      SECURITY((short)2, "security");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // URI
            return URI;
          case 2: // SECURITY
            return SECURITY;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.URI, new org.apache.thrift.meta_data.FieldMetaData("uri", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.SECURITY, new org.apache.thrift.meta_data.FieldMetaData("security", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ezbake.base.thrift.EzSecurityToken.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getLatestRaw_args.class, metaDataMap);
    }

    public getLatestRaw_args() {
    }

    public getLatestRaw_args(
      String uri,
      ezbake.base.thrift.EzSecurityToken security)
    {
      this();
      this.uri = uri;
      this.security = security;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getLatestRaw_args(getLatestRaw_args other) {
      if (other.isSetUri()) {
        this.uri = other.uri;
      }
      if (other.isSetSecurity()) {
        this.security = new ezbake.base.thrift.EzSecurityToken(other.security);
      }
    }

    public getLatestRaw_args deepCopy() {
      return new getLatestRaw_args(this);
    }

    @Override
    public void clear() {
      this.uri = null;
      this.security = null;
    }

    public String getUri() {
      return this.uri;
    }

    public getLatestRaw_args setUri(String uri) {
      this.uri = uri;
      return this;
    }

    public void unsetUri() {
      this.uri = null;
    }

    /** Returns true if field uri is set (has been assigned a value) and false otherwise */
    public boolean isSetUri() {
      return this.uri != null;
    }

    public void setUriIsSet(boolean value) {
      if (!value) {
        this.uri = null;
      }
    }

    public ezbake.base.thrift.EzSecurityToken getSecurity() {
      return this.security;
    }

    public getLatestRaw_args setSecurity(ezbake.base.thrift.EzSecurityToken security) {
      this.security = security;
      return this;
    }

    public void unsetSecurity() {
      this.security = null;
    }

    /** Returns true if field security is set (has been assigned a value) and false otherwise */
    public boolean isSetSecurity() {
      return this.security != null;
    }

    public void setSecurityIsSet(boolean value) {
      if (!value) {
        this.security = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case URI:
        if (value == null) {
          unsetUri();
        } else {
          setUri((String)value);
        }
        break;

      case SECURITY:
        if (value == null) {
          unsetSecurity();
        } else {
          setSecurity((ezbake.base.thrift.EzSecurityToken)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case URI:
        return getUri();

      case SECURITY:
        return getSecurity();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case URI:
        return isSetUri();
      case SECURITY:
        return isSetSecurity();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getLatestRaw_args)
        return this.equals((getLatestRaw_args)that);
      return false;
    }

    public boolean equals(getLatestRaw_args that) {
      if (that == null)
        return false;

      boolean this_present_uri = true && this.isSetUri();
      boolean that_present_uri = true && that.isSetUri();
      if (this_present_uri || that_present_uri) {
        if (!(this_present_uri && that_present_uri))
          return false;
        if (!this.uri.equals(that.uri))
          return false;
      }

      boolean this_present_security = true && this.isSetSecurity();
      boolean that_present_security = true && that.isSetSecurity();
      if (this_present_security || that_present_security) {
        if (!(this_present_security && that_present_security))
          return false;
        if (!this.security.equals(that.security))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getLatestRaw_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetUri()).compareTo(other.isSetUri());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUri()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.uri, other.uri);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSecurity()).compareTo(other.isSetSecurity());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSecurity()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.security, other.security);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getLatestRaw_args(");
      boolean first = true;

      sb.append("uri:");
      if (this.uri == null) {
        sb.append("null");
      } else {
        sb.append(this.uri);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("security:");
      if (this.security == null) {
        sb.append("null");
      } else {
        sb.append(this.security);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (security != null) {
        security.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getLatestRaw_argsStandardSchemeFactory implements SchemeFactory {
      public getLatestRaw_argsStandardScheme getScheme() {
        return new getLatestRaw_argsStandardScheme();
      }
    }

    private static class getLatestRaw_argsStandardScheme extends StandardScheme<getLatestRaw_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getLatestRaw_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // URI
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.uri = iprot.readString();
                struct.setUriIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // SECURITY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.security = new ezbake.base.thrift.EzSecurityToken();
                struct.security.read(iprot);
                struct.setSecurityIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getLatestRaw_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.uri != null) {
          oprot.writeFieldBegin(URI_FIELD_DESC);
          oprot.writeString(struct.uri);
          oprot.writeFieldEnd();
        }
        if (struct.security != null) {
          oprot.writeFieldBegin(SECURITY_FIELD_DESC);
          struct.security.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getLatestRaw_argsTupleSchemeFactory implements SchemeFactory {
      public getLatestRaw_argsTupleScheme getScheme() {
        return new getLatestRaw_argsTupleScheme();
      }
    }

    private static class getLatestRaw_argsTupleScheme extends TupleScheme<getLatestRaw_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getLatestRaw_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetUri()) {
          optionals.set(0);
        }
        if (struct.isSetSecurity()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetUri()) {
          oprot.writeString(struct.uri);
        }
        if (struct.isSetSecurity()) {
          struct.security.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getLatestRaw_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.uri = iprot.readString();
          struct.setUriIsSet(true);
        }
        if (incoming.get(1)) {
          struct.security = new ezbake.base.thrift.EzSecurityToken();
          struct.security.read(iprot);
          struct.setSecurityIsSet(true);
        }
      }
    }

  }

  public static class getLatestRaw_result implements org.apache.thrift.TBase<getLatestRaw_result, getLatestRaw_result._Fields>, java.io.Serializable, Cloneable, Comparable<getLatestRaw_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getLatestRaw_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getLatestRaw_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getLatestRaw_resultTupleSchemeFactory());
    }

    public ezbake.warehouse.BinaryReplay success; // required
    public ezbake.warehouse.EntryNotInWarehouseException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      E((short)1, "e");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ezbake.warehouse.BinaryReplay.class)));
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getLatestRaw_result.class, metaDataMap);
    }

    public getLatestRaw_result() {
    }

    public getLatestRaw_result(
      ezbake.warehouse.BinaryReplay success,
      ezbake.warehouse.EntryNotInWarehouseException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getLatestRaw_result(getLatestRaw_result other) {
      if (other.isSetSuccess()) {
        this.success = new ezbake.warehouse.BinaryReplay(other.success);
      }
      if (other.isSetE()) {
        this.e = new ezbake.warehouse.EntryNotInWarehouseException(other.e);
      }
    }

    public getLatestRaw_result deepCopy() {
      return new getLatestRaw_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.e = null;
    }

    public ezbake.warehouse.BinaryReplay getSuccess() {
      return this.success;
    }

    public getLatestRaw_result setSuccess(ezbake.warehouse.BinaryReplay success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public ezbake.warehouse.EntryNotInWarehouseException getE() {
      return this.e;
    }

    public getLatestRaw_result setE(ezbake.warehouse.EntryNotInWarehouseException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((ezbake.warehouse.BinaryReplay)value);
        }
        break;

      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((ezbake.warehouse.EntryNotInWarehouseException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case E:
        return getE();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case E:
        return isSetE();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getLatestRaw_result)
        return this.equals((getLatestRaw_result)that);
      return false;
    }

    public boolean equals(getLatestRaw_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getLatestRaw_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetE()).compareTo(other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getLatestRaw_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getLatestRaw_resultStandardSchemeFactory implements SchemeFactory {
      public getLatestRaw_resultStandardScheme getScheme() {
        return new getLatestRaw_resultStandardScheme();
      }
    }

    private static class getLatestRaw_resultStandardScheme extends StandardScheme<getLatestRaw_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getLatestRaw_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new ezbake.warehouse.BinaryReplay();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // E
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e = new ezbake.warehouse.EntryNotInWarehouseException();
                struct.e.read(iprot);
                struct.setEIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getLatestRaw_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.e != null) {
          oprot.writeFieldBegin(E_FIELD_DESC);
          struct.e.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getLatestRaw_resultTupleSchemeFactory implements SchemeFactory {
      public getLatestRaw_resultTupleScheme getScheme() {
        return new getLatestRaw_resultTupleScheme();
      }
    }

    private static class getLatestRaw_resultTupleScheme extends TupleScheme<getLatestRaw_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getLatestRaw_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetE()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetE()) {
          struct.e.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getLatestRaw_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new ezbake.warehouse.BinaryReplay();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.e = new ezbake.warehouse.EntryNotInWarehouseException();
          struct.e.read(iprot);
          struct.setEIsSet(true);
        }
      }
    }

  }

  public static class getLatestParsed_args implements org.apache.thrift.TBase<getLatestParsed_args, getLatestParsed_args._Fields>, java.io.Serializable, Cloneable, Comparable<getLatestParsed_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getLatestParsed_args");

    private static final org.apache.thrift.protocol.TField URI_FIELD_DESC = new org.apache.thrift.protocol.TField("uri", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField SECURITY_FIELD_DESC = new org.apache.thrift.protocol.TField("security", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getLatestParsed_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getLatestParsed_argsTupleSchemeFactory());
    }

    public String uri; // required
    public ezbake.base.thrift.EzSecurityToken security; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      URI((short)1, "uri"),
      SECURITY((short)2, "security");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // URI
            return URI;
          case 2: // SECURITY
            return SECURITY;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.URI, new org.apache.thrift.meta_data.FieldMetaData("uri", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.SECURITY, new org.apache.thrift.meta_data.FieldMetaData("security", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ezbake.base.thrift.EzSecurityToken.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getLatestParsed_args.class, metaDataMap);
    }

    public getLatestParsed_args() {
    }

    public getLatestParsed_args(
      String uri,
      ezbake.base.thrift.EzSecurityToken security)
    {
      this();
      this.uri = uri;
      this.security = security;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getLatestParsed_args(getLatestParsed_args other) {
      if (other.isSetUri()) {
        this.uri = other.uri;
      }
      if (other.isSetSecurity()) {
        this.security = new ezbake.base.thrift.EzSecurityToken(other.security);
      }
    }

    public getLatestParsed_args deepCopy() {
      return new getLatestParsed_args(this);
    }

    @Override
    public void clear() {
      this.uri = null;
      this.security = null;
    }

    public String getUri() {
      return this.uri;
    }

    public getLatestParsed_args setUri(String uri) {
      this.uri = uri;
      return this;
    }

    public void unsetUri() {
      this.uri = null;
    }

    /** Returns true if field uri is set (has been assigned a value) and false otherwise */
    public boolean isSetUri() {
      return this.uri != null;
    }

    public void setUriIsSet(boolean value) {
      if (!value) {
        this.uri = null;
      }
    }

    public ezbake.base.thrift.EzSecurityToken getSecurity() {
      return this.security;
    }

    public getLatestParsed_args setSecurity(ezbake.base.thrift.EzSecurityToken security) {
      this.security = security;
      return this;
    }

    public void unsetSecurity() {
      this.security = null;
    }

    /** Returns true if field security is set (has been assigned a value) and false otherwise */
    public boolean isSetSecurity() {
      return this.security != null;
    }

    public void setSecurityIsSet(boolean value) {
      if (!value) {
        this.security = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case URI:
        if (value == null) {
          unsetUri();
        } else {
          setUri((String)value);
        }
        break;

      case SECURITY:
        if (value == null) {
          unsetSecurity();
        } else {
          setSecurity((ezbake.base.thrift.EzSecurityToken)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case URI:
        return getUri();

      case SECURITY:
        return getSecurity();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case URI:
        return isSetUri();
      case SECURITY:
        return isSetSecurity();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getLatestParsed_args)
        return this.equals((getLatestParsed_args)that);
      return false;
    }

    public boolean equals(getLatestParsed_args that) {
      if (that == null)
        return false;

      boolean this_present_uri = true && this.isSetUri();
      boolean that_present_uri = true && that.isSetUri();
      if (this_present_uri || that_present_uri) {
        if (!(this_present_uri && that_present_uri))
          return false;
        if (!this.uri.equals(that.uri))
          return false;
      }

      boolean this_present_security = true && this.isSetSecurity();
      boolean that_present_security = true && that.isSetSecurity();
      if (this_present_security || that_present_security) {
        if (!(this_present_security && that_present_security))
          return false;
        if (!this.security.equals(that.security))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getLatestParsed_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetUri()).compareTo(other.isSetUri());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUri()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.uri, other.uri);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSecurity()).compareTo(other.isSetSecurity());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSecurity()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.security, other.security);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getLatestParsed_args(");
      boolean first = true;

      sb.append("uri:");
      if (this.uri == null) {
        sb.append("null");
      } else {
        sb.append(this.uri);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("security:");
      if (this.security == null) {
        sb.append("null");
      } else {
        sb.append(this.security);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (security != null) {
        security.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getLatestParsed_argsStandardSchemeFactory implements SchemeFactory {
      public getLatestParsed_argsStandardScheme getScheme() {
        return new getLatestParsed_argsStandardScheme();
      }
    }

    private static class getLatestParsed_argsStandardScheme extends StandardScheme<getLatestParsed_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getLatestParsed_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // URI
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.uri = iprot.readString();
                struct.setUriIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // SECURITY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.security = new ezbake.base.thrift.EzSecurityToken();
                struct.security.read(iprot);
                struct.setSecurityIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getLatestParsed_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.uri != null) {
          oprot.writeFieldBegin(URI_FIELD_DESC);
          oprot.writeString(struct.uri);
          oprot.writeFieldEnd();
        }
        if (struct.security != null) {
          oprot.writeFieldBegin(SECURITY_FIELD_DESC);
          struct.security.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getLatestParsed_argsTupleSchemeFactory implements SchemeFactory {
      public getLatestParsed_argsTupleScheme getScheme() {
        return new getLatestParsed_argsTupleScheme();
      }
    }

    private static class getLatestParsed_argsTupleScheme extends TupleScheme<getLatestParsed_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getLatestParsed_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetUri()) {
          optionals.set(0);
        }
        if (struct.isSetSecurity()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetUri()) {
          oprot.writeString(struct.uri);
        }
        if (struct.isSetSecurity()) {
          struct.security.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getLatestParsed_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.uri = iprot.readString();
          struct.setUriIsSet(true);
        }
        if (incoming.get(1)) {
          struct.security = new ezbake.base.thrift.EzSecurityToken();
          struct.security.read(iprot);
          struct.setSecurityIsSet(true);
        }
      }
    }

  }

  public static class getLatestParsed_result implements org.apache.thrift.TBase<getLatestParsed_result, getLatestParsed_result._Fields>, java.io.Serializable, Cloneable, Comparable<getLatestParsed_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getLatestParsed_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getLatestParsed_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getLatestParsed_resultTupleSchemeFactory());
    }

    public ezbake.warehouse.BinaryReplay success; // required
    public ezbake.warehouse.EntryNotInWarehouseException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      E((short)1, "e");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ezbake.warehouse.BinaryReplay.class)));
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getLatestParsed_result.class, metaDataMap);
    }

    public getLatestParsed_result() {
    }

    public getLatestParsed_result(
      ezbake.warehouse.BinaryReplay success,
      ezbake.warehouse.EntryNotInWarehouseException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getLatestParsed_result(getLatestParsed_result other) {
      if (other.isSetSuccess()) {
        this.success = new ezbake.warehouse.BinaryReplay(other.success);
      }
      if (other.isSetE()) {
        this.e = new ezbake.warehouse.EntryNotInWarehouseException(other.e);
      }
    }

    public getLatestParsed_result deepCopy() {
      return new getLatestParsed_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.e = null;
    }

    public ezbake.warehouse.BinaryReplay getSuccess() {
      return this.success;
    }

    public getLatestParsed_result setSuccess(ezbake.warehouse.BinaryReplay success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public ezbake.warehouse.EntryNotInWarehouseException getE() {
      return this.e;
    }

    public getLatestParsed_result setE(ezbake.warehouse.EntryNotInWarehouseException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((ezbake.warehouse.BinaryReplay)value);
        }
        break;

      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((ezbake.warehouse.EntryNotInWarehouseException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case E:
        return getE();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case E:
        return isSetE();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getLatestParsed_result)
        return this.equals((getLatestParsed_result)that);
      return false;
    }

    public boolean equals(getLatestParsed_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getLatestParsed_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetE()).compareTo(other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getLatestParsed_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getLatestParsed_resultStandardSchemeFactory implements SchemeFactory {
      public getLatestParsed_resultStandardScheme getScheme() {
        return new getLatestParsed_resultStandardScheme();
      }
    }

    private static class getLatestParsed_resultStandardScheme extends StandardScheme<getLatestParsed_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getLatestParsed_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new ezbake.warehouse.BinaryReplay();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // E
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e = new ezbake.warehouse.EntryNotInWarehouseException();
                struct.e.read(iprot);
                struct.setEIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getLatestParsed_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.e != null) {
          oprot.writeFieldBegin(E_FIELD_DESC);
          struct.e.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getLatestParsed_resultTupleSchemeFactory implements SchemeFactory {
      public getLatestParsed_resultTupleScheme getScheme() {
        return new getLatestParsed_resultTupleScheme();
      }
    }

    private static class getLatestParsed_resultTupleScheme extends TupleScheme<getLatestParsed_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getLatestParsed_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetE()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetE()) {
          struct.e.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getLatestParsed_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new ezbake.warehouse.BinaryReplay();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.e = new ezbake.warehouse.EntryNotInWarehouseException();
          struct.e.read(iprot);
          struct.setEIsSet(true);
        }
      }
    }

  }

  public static class getRaw_args implements org.apache.thrift.TBase<getRaw_args, getRaw_args._Fields>, java.io.Serializable, Cloneable, Comparable<getRaw_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getRaw_args");

    private static final org.apache.thrift.protocol.TField URI_FIELD_DESC = new org.apache.thrift.protocol.TField("uri", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField VERSION_FIELD_DESC = new org.apache.thrift.protocol.TField("version", org.apache.thrift.protocol.TType.I64, (short)2);
    private static final org.apache.thrift.protocol.TField SECURITY_FIELD_DESC = new org.apache.thrift.protocol.TField("security", org.apache.thrift.protocol.TType.STRUCT, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getRaw_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getRaw_argsTupleSchemeFactory());
    }

    public String uri; // required
    public long version; // required
    public ezbake.base.thrift.EzSecurityToken security; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      URI((short)1, "uri"),
      VERSION((short)2, "version"),
      SECURITY((short)3, "security");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // URI
            return URI;
          case 2: // VERSION
            return VERSION;
          case 3: // SECURITY
            return SECURITY;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __VERSION_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.URI, new org.apache.thrift.meta_data.FieldMetaData("uri", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.VERSION, new org.apache.thrift.meta_data.FieldMetaData("version", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.SECURITY, new org.apache.thrift.meta_data.FieldMetaData("security", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ezbake.base.thrift.EzSecurityToken.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getRaw_args.class, metaDataMap);
    }

    public getRaw_args() {
    }

    public getRaw_args(
      String uri,
      long version,
      ezbake.base.thrift.EzSecurityToken security)
    {
      this();
      this.uri = uri;
      this.version = version;
      setVersionIsSet(true);
      this.security = security;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getRaw_args(getRaw_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetUri()) {
        this.uri = other.uri;
      }
      this.version = other.version;
      if (other.isSetSecurity()) {
        this.security = new ezbake.base.thrift.EzSecurityToken(other.security);
      }
    }

    public getRaw_args deepCopy() {
      return new getRaw_args(this);
    }

    @Override
    public void clear() {
      this.uri = null;
      setVersionIsSet(false);
      this.version = 0;
      this.security = null;
    }

    public String getUri() {
      return this.uri;
    }

    public getRaw_args setUri(String uri) {
      this.uri = uri;
      return this;
    }

    public void unsetUri() {
      this.uri = null;
    }

    /** Returns true if field uri is set (has been assigned a value) and false otherwise */
    public boolean isSetUri() {
      return this.uri != null;
    }

    public void setUriIsSet(boolean value) {
      if (!value) {
        this.uri = null;
      }
    }

    public long getVersion() {
      return this.version;
    }

    public getRaw_args setVersion(long version) {
      this.version = version;
      setVersionIsSet(true);
      return this;
    }

    public void unsetVersion() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __VERSION_ISSET_ID);
    }

    /** Returns true if field version is set (has been assigned a value) and false otherwise */
    public boolean isSetVersion() {
      return EncodingUtils.testBit(__isset_bitfield, __VERSION_ISSET_ID);
    }

    public void setVersionIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __VERSION_ISSET_ID, value);
    }

    public ezbake.base.thrift.EzSecurityToken getSecurity() {
      return this.security;
    }

    public getRaw_args setSecurity(ezbake.base.thrift.EzSecurityToken security) {
      this.security = security;
      return this;
    }

    public void unsetSecurity() {
      this.security = null;
    }

    /** Returns true if field security is set (has been assigned a value) and false otherwise */
    public boolean isSetSecurity() {
      return this.security != null;
    }

    public void setSecurityIsSet(boolean value) {
      if (!value) {
        this.security = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case URI:
        if (value == null) {
          unsetUri();
        } else {
          setUri((String)value);
        }
        break;

      case VERSION:
        if (value == null) {
          unsetVersion();
        } else {
          setVersion((Long)value);
        }
        break;

      case SECURITY:
        if (value == null) {
          unsetSecurity();
        } else {
          setSecurity((ezbake.base.thrift.EzSecurityToken)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case URI:
        return getUri();

      case VERSION:
        return Long.valueOf(getVersion());

      case SECURITY:
        return getSecurity();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case URI:
        return isSetUri();
      case VERSION:
        return isSetVersion();
      case SECURITY:
        return isSetSecurity();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getRaw_args)
        return this.equals((getRaw_args)that);
      return false;
    }

    public boolean equals(getRaw_args that) {
      if (that == null)
        return false;

      boolean this_present_uri = true && this.isSetUri();
      boolean that_present_uri = true && that.isSetUri();
      if (this_present_uri || that_present_uri) {
        if (!(this_present_uri && that_present_uri))
          return false;
        if (!this.uri.equals(that.uri))
          return false;
      }

      boolean this_present_version = true;
      boolean that_present_version = true;
      if (this_present_version || that_present_version) {
        if (!(this_present_version && that_present_version))
          return false;
        if (this.version != that.version)
          return false;
      }

      boolean this_present_security = true && this.isSetSecurity();
      boolean that_present_security = true && that.isSetSecurity();
      if (this_present_security || that_present_security) {
        if (!(this_present_security && that_present_security))
          return false;
        if (!this.security.equals(that.security))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getRaw_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetUri()).compareTo(other.isSetUri());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUri()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.uri, other.uri);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetVersion()).compareTo(other.isSetVersion());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetVersion()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.version, other.version);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSecurity()).compareTo(other.isSetSecurity());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSecurity()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.security, other.security);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getRaw_args(");
      boolean first = true;

      sb.append("uri:");
      if (this.uri == null) {
        sb.append("null");
      } else {
        sb.append(this.uri);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("version:");
      sb.append(this.version);
      first = false;
      if (!first) sb.append(", ");
      sb.append("security:");
      if (this.security == null) {
        sb.append("null");
      } else {
        sb.append(this.security);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (security != null) {
        security.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getRaw_argsStandardSchemeFactory implements SchemeFactory {
      public getRaw_argsStandardScheme getScheme() {
        return new getRaw_argsStandardScheme();
      }
    }

    private static class getRaw_argsStandardScheme extends StandardScheme<getRaw_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getRaw_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // URI
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.uri = iprot.readString();
                struct.setUriIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // VERSION
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.version = iprot.readI64();
                struct.setVersionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // SECURITY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.security = new ezbake.base.thrift.EzSecurityToken();
                struct.security.read(iprot);
                struct.setSecurityIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getRaw_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.uri != null) {
          oprot.writeFieldBegin(URI_FIELD_DESC);
          oprot.writeString(struct.uri);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(VERSION_FIELD_DESC);
        oprot.writeI64(struct.version);
        oprot.writeFieldEnd();
        if (struct.security != null) {
          oprot.writeFieldBegin(SECURITY_FIELD_DESC);
          struct.security.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getRaw_argsTupleSchemeFactory implements SchemeFactory {
      public getRaw_argsTupleScheme getScheme() {
        return new getRaw_argsTupleScheme();
      }
    }

    private static class getRaw_argsTupleScheme extends TupleScheme<getRaw_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getRaw_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetUri()) {
          optionals.set(0);
        }
        if (struct.isSetVersion()) {
          optionals.set(1);
        }
        if (struct.isSetSecurity()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetUri()) {
          oprot.writeString(struct.uri);
        }
        if (struct.isSetVersion()) {
          oprot.writeI64(struct.version);
        }
        if (struct.isSetSecurity()) {
          struct.security.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getRaw_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.uri = iprot.readString();
          struct.setUriIsSet(true);
        }
        if (incoming.get(1)) {
          struct.version = iprot.readI64();
          struct.setVersionIsSet(true);
        }
        if (incoming.get(2)) {
          struct.security = new ezbake.base.thrift.EzSecurityToken();
          struct.security.read(iprot);
          struct.setSecurityIsSet(true);
        }
      }
    }

  }

  public static class getRaw_result implements org.apache.thrift.TBase<getRaw_result, getRaw_result._Fields>, java.io.Serializable, Cloneable, Comparable<getRaw_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getRaw_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getRaw_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getRaw_resultTupleSchemeFactory());
    }

    public ezbake.warehouse.BinaryReplay success; // required
    public ezbake.warehouse.EntryNotInWarehouseException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      E((short)1, "e");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ezbake.warehouse.BinaryReplay.class)));
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getRaw_result.class, metaDataMap);
    }

    public getRaw_result() {
    }

    public getRaw_result(
      ezbake.warehouse.BinaryReplay success,
      ezbake.warehouse.EntryNotInWarehouseException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getRaw_result(getRaw_result other) {
      if (other.isSetSuccess()) {
        this.success = new ezbake.warehouse.BinaryReplay(other.success);
      }
      if (other.isSetE()) {
        this.e = new ezbake.warehouse.EntryNotInWarehouseException(other.e);
      }
    }

    public getRaw_result deepCopy() {
      return new getRaw_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.e = null;
    }

    public ezbake.warehouse.BinaryReplay getSuccess() {
      return this.success;
    }

    public getRaw_result setSuccess(ezbake.warehouse.BinaryReplay success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public ezbake.warehouse.EntryNotInWarehouseException getE() {
      return this.e;
    }

    public getRaw_result setE(ezbake.warehouse.EntryNotInWarehouseException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((ezbake.warehouse.BinaryReplay)value);
        }
        break;

      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((ezbake.warehouse.EntryNotInWarehouseException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case E:
        return getE();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case E:
        return isSetE();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getRaw_result)
        return this.equals((getRaw_result)that);
      return false;
    }

    public boolean equals(getRaw_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getRaw_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetE()).compareTo(other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getRaw_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getRaw_resultStandardSchemeFactory implements SchemeFactory {
      public getRaw_resultStandardScheme getScheme() {
        return new getRaw_resultStandardScheme();
      }
    }

    private static class getRaw_resultStandardScheme extends StandardScheme<getRaw_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getRaw_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new ezbake.warehouse.BinaryReplay();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // E
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e = new ezbake.warehouse.EntryNotInWarehouseException();
                struct.e.read(iprot);
                struct.setEIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getRaw_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.e != null) {
          oprot.writeFieldBegin(E_FIELD_DESC);
          struct.e.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getRaw_resultTupleSchemeFactory implements SchemeFactory {
      public getRaw_resultTupleScheme getScheme() {
        return new getRaw_resultTupleScheme();
      }
    }

    private static class getRaw_resultTupleScheme extends TupleScheme<getRaw_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getRaw_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetE()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetE()) {
          struct.e.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getRaw_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new ezbake.warehouse.BinaryReplay();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.e = new ezbake.warehouse.EntryNotInWarehouseException();
          struct.e.read(iprot);
          struct.setEIsSet(true);
        }
      }
    }

  }

  public static class getParsed_args implements org.apache.thrift.TBase<getParsed_args, getParsed_args._Fields>, java.io.Serializable, Cloneable, Comparable<getParsed_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getParsed_args");

    private static final org.apache.thrift.protocol.TField URI_FIELD_DESC = new org.apache.thrift.protocol.TField("uri", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField VERSION_FIELD_DESC = new org.apache.thrift.protocol.TField("version", org.apache.thrift.protocol.TType.I64, (short)2);
    private static final org.apache.thrift.protocol.TField SECURITY_FIELD_DESC = new org.apache.thrift.protocol.TField("security", org.apache.thrift.protocol.TType.STRUCT, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getParsed_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getParsed_argsTupleSchemeFactory());
    }

    public String uri; // required
    public long version; // required
    public ezbake.base.thrift.EzSecurityToken security; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      URI((short)1, "uri"),
      VERSION((short)2, "version"),
      SECURITY((short)3, "security");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // URI
            return URI;
          case 2: // VERSION
            return VERSION;
          case 3: // SECURITY
            return SECURITY;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __VERSION_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.URI, new org.apache.thrift.meta_data.FieldMetaData("uri", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.VERSION, new org.apache.thrift.meta_data.FieldMetaData("version", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.SECURITY, new org.apache.thrift.meta_data.FieldMetaData("security", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ezbake.base.thrift.EzSecurityToken.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getParsed_args.class, metaDataMap);
    }

    public getParsed_args() {
    }

    public getParsed_args(
      String uri,
      long version,
      ezbake.base.thrift.EzSecurityToken security)
    {
      this();
      this.uri = uri;
      this.version = version;
      setVersionIsSet(true);
      this.security = security;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getParsed_args(getParsed_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetUri()) {
        this.uri = other.uri;
      }
      this.version = other.version;
      if (other.isSetSecurity()) {
        this.security = new ezbake.base.thrift.EzSecurityToken(other.security);
      }
    }

    public getParsed_args deepCopy() {
      return new getParsed_args(this);
    }

    @Override
    public void clear() {
      this.uri = null;
      setVersionIsSet(false);
      this.version = 0;
      this.security = null;
    }

    public String getUri() {
      return this.uri;
    }

    public getParsed_args setUri(String uri) {
      this.uri = uri;
      return this;
    }

    public void unsetUri() {
      this.uri = null;
    }

    /** Returns true if field uri is set (has been assigned a value) and false otherwise */
    public boolean isSetUri() {
      return this.uri != null;
    }

    public void setUriIsSet(boolean value) {
      if (!value) {
        this.uri = null;
      }
    }

    public long getVersion() {
      return this.version;
    }

    public getParsed_args setVersion(long version) {
      this.version = version;
      setVersionIsSet(true);
      return this;
    }

    public void unsetVersion() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __VERSION_ISSET_ID);
    }

    /** Returns true if field version is set (has been assigned a value) and false otherwise */
    public boolean isSetVersion() {
      return EncodingUtils.testBit(__isset_bitfield, __VERSION_ISSET_ID);
    }

    public void setVersionIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __VERSION_ISSET_ID, value);
    }

    public ezbake.base.thrift.EzSecurityToken getSecurity() {
      return this.security;
    }

    public getParsed_args setSecurity(ezbake.base.thrift.EzSecurityToken security) {
      this.security = security;
      return this;
    }

    public void unsetSecurity() {
      this.security = null;
    }

    /** Returns true if field security is set (has been assigned a value) and false otherwise */
    public boolean isSetSecurity() {
      return this.security != null;
    }

    public void setSecurityIsSet(boolean value) {
      if (!value) {
        this.security = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case URI:
        if (value == null) {
          unsetUri();
        } else {
          setUri((String)value);
        }
        break;

      case VERSION:
        if (value == null) {
          unsetVersion();
        } else {
          setVersion((Long)value);
        }
        break;

      case SECURITY:
        if (value == null) {
          unsetSecurity();
        } else {
          setSecurity((ezbake.base.thrift.EzSecurityToken)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case URI:
        return getUri();

      case VERSION:
        return Long.valueOf(getVersion());

      case SECURITY:
        return getSecurity();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case URI:
        return isSetUri();
      case VERSION:
        return isSetVersion();
      case SECURITY:
        return isSetSecurity();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getParsed_args)
        return this.equals((getParsed_args)that);
      return false;
    }

    public boolean equals(getParsed_args that) {
      if (that == null)
        return false;

      boolean this_present_uri = true && this.isSetUri();
      boolean that_present_uri = true && that.isSetUri();
      if (this_present_uri || that_present_uri) {
        if (!(this_present_uri && that_present_uri))
          return false;
        if (!this.uri.equals(that.uri))
          return false;
      }

      boolean this_present_version = true;
      boolean that_present_version = true;
      if (this_present_version || that_present_version) {
        if (!(this_present_version && that_present_version))
          return false;
        if (this.version != that.version)
          return false;
      }

      boolean this_present_security = true && this.isSetSecurity();
      boolean that_present_security = true && that.isSetSecurity();
      if (this_present_security || that_present_security) {
        if (!(this_present_security && that_present_security))
          return false;
        if (!this.security.equals(that.security))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getParsed_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetUri()).compareTo(other.isSetUri());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUri()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.uri, other.uri);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetVersion()).compareTo(other.isSetVersion());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetVersion()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.version, other.version);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSecurity()).compareTo(other.isSetSecurity());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSecurity()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.security, other.security);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getParsed_args(");
      boolean first = true;

      sb.append("uri:");
      if (this.uri == null) {
        sb.append("null");
      } else {
        sb.append(this.uri);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("version:");
      sb.append(this.version);
      first = false;
      if (!first) sb.append(", ");
      sb.append("security:");
      if (this.security == null) {
        sb.append("null");
      } else {
        sb.append(this.security);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (security != null) {
        security.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getParsed_argsStandardSchemeFactory implements SchemeFactory {
      public getParsed_argsStandardScheme getScheme() {
        return new getParsed_argsStandardScheme();
      }
    }

    private static class getParsed_argsStandardScheme extends StandardScheme<getParsed_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getParsed_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // URI
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.uri = iprot.readString();
                struct.setUriIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // VERSION
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.version = iprot.readI64();
                struct.setVersionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // SECURITY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.security = new ezbake.base.thrift.EzSecurityToken();
                struct.security.read(iprot);
                struct.setSecurityIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getParsed_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.uri != null) {
          oprot.writeFieldBegin(URI_FIELD_DESC);
          oprot.writeString(struct.uri);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(VERSION_FIELD_DESC);
        oprot.writeI64(struct.version);
        oprot.writeFieldEnd();
        if (struct.security != null) {
          oprot.writeFieldBegin(SECURITY_FIELD_DESC);
          struct.security.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getParsed_argsTupleSchemeFactory implements SchemeFactory {
      public getParsed_argsTupleScheme getScheme() {
        return new getParsed_argsTupleScheme();
      }
    }

    private static class getParsed_argsTupleScheme extends TupleScheme<getParsed_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getParsed_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetUri()) {
          optionals.set(0);
        }
        if (struct.isSetVersion()) {
          optionals.set(1);
        }
        if (struct.isSetSecurity()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetUri()) {
          oprot.writeString(struct.uri);
        }
        if (struct.isSetVersion()) {
          oprot.writeI64(struct.version);
        }
        if (struct.isSetSecurity()) {
          struct.security.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getParsed_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.uri = iprot.readString();
          struct.setUriIsSet(true);
        }
        if (incoming.get(1)) {
          struct.version = iprot.readI64();
          struct.setVersionIsSet(true);
        }
        if (incoming.get(2)) {
          struct.security = new ezbake.base.thrift.EzSecurityToken();
          struct.security.read(iprot);
          struct.setSecurityIsSet(true);
        }
      }
    }

  }

  public static class getParsed_result implements org.apache.thrift.TBase<getParsed_result, getParsed_result._Fields>, java.io.Serializable, Cloneable, Comparable<getParsed_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getParsed_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getParsed_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getParsed_resultTupleSchemeFactory());
    }

    public ezbake.warehouse.BinaryReplay success; // required
    public ezbake.warehouse.EntryNotInWarehouseException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      E((short)1, "e");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ezbake.warehouse.BinaryReplay.class)));
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getParsed_result.class, metaDataMap);
    }

    public getParsed_result() {
    }

    public getParsed_result(
      ezbake.warehouse.BinaryReplay success,
      ezbake.warehouse.EntryNotInWarehouseException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getParsed_result(getParsed_result other) {
      if (other.isSetSuccess()) {
        this.success = new ezbake.warehouse.BinaryReplay(other.success);
      }
      if (other.isSetE()) {
        this.e = new ezbake.warehouse.EntryNotInWarehouseException(other.e);
      }
    }

    public getParsed_result deepCopy() {
      return new getParsed_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.e = null;
    }

    public ezbake.warehouse.BinaryReplay getSuccess() {
      return this.success;
    }

    public getParsed_result setSuccess(ezbake.warehouse.BinaryReplay success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public ezbake.warehouse.EntryNotInWarehouseException getE() {
      return this.e;
    }

    public getParsed_result setE(ezbake.warehouse.EntryNotInWarehouseException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((ezbake.warehouse.BinaryReplay)value);
        }
        break;

      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((ezbake.warehouse.EntryNotInWarehouseException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case E:
        return getE();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case E:
        return isSetE();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getParsed_result)
        return this.equals((getParsed_result)that);
      return false;
    }

    public boolean equals(getParsed_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getParsed_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetE()).compareTo(other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getParsed_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getParsed_resultStandardSchemeFactory implements SchemeFactory {
      public getParsed_resultStandardScheme getScheme() {
        return new getParsed_resultStandardScheme();
      }
    }

    private static class getParsed_resultStandardScheme extends StandardScheme<getParsed_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getParsed_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new ezbake.warehouse.BinaryReplay();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // E
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e = new ezbake.warehouse.EntryNotInWarehouseException();
                struct.e.read(iprot);
                struct.setEIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getParsed_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.e != null) {
          oprot.writeFieldBegin(E_FIELD_DESC);
          struct.e.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getParsed_resultTupleSchemeFactory implements SchemeFactory {
      public getParsed_resultTupleScheme getScheme() {
        return new getParsed_resultTupleScheme();
      }
    }

    private static class getParsed_resultTupleScheme extends TupleScheme<getParsed_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getParsed_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetE()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetE()) {
          struct.e.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getParsed_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new ezbake.warehouse.BinaryReplay();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.e = new ezbake.warehouse.EntryNotInWarehouseException();
          struct.e.read(iprot);
          struct.setEIsSet(true);
        }
      }
    }

  }

  public static class get_args implements org.apache.thrift.TBase<get_args, get_args._Fields>, java.io.Serializable, Cloneable, Comparable<get_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("get_args");

    private static final org.apache.thrift.protocol.TField GET_REQUEST_FIELD_DESC = new org.apache.thrift.protocol.TField("getRequest", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField SECURITY_FIELD_DESC = new org.apache.thrift.protocol.TField("security", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new get_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new get_argsTupleSchemeFactory());
    }

    public ezbake.warehouse.GetRequest getRequest; // required
    public ezbake.base.thrift.EzSecurityToken security; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      GET_REQUEST((short)1, "getRequest"),
      SECURITY((short)2, "security");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // GET_REQUEST
            return GET_REQUEST;
          case 2: // SECURITY
            return SECURITY;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.GET_REQUEST, new org.apache.thrift.meta_data.FieldMetaData("getRequest", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ezbake.warehouse.GetRequest.class)));
      tmpMap.put(_Fields.SECURITY, new org.apache.thrift.meta_data.FieldMetaData("security", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ezbake.base.thrift.EzSecurityToken.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(get_args.class, metaDataMap);
    }

    public get_args() {
    }

    public get_args(
      ezbake.warehouse.GetRequest getRequest,
      ezbake.base.thrift.EzSecurityToken security)
    {
      this();
      this.getRequest = getRequest;
      this.security = security;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public get_args(get_args other) {
      if (other.isSetGetRequest()) {
        this.getRequest = new ezbake.warehouse.GetRequest(other.getRequest);
      }
      if (other.isSetSecurity()) {
        this.security = new ezbake.base.thrift.EzSecurityToken(other.security);
      }
    }

    public get_args deepCopy() {
      return new get_args(this);
    }

    @Override
    public void clear() {
      this.getRequest = null;
      this.security = null;
    }

    public ezbake.warehouse.GetRequest getGetRequest() {
      return this.getRequest;
    }

    public get_args setGetRequest(ezbake.warehouse.GetRequest getRequest) {
      this.getRequest = getRequest;
      return this;
    }

    public void unsetGetRequest() {
      this.getRequest = null;
    }

    /** Returns true if field getRequest is set (has been assigned a value) and false otherwise */
    public boolean isSetGetRequest() {
      return this.getRequest != null;
    }

    public void setGetRequestIsSet(boolean value) {
      if (!value) {
        this.getRequest = null;
      }
    }

    public ezbake.base.thrift.EzSecurityToken getSecurity() {
      return this.security;
    }

    public get_args setSecurity(ezbake.base.thrift.EzSecurityToken security) {
      this.security = security;
      return this;
    }

    public void unsetSecurity() {
      this.security = null;
    }

    /** Returns true if field security is set (has been assigned a value) and false otherwise */
    public boolean isSetSecurity() {
      return this.security != null;
    }

    public void setSecurityIsSet(boolean value) {
      if (!value) {
        this.security = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case GET_REQUEST:
        if (value == null) {
          unsetGetRequest();
        } else {
          setGetRequest((ezbake.warehouse.GetRequest)value);
        }
        break;

      case SECURITY:
        if (value == null) {
          unsetSecurity();
        } else {
          setSecurity((ezbake.base.thrift.EzSecurityToken)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case GET_REQUEST:
        return getGetRequest();

      case SECURITY:
        return getSecurity();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case GET_REQUEST:
        return isSetGetRequest();
      case SECURITY:
        return isSetSecurity();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof get_args)
        return this.equals((get_args)that);
      return false;
    }

    public boolean equals(get_args that) {
      if (that == null)
        return false;

      boolean this_present_getRequest = true && this.isSetGetRequest();
      boolean that_present_getRequest = true && that.isSetGetRequest();
      if (this_present_getRequest || that_present_getRequest) {
        if (!(this_present_getRequest && that_present_getRequest))
          return false;
        if (!this.getRequest.equals(that.getRequest))
          return false;
      }

      boolean this_present_security = true && this.isSetSecurity();
      boolean that_present_security = true && that.isSetSecurity();
      if (this_present_security || that_present_security) {
        if (!(this_present_security && that_present_security))
          return false;
        if (!this.security.equals(that.security))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(get_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetGetRequest()).compareTo(other.isSetGetRequest());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetGetRequest()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.getRequest, other.getRequest);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSecurity()).compareTo(other.isSetSecurity());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSecurity()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.security, other.security);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("get_args(");
      boolean first = true;

      sb.append("getRequest:");
      if (this.getRequest == null) {
        sb.append("null");
      } else {
        sb.append(this.getRequest);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("security:");
      if (this.security == null) {
        sb.append("null");
      } else {
        sb.append(this.security);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (getRequest != null) {
        getRequest.validate();
      }
      if (security != null) {
        security.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class get_argsStandardSchemeFactory implements SchemeFactory {
      public get_argsStandardScheme getScheme() {
        return new get_argsStandardScheme();
      }
    }

    private static class get_argsStandardScheme extends StandardScheme<get_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, get_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // GET_REQUEST
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.getRequest = new ezbake.warehouse.GetRequest();
                struct.getRequest.read(iprot);
                struct.setGetRequestIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // SECURITY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.security = new ezbake.base.thrift.EzSecurityToken();
                struct.security.read(iprot);
                struct.setSecurityIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, get_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.getRequest != null) {
          oprot.writeFieldBegin(GET_REQUEST_FIELD_DESC);
          struct.getRequest.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.security != null) {
          oprot.writeFieldBegin(SECURITY_FIELD_DESC);
          struct.security.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class get_argsTupleSchemeFactory implements SchemeFactory {
      public get_argsTupleScheme getScheme() {
        return new get_argsTupleScheme();
      }
    }

    private static class get_argsTupleScheme extends TupleScheme<get_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, get_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetGetRequest()) {
          optionals.set(0);
        }
        if (struct.isSetSecurity()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetGetRequest()) {
          struct.getRequest.write(oprot);
        }
        if (struct.isSetSecurity()) {
          struct.security.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, get_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.getRequest = new ezbake.warehouse.GetRequest();
          struct.getRequest.read(iprot);
          struct.setGetRequestIsSet(true);
        }
        if (incoming.get(1)) {
          struct.security = new ezbake.base.thrift.EzSecurityToken();
          struct.security.read(iprot);
          struct.setSecurityIsSet(true);
        }
      }
    }

  }

  public static class get_result implements org.apache.thrift.TBase<get_result, get_result._Fields>, java.io.Serializable, Cloneable, Comparable<get_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("get_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new get_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new get_resultTupleSchemeFactory());
    }

    public List<ezbake.warehouse.BinaryReplay> success; // required
    public ezbake.warehouse.MaxGetRequestSizeExceededException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      E((short)1, "e");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ezbake.warehouse.BinaryReplay.class))));
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(get_result.class, metaDataMap);
    }

    public get_result() {
    }

    public get_result(
      List<ezbake.warehouse.BinaryReplay> success,
      ezbake.warehouse.MaxGetRequestSizeExceededException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public get_result(get_result other) {
      if (other.isSetSuccess()) {
        List<ezbake.warehouse.BinaryReplay> __this__success = new ArrayList<ezbake.warehouse.BinaryReplay>(other.success.size());
        for (ezbake.warehouse.BinaryReplay other_element : other.success) {
          __this__success.add(new ezbake.warehouse.BinaryReplay(other_element));
        }
        this.success = __this__success;
      }
      if (other.isSetE()) {
        this.e = new ezbake.warehouse.MaxGetRequestSizeExceededException(other.e);
      }
    }

    public get_result deepCopy() {
      return new get_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.e = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<ezbake.warehouse.BinaryReplay> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(ezbake.warehouse.BinaryReplay elem) {
      if (this.success == null) {
        this.success = new ArrayList<ezbake.warehouse.BinaryReplay>();
      }
      this.success.add(elem);
    }

    public List<ezbake.warehouse.BinaryReplay> getSuccess() {
      return this.success;
    }

    public get_result setSuccess(List<ezbake.warehouse.BinaryReplay> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public ezbake.warehouse.MaxGetRequestSizeExceededException getE() {
      return this.e;
    }

    public get_result setE(ezbake.warehouse.MaxGetRequestSizeExceededException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<ezbake.warehouse.BinaryReplay>)value);
        }
        break;

      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((ezbake.warehouse.MaxGetRequestSizeExceededException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case E:
        return getE();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case E:
        return isSetE();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof get_result)
        return this.equals((get_result)that);
      return false;
    }

    public boolean equals(get_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(get_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetE()).compareTo(other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("get_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class get_resultStandardSchemeFactory implements SchemeFactory {
      public get_resultStandardScheme getScheme() {
        return new get_resultStandardScheme();
      }
    }

    private static class get_resultStandardScheme extends StandardScheme<get_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, get_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                  struct.success = new ArrayList<ezbake.warehouse.BinaryReplay>(_list0.size);
                  for (int _i1 = 0; _i1 < _list0.size; ++_i1)
                  {
                    ezbake.warehouse.BinaryReplay _elem2;
                    _elem2 = new ezbake.warehouse.BinaryReplay();
                    _elem2.read(iprot);
                    struct.success.add(_elem2);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // E
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e = new ezbake.warehouse.MaxGetRequestSizeExceededException();
                struct.e.read(iprot);
                struct.setEIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, get_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (ezbake.warehouse.BinaryReplay _iter3 : struct.success)
            {
              _iter3.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.e != null) {
          oprot.writeFieldBegin(E_FIELD_DESC);
          struct.e.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class get_resultTupleSchemeFactory implements SchemeFactory {
      public get_resultTupleScheme getScheme() {
        return new get_resultTupleScheme();
      }
    }

    private static class get_resultTupleScheme extends TupleScheme<get_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, get_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetE()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (ezbake.warehouse.BinaryReplay _iter4 : struct.success)
            {
              _iter4.write(oprot);
            }
          }
        }
        if (struct.isSetE()) {
          struct.e.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, get_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list5 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<ezbake.warehouse.BinaryReplay>(_list5.size);
            for (int _i6 = 0; _i6 < _list5.size; ++_i6)
            {
              ezbake.warehouse.BinaryReplay _elem7;
              _elem7 = new ezbake.warehouse.BinaryReplay();
              _elem7.read(iprot);
              struct.success.add(_elem7);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.e = new ezbake.warehouse.MaxGetRequestSizeExceededException();
          struct.e.read(iprot);
          struct.setEIsSet(true);
        }
      }
    }

  }

  public static class replay_args implements org.apache.thrift.TBase<replay_args, replay_args._Fields>, java.io.Serializable, Cloneable, Comparable<replay_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("replay_args");

    private static final org.apache.thrift.protocol.TField URI_PREFIX_FIELD_DESC = new org.apache.thrift.protocol.TField("uriPrefix", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField REPLAY_ONLY_LATEST_FIELD_DESC = new org.apache.thrift.protocol.TField("replayOnlyLatest", org.apache.thrift.protocol.TType.BOOL, (short)2);
    private static final org.apache.thrift.protocol.TField START_FIELD_DESC = new org.apache.thrift.protocol.TField("start", org.apache.thrift.protocol.TType.STRUCT, (short)3);
    private static final org.apache.thrift.protocol.TField FINISH_FIELD_DESC = new org.apache.thrift.protocol.TField("finish", org.apache.thrift.protocol.TType.STRUCT, (short)4);
    private static final org.apache.thrift.protocol.TField TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("type", org.apache.thrift.protocol.TType.I32, (short)5);
    private static final org.apache.thrift.protocol.TField SECURITY_FIELD_DESC = new org.apache.thrift.protocol.TField("security", org.apache.thrift.protocol.TType.STRUCT, (short)6);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new replay_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new replay_argsTupleSchemeFactory());
    }

    public String uriPrefix; // required
    public boolean replayOnlyLatest; // required
    public ezbake.base.thrift.DateTime start; // required
    public ezbake.base.thrift.DateTime finish; // required
    /**
     * 
     * @see ezbake.warehouse.GetDataType
     */
    public ezbake.warehouse.GetDataType type; // required
    public ezbake.base.thrift.EzSecurityToken security; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      URI_PREFIX((short)1, "uriPrefix"),
      REPLAY_ONLY_LATEST((short)2, "replayOnlyLatest"),
      START((short)3, "start"),
      FINISH((short)4, "finish"),
      /**
       * 
       * @see ezbake.warehouse.GetDataType
       */
      TYPE((short)5, "type"),
      SECURITY((short)6, "security");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // URI_PREFIX
            return URI_PREFIX;
          case 2: // REPLAY_ONLY_LATEST
            return REPLAY_ONLY_LATEST;
          case 3: // START
            return START;
          case 4: // FINISH
            return FINISH;
          case 5: // TYPE
            return TYPE;
          case 6: // SECURITY
            return SECURITY;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __REPLAYONLYLATEST_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.URI_PREFIX, new org.apache.thrift.meta_data.FieldMetaData("uriPrefix", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.REPLAY_ONLY_LATEST, new org.apache.thrift.meta_data.FieldMetaData("replayOnlyLatest", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      tmpMap.put(_Fields.START, new org.apache.thrift.meta_data.FieldMetaData("start", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ezbake.base.thrift.DateTime.class)));
      tmpMap.put(_Fields.FINISH, new org.apache.thrift.meta_data.FieldMetaData("finish", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ezbake.base.thrift.DateTime.class)));
      tmpMap.put(_Fields.TYPE, new org.apache.thrift.meta_data.FieldMetaData("type", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, ezbake.warehouse.GetDataType.class)));
      tmpMap.put(_Fields.SECURITY, new org.apache.thrift.meta_data.FieldMetaData("security", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ezbake.base.thrift.EzSecurityToken.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(replay_args.class, metaDataMap);
    }

    public replay_args() {
    }

    public replay_args(
      String uriPrefix,
      boolean replayOnlyLatest,
      ezbake.base.thrift.DateTime start,
      ezbake.base.thrift.DateTime finish,
      ezbake.warehouse.GetDataType type,
      ezbake.base.thrift.EzSecurityToken security)
    {
      this();
      this.uriPrefix = uriPrefix;
      this.replayOnlyLatest = replayOnlyLatest;
      setReplayOnlyLatestIsSet(true);
      this.start = start;
      this.finish = finish;
      this.type = type;
      this.security = security;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public replay_args(replay_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetUriPrefix()) {
        this.uriPrefix = other.uriPrefix;
      }
      this.replayOnlyLatest = other.replayOnlyLatest;
      if (other.isSetStart()) {
        this.start = new ezbake.base.thrift.DateTime(other.start);
      }
      if (other.isSetFinish()) {
        this.finish = new ezbake.base.thrift.DateTime(other.finish);
      }
      if (other.isSetType()) {
        this.type = other.type;
      }
      if (other.isSetSecurity()) {
        this.security = new ezbake.base.thrift.EzSecurityToken(other.security);
      }
    }

    public replay_args deepCopy() {
      return new replay_args(this);
    }

    @Override
    public void clear() {
      this.uriPrefix = null;
      setReplayOnlyLatestIsSet(false);
      this.replayOnlyLatest = false;
      this.start = null;
      this.finish = null;
      this.type = null;
      this.security = null;
    }

    public String getUriPrefix() {
      return this.uriPrefix;
    }

    public replay_args setUriPrefix(String uriPrefix) {
      this.uriPrefix = uriPrefix;
      return this;
    }

    public void unsetUriPrefix() {
      this.uriPrefix = null;
    }

    /** Returns true if field uriPrefix is set (has been assigned a value) and false otherwise */
    public boolean isSetUriPrefix() {
      return this.uriPrefix != null;
    }

    public void setUriPrefixIsSet(boolean value) {
      if (!value) {
        this.uriPrefix = null;
      }
    }

    public boolean isReplayOnlyLatest() {
      return this.replayOnlyLatest;
    }

    public replay_args setReplayOnlyLatest(boolean replayOnlyLatest) {
      this.replayOnlyLatest = replayOnlyLatest;
      setReplayOnlyLatestIsSet(true);
      return this;
    }

    public void unsetReplayOnlyLatest() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __REPLAYONLYLATEST_ISSET_ID);
    }

    /** Returns true if field replayOnlyLatest is set (has been assigned a value) and false otherwise */
    public boolean isSetReplayOnlyLatest() {
      return EncodingUtils.testBit(__isset_bitfield, __REPLAYONLYLATEST_ISSET_ID);
    }

    public void setReplayOnlyLatestIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __REPLAYONLYLATEST_ISSET_ID, value);
    }

    public ezbake.base.thrift.DateTime getStart() {
      return this.start;
    }

    public replay_args setStart(ezbake.base.thrift.DateTime start) {
      this.start = start;
      return this;
    }

    public void unsetStart() {
      this.start = null;
    }

    /** Returns true if field start is set (has been assigned a value) and false otherwise */
    public boolean isSetStart() {
      return this.start != null;
    }

    public void setStartIsSet(boolean value) {
      if (!value) {
        this.start = null;
      }
    }

    public ezbake.base.thrift.DateTime getFinish() {
      return this.finish;
    }

    public replay_args setFinish(ezbake.base.thrift.DateTime finish) {
      this.finish = finish;
      return this;
    }

    public void unsetFinish() {
      this.finish = null;
    }

    /** Returns true if field finish is set (has been assigned a value) and false otherwise */
    public boolean isSetFinish() {
      return this.finish != null;
    }

    public void setFinishIsSet(boolean value) {
      if (!value) {
        this.finish = null;
      }
    }

    /**
     * 
     * @see ezbake.warehouse.GetDataType
     */
    public ezbake.warehouse.GetDataType getType() {
      return this.type;
    }

    /**
     * 
     * @see ezbake.warehouse.GetDataType
     */
    public replay_args setType(ezbake.warehouse.GetDataType type) {
      this.type = type;
      return this;
    }

    public void unsetType() {
      this.type = null;
    }

    /** Returns true if field type is set (has been assigned a value) and false otherwise */
    public boolean isSetType() {
      return this.type != null;
    }

    public void setTypeIsSet(boolean value) {
      if (!value) {
        this.type = null;
      }
    }

    public ezbake.base.thrift.EzSecurityToken getSecurity() {
      return this.security;
    }

    public replay_args setSecurity(ezbake.base.thrift.EzSecurityToken security) {
      this.security = security;
      return this;
    }

    public void unsetSecurity() {
      this.security = null;
    }

    /** Returns true if field security is set (has been assigned a value) and false otherwise */
    public boolean isSetSecurity() {
      return this.security != null;
    }

    public void setSecurityIsSet(boolean value) {
      if (!value) {
        this.security = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case URI_PREFIX:
        if (value == null) {
          unsetUriPrefix();
        } else {
          setUriPrefix((String)value);
        }
        break;

      case REPLAY_ONLY_LATEST:
        if (value == null) {
          unsetReplayOnlyLatest();
        } else {
          setReplayOnlyLatest((Boolean)value);
        }
        break;

      case START:
        if (value == null) {
          unsetStart();
        } else {
          setStart((ezbake.base.thrift.DateTime)value);
        }
        break;

      case FINISH:
        if (value == null) {
          unsetFinish();
        } else {
          setFinish((ezbake.base.thrift.DateTime)value);
        }
        break;

      case TYPE:
        if (value == null) {
          unsetType();
        } else {
          setType((ezbake.warehouse.GetDataType)value);
        }
        break;

      case SECURITY:
        if (value == null) {
          unsetSecurity();
        } else {
          setSecurity((ezbake.base.thrift.EzSecurityToken)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case URI_PREFIX:
        return getUriPrefix();

      case REPLAY_ONLY_LATEST:
        return Boolean.valueOf(isReplayOnlyLatest());

      case START:
        return getStart();

      case FINISH:
        return getFinish();

      case TYPE:
        return getType();

      case SECURITY:
        return getSecurity();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case URI_PREFIX:
        return isSetUriPrefix();
      case REPLAY_ONLY_LATEST:
        return isSetReplayOnlyLatest();
      case START:
        return isSetStart();
      case FINISH:
        return isSetFinish();
      case TYPE:
        return isSetType();
      case SECURITY:
        return isSetSecurity();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof replay_args)
        return this.equals((replay_args)that);
      return false;
    }

    public boolean equals(replay_args that) {
      if (that == null)
        return false;

      boolean this_present_uriPrefix = true && this.isSetUriPrefix();
      boolean that_present_uriPrefix = true && that.isSetUriPrefix();
      if (this_present_uriPrefix || that_present_uriPrefix) {
        if (!(this_present_uriPrefix && that_present_uriPrefix))
          return false;
        if (!this.uriPrefix.equals(that.uriPrefix))
          return false;
      }

      boolean this_present_replayOnlyLatest = true;
      boolean that_present_replayOnlyLatest = true;
      if (this_present_replayOnlyLatest || that_present_replayOnlyLatest) {
        if (!(this_present_replayOnlyLatest && that_present_replayOnlyLatest))
          return false;
        if (this.replayOnlyLatest != that.replayOnlyLatest)
          return false;
      }

      boolean this_present_start = true && this.isSetStart();
      boolean that_present_start = true && that.isSetStart();
      if (this_present_start || that_present_start) {
        if (!(this_present_start && that_present_start))
          return false;
        if (!this.start.equals(that.start))
          return false;
      }

      boolean this_present_finish = true && this.isSetFinish();
      boolean that_present_finish = true && that.isSetFinish();
      if (this_present_finish || that_present_finish) {
        if (!(this_present_finish && that_present_finish))
          return false;
        if (!this.finish.equals(that.finish))
          return false;
      }

      boolean this_present_type = true && this.isSetType();
      boolean that_present_type = true && that.isSetType();
      if (this_present_type || that_present_type) {
        if (!(this_present_type && that_present_type))
          return false;
        if (!this.type.equals(that.type))
          return false;
      }

      boolean this_present_security = true && this.isSetSecurity();
      boolean that_present_security = true && that.isSetSecurity();
      if (this_present_security || that_present_security) {
        if (!(this_present_security && that_present_security))
          return false;
        if (!this.security.equals(that.security))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(replay_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetUriPrefix()).compareTo(other.isSetUriPrefix());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUriPrefix()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.uriPrefix, other.uriPrefix);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetReplayOnlyLatest()).compareTo(other.isSetReplayOnlyLatest());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetReplayOnlyLatest()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.replayOnlyLatest, other.replayOnlyLatest);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetStart()).compareTo(other.isSetStart());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetStart()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.start, other.start);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetFinish()).compareTo(other.isSetFinish());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFinish()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.finish, other.finish);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetType()).compareTo(other.isSetType());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetType()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.type, other.type);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSecurity()).compareTo(other.isSetSecurity());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSecurity()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.security, other.security);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("replay_args(");
      boolean first = true;

      sb.append("uriPrefix:");
      if (this.uriPrefix == null) {
        sb.append("null");
      } else {
        sb.append(this.uriPrefix);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("replayOnlyLatest:");
      sb.append(this.replayOnlyLatest);
      first = false;
      if (!first) sb.append(", ");
      sb.append("start:");
      if (this.start == null) {
        sb.append("null");
      } else {
        sb.append(this.start);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("finish:");
      if (this.finish == null) {
        sb.append("null");
      } else {
        sb.append(this.finish);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("type:");
      if (this.type == null) {
        sb.append("null");
      } else {
        sb.append(this.type);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("security:");
      if (this.security == null) {
        sb.append("null");
      } else {
        sb.append(this.security);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (start != null) {
        start.validate();
      }
      if (finish != null) {
        finish.validate();
      }
      if (security != null) {
        security.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class replay_argsStandardSchemeFactory implements SchemeFactory {
      public replay_argsStandardScheme getScheme() {
        return new replay_argsStandardScheme();
      }
    }

    private static class replay_argsStandardScheme extends StandardScheme<replay_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, replay_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // URI_PREFIX
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.uriPrefix = iprot.readString();
                struct.setUriPrefixIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // REPLAY_ONLY_LATEST
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.replayOnlyLatest = iprot.readBool();
                struct.setReplayOnlyLatestIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // START
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.start = new ezbake.base.thrift.DateTime();
                struct.start.read(iprot);
                struct.setStartIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // FINISH
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.finish = new ezbake.base.thrift.DateTime();
                struct.finish.read(iprot);
                struct.setFinishIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // TYPE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.type = ezbake.warehouse.GetDataType.findByValue(iprot.readI32());
                struct.setTypeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 6: // SECURITY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.security = new ezbake.base.thrift.EzSecurityToken();
                struct.security.read(iprot);
                struct.setSecurityIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, replay_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.uriPrefix != null) {
          oprot.writeFieldBegin(URI_PREFIX_FIELD_DESC);
          oprot.writeString(struct.uriPrefix);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(REPLAY_ONLY_LATEST_FIELD_DESC);
        oprot.writeBool(struct.replayOnlyLatest);
        oprot.writeFieldEnd();
        if (struct.start != null) {
          oprot.writeFieldBegin(START_FIELD_DESC);
          struct.start.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.finish != null) {
          oprot.writeFieldBegin(FINISH_FIELD_DESC);
          struct.finish.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.type != null) {
          oprot.writeFieldBegin(TYPE_FIELD_DESC);
          oprot.writeI32(struct.type.getValue());
          oprot.writeFieldEnd();
        }
        if (struct.security != null) {
          oprot.writeFieldBegin(SECURITY_FIELD_DESC);
          struct.security.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class replay_argsTupleSchemeFactory implements SchemeFactory {
      public replay_argsTupleScheme getScheme() {
        return new replay_argsTupleScheme();
      }
    }

    private static class replay_argsTupleScheme extends TupleScheme<replay_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, replay_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetUriPrefix()) {
          optionals.set(0);
        }
        if (struct.isSetReplayOnlyLatest()) {
          optionals.set(1);
        }
        if (struct.isSetStart()) {
          optionals.set(2);
        }
        if (struct.isSetFinish()) {
          optionals.set(3);
        }
        if (struct.isSetType()) {
          optionals.set(4);
        }
        if (struct.isSetSecurity()) {
          optionals.set(5);
        }
        oprot.writeBitSet(optionals, 6);
        if (struct.isSetUriPrefix()) {
          oprot.writeString(struct.uriPrefix);
        }
        if (struct.isSetReplayOnlyLatest()) {
          oprot.writeBool(struct.replayOnlyLatest);
        }
        if (struct.isSetStart()) {
          struct.start.write(oprot);
        }
        if (struct.isSetFinish()) {
          struct.finish.write(oprot);
        }
        if (struct.isSetType()) {
          oprot.writeI32(struct.type.getValue());
        }
        if (struct.isSetSecurity()) {
          struct.security.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, replay_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(6);
        if (incoming.get(0)) {
          struct.uriPrefix = iprot.readString();
          struct.setUriPrefixIsSet(true);
        }
        if (incoming.get(1)) {
          struct.replayOnlyLatest = iprot.readBool();
          struct.setReplayOnlyLatestIsSet(true);
        }
        if (incoming.get(2)) {
          struct.start = new ezbake.base.thrift.DateTime();
          struct.start.read(iprot);
          struct.setStartIsSet(true);
        }
        if (incoming.get(3)) {
          struct.finish = new ezbake.base.thrift.DateTime();
          struct.finish.read(iprot);
          struct.setFinishIsSet(true);
        }
        if (incoming.get(4)) {
          struct.type = ezbake.warehouse.GetDataType.findByValue(iprot.readI32());
          struct.setTypeIsSet(true);
        }
        if (incoming.get(5)) {
          struct.security = new ezbake.base.thrift.EzSecurityToken();
          struct.security.read(iprot);
          struct.setSecurityIsSet(true);
        }
      }
    }

  }

  public static class replay_result implements org.apache.thrift.TBase<replay_result, replay_result._Fields>, java.io.Serializable, Cloneable, Comparable<replay_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("replay_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new replay_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new replay_resultTupleSchemeFactory());
    }

    public List<ezbake.warehouse.DatedURI> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ezbake.warehouse.DatedURI.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(replay_result.class, metaDataMap);
    }

    public replay_result() {
    }

    public replay_result(
      List<ezbake.warehouse.DatedURI> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public replay_result(replay_result other) {
      if (other.isSetSuccess()) {
        List<ezbake.warehouse.DatedURI> __this__success = new ArrayList<ezbake.warehouse.DatedURI>(other.success.size());
        for (ezbake.warehouse.DatedURI other_element : other.success) {
          __this__success.add(new ezbake.warehouse.DatedURI(other_element));
        }
        this.success = __this__success;
      }
    }

    public replay_result deepCopy() {
      return new replay_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<ezbake.warehouse.DatedURI> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(ezbake.warehouse.DatedURI elem) {
      if (this.success == null) {
        this.success = new ArrayList<ezbake.warehouse.DatedURI>();
      }
      this.success.add(elem);
    }

    public List<ezbake.warehouse.DatedURI> getSuccess() {
      return this.success;
    }

    public replay_result setSuccess(List<ezbake.warehouse.DatedURI> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<ezbake.warehouse.DatedURI>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof replay_result)
        return this.equals((replay_result)that);
      return false;
    }

    public boolean equals(replay_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(replay_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("replay_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class replay_resultStandardSchemeFactory implements SchemeFactory {
      public replay_resultStandardScheme getScheme() {
        return new replay_resultStandardScheme();
      }
    }

    private static class replay_resultStandardScheme extends StandardScheme<replay_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, replay_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list8 = iprot.readListBegin();
                  struct.success = new ArrayList<ezbake.warehouse.DatedURI>(_list8.size);
                  for (int _i9 = 0; _i9 < _list8.size; ++_i9)
                  {
                    ezbake.warehouse.DatedURI _elem10;
                    _elem10 = new ezbake.warehouse.DatedURI();
                    _elem10.read(iprot);
                    struct.success.add(_elem10);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, replay_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (ezbake.warehouse.DatedURI _iter11 : struct.success)
            {
              _iter11.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class replay_resultTupleSchemeFactory implements SchemeFactory {
      public replay_resultTupleScheme getScheme() {
        return new replay_resultTupleScheme();
      }
    }

    private static class replay_resultTupleScheme extends TupleScheme<replay_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, replay_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (ezbake.warehouse.DatedURI _iter12 : struct.success)
            {
              _iter12.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, replay_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list13 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<ezbake.warehouse.DatedURI>(_list13.size);
            for (int _i14 = 0; _i14 < _list13.size; ++_i14)
            {
              ezbake.warehouse.DatedURI _elem15;
              _elem15 = new ezbake.warehouse.DatedURI();
              _elem15.read(iprot);
              struct.success.add(_elem15);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class replayCount_args implements org.apache.thrift.TBase<replayCount_args, replayCount_args._Fields>, java.io.Serializable, Cloneable, Comparable<replayCount_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("replayCount_args");

    private static final org.apache.thrift.protocol.TField URI_PREFIX_FIELD_DESC = new org.apache.thrift.protocol.TField("uriPrefix", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField START_FIELD_DESC = new org.apache.thrift.protocol.TField("start", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField FINISH_FIELD_DESC = new org.apache.thrift.protocol.TField("finish", org.apache.thrift.protocol.TType.STRUCT, (short)3);
    private static final org.apache.thrift.protocol.TField TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("type", org.apache.thrift.protocol.TType.I32, (short)4);
    private static final org.apache.thrift.protocol.TField SECURITY_FIELD_DESC = new org.apache.thrift.protocol.TField("security", org.apache.thrift.protocol.TType.STRUCT, (short)5);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new replayCount_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new replayCount_argsTupleSchemeFactory());
    }

    public String uriPrefix; // required
    public ezbake.base.thrift.DateTime start; // required
    public ezbake.base.thrift.DateTime finish; // required
    /**
     * 
     * @see ezbake.warehouse.GetDataType
     */
    public ezbake.warehouse.GetDataType type; // required
    public ezbake.base.thrift.EzSecurityToken security; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      URI_PREFIX((short)1, "uriPrefix"),
      START((short)2, "start"),
      FINISH((short)3, "finish"),
      /**
       * 
       * @see ezbake.warehouse.GetDataType
       */
      TYPE((short)4, "type"),
      SECURITY((short)5, "security");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // URI_PREFIX
            return URI_PREFIX;
          case 2: // START
            return START;
          case 3: // FINISH
            return FINISH;
          case 4: // TYPE
            return TYPE;
          case 5: // SECURITY
            return SECURITY;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.URI_PREFIX, new org.apache.thrift.meta_data.FieldMetaData("uriPrefix", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.START, new org.apache.thrift.meta_data.FieldMetaData("start", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ezbake.base.thrift.DateTime.class)));
      tmpMap.put(_Fields.FINISH, new org.apache.thrift.meta_data.FieldMetaData("finish", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ezbake.base.thrift.DateTime.class)));
      tmpMap.put(_Fields.TYPE, new org.apache.thrift.meta_data.FieldMetaData("type", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, ezbake.warehouse.GetDataType.class)));
      tmpMap.put(_Fields.SECURITY, new org.apache.thrift.meta_data.FieldMetaData("security", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ezbake.base.thrift.EzSecurityToken.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(replayCount_args.class, metaDataMap);
    }

    public replayCount_args() {
    }

    public replayCount_args(
      String uriPrefix,
      ezbake.base.thrift.DateTime start,
      ezbake.base.thrift.DateTime finish,
      ezbake.warehouse.GetDataType type,
      ezbake.base.thrift.EzSecurityToken security)
    {
      this();
      this.uriPrefix = uriPrefix;
      this.start = start;
      this.finish = finish;
      this.type = type;
      this.security = security;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public replayCount_args(replayCount_args other) {
      if (other.isSetUriPrefix()) {
        this.uriPrefix = other.uriPrefix;
      }
      if (other.isSetStart()) {
        this.start = new ezbake.base.thrift.DateTime(other.start);
      }
      if (other.isSetFinish()) {
        this.finish = new ezbake.base.thrift.DateTime(other.finish);
      }
      if (other.isSetType()) {
        this.type = other.type;
      }
      if (other.isSetSecurity()) {
        this.security = new ezbake.base.thrift.EzSecurityToken(other.security);
      }
    }

    public replayCount_args deepCopy() {
      return new replayCount_args(this);
    }

    @Override
    public void clear() {
      this.uriPrefix = null;
      this.start = null;
      this.finish = null;
      this.type = null;
      this.security = null;
    }

    public String getUriPrefix() {
      return this.uriPrefix;
    }

    public replayCount_args setUriPrefix(String uriPrefix) {
      this.uriPrefix = uriPrefix;
      return this;
    }

    public void unsetUriPrefix() {
      this.uriPrefix = null;
    }

    /** Returns true if field uriPrefix is set (has been assigned a value) and false otherwise */
    public boolean isSetUriPrefix() {
      return this.uriPrefix != null;
    }

    public void setUriPrefixIsSet(boolean value) {
      if (!value) {
        this.uriPrefix = null;
      }
    }

    public ezbake.base.thrift.DateTime getStart() {
      return this.start;
    }

    public replayCount_args setStart(ezbake.base.thrift.DateTime start) {
      this.start = start;
      return this;
    }

    public void unsetStart() {
      this.start = null;
    }

    /** Returns true if field start is set (has been assigned a value) and false otherwise */
    public boolean isSetStart() {
      return this.start != null;
    }

    public void setStartIsSet(boolean value) {
      if (!value) {
        this.start = null;
      }
    }

    public ezbake.base.thrift.DateTime getFinish() {
      return this.finish;
    }

    public replayCount_args setFinish(ezbake.base.thrift.DateTime finish) {
      this.finish = finish;
      return this;
    }

    public void unsetFinish() {
      this.finish = null;
    }

    /** Returns true if field finish is set (has been assigned a value) and false otherwise */
    public boolean isSetFinish() {
      return this.finish != null;
    }

    public void setFinishIsSet(boolean value) {
      if (!value) {
        this.finish = null;
      }
    }

    /**
     * 
     * @see ezbake.warehouse.GetDataType
     */
    public ezbake.warehouse.GetDataType getType() {
      return this.type;
    }

    /**
     * 
     * @see ezbake.warehouse.GetDataType
     */
    public replayCount_args setType(ezbake.warehouse.GetDataType type) {
      this.type = type;
      return this;
    }

    public void unsetType() {
      this.type = null;
    }

    /** Returns true if field type is set (has been assigned a value) and false otherwise */
    public boolean isSetType() {
      return this.type != null;
    }

    public void setTypeIsSet(boolean value) {
      if (!value) {
        this.type = null;
      }
    }

    public ezbake.base.thrift.EzSecurityToken getSecurity() {
      return this.security;
    }

    public replayCount_args setSecurity(ezbake.base.thrift.EzSecurityToken security) {
      this.security = security;
      return this;
    }

    public void unsetSecurity() {
      this.security = null;
    }

    /** Returns true if field security is set (has been assigned a value) and false otherwise */
    public boolean isSetSecurity() {
      return this.security != null;
    }

    public void setSecurityIsSet(boolean value) {
      if (!value) {
        this.security = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case URI_PREFIX:
        if (value == null) {
          unsetUriPrefix();
        } else {
          setUriPrefix((String)value);
        }
        break;

      case START:
        if (value == null) {
          unsetStart();
        } else {
          setStart((ezbake.base.thrift.DateTime)value);
        }
        break;

      case FINISH:
        if (value == null) {
          unsetFinish();
        } else {
          setFinish((ezbake.base.thrift.DateTime)value);
        }
        break;

      case TYPE:
        if (value == null) {
          unsetType();
        } else {
          setType((ezbake.warehouse.GetDataType)value);
        }
        break;

      case SECURITY:
        if (value == null) {
          unsetSecurity();
        } else {
          setSecurity((ezbake.base.thrift.EzSecurityToken)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case URI_PREFIX:
        return getUriPrefix();

      case START:
        return getStart();

      case FINISH:
        return getFinish();

      case TYPE:
        return getType();

      case SECURITY:
        return getSecurity();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case URI_PREFIX:
        return isSetUriPrefix();
      case START:
        return isSetStart();
      case FINISH:
        return isSetFinish();
      case TYPE:
        return isSetType();
      case SECURITY:
        return isSetSecurity();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof replayCount_args)
        return this.equals((replayCount_args)that);
      return false;
    }

    public boolean equals(replayCount_args that) {
      if (that == null)
        return false;

      boolean this_present_uriPrefix = true && this.isSetUriPrefix();
      boolean that_present_uriPrefix = true && that.isSetUriPrefix();
      if (this_present_uriPrefix || that_present_uriPrefix) {
        if (!(this_present_uriPrefix && that_present_uriPrefix))
          return false;
        if (!this.uriPrefix.equals(that.uriPrefix))
          return false;
      }

      boolean this_present_start = true && this.isSetStart();
      boolean that_present_start = true && that.isSetStart();
      if (this_present_start || that_present_start) {
        if (!(this_present_start && that_present_start))
          return false;
        if (!this.start.equals(that.start))
          return false;
      }

      boolean this_present_finish = true && this.isSetFinish();
      boolean that_present_finish = true && that.isSetFinish();
      if (this_present_finish || that_present_finish) {
        if (!(this_present_finish && that_present_finish))
          return false;
        if (!this.finish.equals(that.finish))
          return false;
      }

      boolean this_present_type = true && this.isSetType();
      boolean that_present_type = true && that.isSetType();
      if (this_present_type || that_present_type) {
        if (!(this_present_type && that_present_type))
          return false;
        if (!this.type.equals(that.type))
          return false;
      }

      boolean this_present_security = true && this.isSetSecurity();
      boolean that_present_security = true && that.isSetSecurity();
      if (this_present_security || that_present_security) {
        if (!(this_present_security && that_present_security))
          return false;
        if (!this.security.equals(that.security))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(replayCount_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetUriPrefix()).compareTo(other.isSetUriPrefix());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUriPrefix()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.uriPrefix, other.uriPrefix);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetStart()).compareTo(other.isSetStart());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetStart()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.start, other.start);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetFinish()).compareTo(other.isSetFinish());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFinish()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.finish, other.finish);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetType()).compareTo(other.isSetType());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetType()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.type, other.type);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSecurity()).compareTo(other.isSetSecurity());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSecurity()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.security, other.security);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("replayCount_args(");
      boolean first = true;

      sb.append("uriPrefix:");
      if (this.uriPrefix == null) {
        sb.append("null");
      } else {
        sb.append(this.uriPrefix);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("start:");
      if (this.start == null) {
        sb.append("null");
      } else {
        sb.append(this.start);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("finish:");
      if (this.finish == null) {
        sb.append("null");
      } else {
        sb.append(this.finish);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("type:");
      if (this.type == null) {
        sb.append("null");
      } else {
        sb.append(this.type);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("security:");
      if (this.security == null) {
        sb.append("null");
      } else {
        sb.append(this.security);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (start != null) {
        start.validate();
      }
      if (finish != null) {
        finish.validate();
      }
      if (security != null) {
        security.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class replayCount_argsStandardSchemeFactory implements SchemeFactory {
      public replayCount_argsStandardScheme getScheme() {
        return new replayCount_argsStandardScheme();
      }
    }

    private static class replayCount_argsStandardScheme extends StandardScheme<replayCount_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, replayCount_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // URI_PREFIX
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.uriPrefix = iprot.readString();
                struct.setUriPrefixIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // START
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.start = new ezbake.base.thrift.DateTime();
                struct.start.read(iprot);
                struct.setStartIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // FINISH
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.finish = new ezbake.base.thrift.DateTime();
                struct.finish.read(iprot);
                struct.setFinishIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // TYPE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.type = ezbake.warehouse.GetDataType.findByValue(iprot.readI32());
                struct.setTypeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // SECURITY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.security = new ezbake.base.thrift.EzSecurityToken();
                struct.security.read(iprot);
                struct.setSecurityIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, replayCount_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.uriPrefix != null) {
          oprot.writeFieldBegin(URI_PREFIX_FIELD_DESC);
          oprot.writeString(struct.uriPrefix);
          oprot.writeFieldEnd();
        }
        if (struct.start != null) {
          oprot.writeFieldBegin(START_FIELD_DESC);
          struct.start.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.finish != null) {
          oprot.writeFieldBegin(FINISH_FIELD_DESC);
          struct.finish.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.type != null) {
          oprot.writeFieldBegin(TYPE_FIELD_DESC);
          oprot.writeI32(struct.type.getValue());
          oprot.writeFieldEnd();
        }
        if (struct.security != null) {
          oprot.writeFieldBegin(SECURITY_FIELD_DESC);
          struct.security.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class replayCount_argsTupleSchemeFactory implements SchemeFactory {
      public replayCount_argsTupleScheme getScheme() {
        return new replayCount_argsTupleScheme();
      }
    }

    private static class replayCount_argsTupleScheme extends TupleScheme<replayCount_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, replayCount_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetUriPrefix()) {
          optionals.set(0);
        }
        if (struct.isSetStart()) {
          optionals.set(1);
        }
        if (struct.isSetFinish()) {
          optionals.set(2);
        }
        if (struct.isSetType()) {
          optionals.set(3);
        }
        if (struct.isSetSecurity()) {
          optionals.set(4);
        }
        oprot.writeBitSet(optionals, 5);
        if (struct.isSetUriPrefix()) {
          oprot.writeString(struct.uriPrefix);
        }
        if (struct.isSetStart()) {
          struct.start.write(oprot);
        }
        if (struct.isSetFinish()) {
          struct.finish.write(oprot);
        }
        if (struct.isSetType()) {
          oprot.writeI32(struct.type.getValue());
        }
        if (struct.isSetSecurity()) {
          struct.security.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, replayCount_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(5);
        if (incoming.get(0)) {
          struct.uriPrefix = iprot.readString();
          struct.setUriPrefixIsSet(true);
        }
        if (incoming.get(1)) {
          struct.start = new ezbake.base.thrift.DateTime();
          struct.start.read(iprot);
          struct.setStartIsSet(true);
        }
        if (incoming.get(2)) {
          struct.finish = new ezbake.base.thrift.DateTime();
          struct.finish.read(iprot);
          struct.setFinishIsSet(true);
        }
        if (incoming.get(3)) {
          struct.type = ezbake.warehouse.GetDataType.findByValue(iprot.readI32());
          struct.setTypeIsSet(true);
        }
        if (incoming.get(4)) {
          struct.security = new ezbake.base.thrift.EzSecurityToken();
          struct.security.read(iprot);
          struct.setSecurityIsSet(true);
        }
      }
    }

  }

  public static class replayCount_result implements org.apache.thrift.TBase<replayCount_result, replayCount_result._Fields>, java.io.Serializable, Cloneable, Comparable<replayCount_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("replayCount_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new replayCount_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new replayCount_resultTupleSchemeFactory());
    }

    public int success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(replayCount_result.class, metaDataMap);
    }

    public replayCount_result() {
    }

    public replayCount_result(
      int success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public replayCount_result(replayCount_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public replayCount_result deepCopy() {
      return new replayCount_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public int getSuccess() {
      return this.success;
    }

    public replayCount_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Integer.valueOf(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof replayCount_result)
        return this.equals((replayCount_result)that);
      return false;
    }

    public boolean equals(replayCount_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(replayCount_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("replayCount_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class replayCount_resultStandardSchemeFactory implements SchemeFactory {
      public replayCount_resultStandardScheme getScheme() {
        return new replayCount_resultStandardScheme();
      }
    }

    private static class replayCount_resultStandardScheme extends StandardScheme<replayCount_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, replayCount_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, replayCount_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class replayCount_resultTupleSchemeFactory implements SchemeFactory {
      public replayCount_resultTupleScheme getScheme() {
        return new replayCount_resultTupleScheme();
      }
    }

    private static class replayCount_resultTupleScheme extends TupleScheme<replayCount_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, replayCount_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, replayCount_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getVersions_args implements org.apache.thrift.TBase<getVersions_args, getVersions_args._Fields>, java.io.Serializable, Cloneable, Comparable<getVersions_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getVersions_args");

    private static final org.apache.thrift.protocol.TField URI_FIELD_DESC = new org.apache.thrift.protocol.TField("uri", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField SECURITY_FIELD_DESC = new org.apache.thrift.protocol.TField("security", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getVersions_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getVersions_argsTupleSchemeFactory());
    }

    public String uri; // required
    public ezbake.base.thrift.EzSecurityToken security; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      URI((short)1, "uri"),
      SECURITY((short)2, "security");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // URI
            return URI;
          case 2: // SECURITY
            return SECURITY;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.URI, new org.apache.thrift.meta_data.FieldMetaData("uri", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.SECURITY, new org.apache.thrift.meta_data.FieldMetaData("security", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ezbake.base.thrift.EzSecurityToken.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getVersions_args.class, metaDataMap);
    }

    public getVersions_args() {
    }

    public getVersions_args(
      String uri,
      ezbake.base.thrift.EzSecurityToken security)
    {
      this();
      this.uri = uri;
      this.security = security;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getVersions_args(getVersions_args other) {
      if (other.isSetUri()) {
        this.uri = other.uri;
      }
      if (other.isSetSecurity()) {
        this.security = new ezbake.base.thrift.EzSecurityToken(other.security);
      }
    }

    public getVersions_args deepCopy() {
      return new getVersions_args(this);
    }

    @Override
    public void clear() {
      this.uri = null;
      this.security = null;
    }

    public String getUri() {
      return this.uri;
    }

    public getVersions_args setUri(String uri) {
      this.uri = uri;
      return this;
    }

    public void unsetUri() {
      this.uri = null;
    }

    /** Returns true if field uri is set (has been assigned a value) and false otherwise */
    public boolean isSetUri() {
      return this.uri != null;
    }

    public void setUriIsSet(boolean value) {
      if (!value) {
        this.uri = null;
      }
    }

    public ezbake.base.thrift.EzSecurityToken getSecurity() {
      return this.security;
    }

    public getVersions_args setSecurity(ezbake.base.thrift.EzSecurityToken security) {
      this.security = security;
      return this;
    }

    public void unsetSecurity() {
      this.security = null;
    }

    /** Returns true if field security is set (has been assigned a value) and false otherwise */
    public boolean isSetSecurity() {
      return this.security != null;
    }

    public void setSecurityIsSet(boolean value) {
      if (!value) {
        this.security = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case URI:
        if (value == null) {
          unsetUri();
        } else {
          setUri((String)value);
        }
        break;

      case SECURITY:
        if (value == null) {
          unsetSecurity();
        } else {
          setSecurity((ezbake.base.thrift.EzSecurityToken)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case URI:
        return getUri();

      case SECURITY:
        return getSecurity();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case URI:
        return isSetUri();
      case SECURITY:
        return isSetSecurity();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getVersions_args)
        return this.equals((getVersions_args)that);
      return false;
    }

    public boolean equals(getVersions_args that) {
      if (that == null)
        return false;

      boolean this_present_uri = true && this.isSetUri();
      boolean that_present_uri = true && that.isSetUri();
      if (this_present_uri || that_present_uri) {
        if (!(this_present_uri && that_present_uri))
          return false;
        if (!this.uri.equals(that.uri))
          return false;
      }

      boolean this_present_security = true && this.isSetSecurity();
      boolean that_present_security = true && that.isSetSecurity();
      if (this_present_security || that_present_security) {
        if (!(this_present_security && that_present_security))
          return false;
        if (!this.security.equals(that.security))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getVersions_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetUri()).compareTo(other.isSetUri());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUri()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.uri, other.uri);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSecurity()).compareTo(other.isSetSecurity());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSecurity()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.security, other.security);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getVersions_args(");
      boolean first = true;

      sb.append("uri:");
      if (this.uri == null) {
        sb.append("null");
      } else {
        sb.append(this.uri);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("security:");
      if (this.security == null) {
        sb.append("null");
      } else {
        sb.append(this.security);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (security != null) {
        security.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getVersions_argsStandardSchemeFactory implements SchemeFactory {
      public getVersions_argsStandardScheme getScheme() {
        return new getVersions_argsStandardScheme();
      }
    }

    private static class getVersions_argsStandardScheme extends StandardScheme<getVersions_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getVersions_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // URI
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.uri = iprot.readString();
                struct.setUriIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // SECURITY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.security = new ezbake.base.thrift.EzSecurityToken();
                struct.security.read(iprot);
                struct.setSecurityIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getVersions_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.uri != null) {
          oprot.writeFieldBegin(URI_FIELD_DESC);
          oprot.writeString(struct.uri);
          oprot.writeFieldEnd();
        }
        if (struct.security != null) {
          oprot.writeFieldBegin(SECURITY_FIELD_DESC);
          struct.security.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getVersions_argsTupleSchemeFactory implements SchemeFactory {
      public getVersions_argsTupleScheme getScheme() {
        return new getVersions_argsTupleScheme();
      }
    }

    private static class getVersions_argsTupleScheme extends TupleScheme<getVersions_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getVersions_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetUri()) {
          optionals.set(0);
        }
        if (struct.isSetSecurity()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetUri()) {
          oprot.writeString(struct.uri);
        }
        if (struct.isSetSecurity()) {
          struct.security.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getVersions_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.uri = iprot.readString();
          struct.setUriIsSet(true);
        }
        if (incoming.get(1)) {
          struct.security = new ezbake.base.thrift.EzSecurityToken();
          struct.security.read(iprot);
          struct.setSecurityIsSet(true);
        }
      }
    }

  }

  public static class getVersions_result implements org.apache.thrift.TBase<getVersions_result, getVersions_result._Fields>, java.io.Serializable, Cloneable, Comparable<getVersions_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getVersions_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getVersions_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getVersions_resultTupleSchemeFactory());
    }

    public List<Long> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getVersions_result.class, metaDataMap);
    }

    public getVersions_result() {
    }

    public getVersions_result(
      List<Long> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getVersions_result(getVersions_result other) {
      if (other.isSetSuccess()) {
        List<Long> __this__success = new ArrayList<Long>(other.success);
        this.success = __this__success;
      }
    }

    public getVersions_result deepCopy() {
      return new getVersions_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<Long> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(long elem) {
      if (this.success == null) {
        this.success = new ArrayList<Long>();
      }
      this.success.add(elem);
    }

    public List<Long> getSuccess() {
      return this.success;
    }

    public getVersions_result setSuccess(List<Long> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<Long>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getVersions_result)
        return this.equals((getVersions_result)that);
      return false;
    }

    public boolean equals(getVersions_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getVersions_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getVersions_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getVersions_resultStandardSchemeFactory implements SchemeFactory {
      public getVersions_resultStandardScheme getScheme() {
        return new getVersions_resultStandardScheme();
      }
    }

    private static class getVersions_resultStandardScheme extends StandardScheme<getVersions_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getVersions_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list16 = iprot.readListBegin();
                  struct.success = new ArrayList<Long>(_list16.size);
                  for (int _i17 = 0; _i17 < _list16.size; ++_i17)
                  {
                    long _elem18;
                    _elem18 = iprot.readI64();
                    struct.success.add(_elem18);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getVersions_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, struct.success.size()));
            for (long _iter19 : struct.success)
            {
              oprot.writeI64(_iter19);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getVersions_resultTupleSchemeFactory implements SchemeFactory {
      public getVersions_resultTupleScheme getScheme() {
        return new getVersions_resultTupleScheme();
      }
    }

    private static class getVersions_resultTupleScheme extends TupleScheme<getVersions_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getVersions_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (long _iter20 : struct.success)
            {
              oprot.writeI64(_iter20);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getVersions_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list21 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I64, iprot.readI32());
            struct.success = new ArrayList<Long>(_list21.size);
            for (int _i22 = 0; _i22 < _list21.size; ++_i22)
            {
              long _elem23;
              _elem23 = iprot.readI64();
              struct.success.add(_elem23);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class insertView_args implements org.apache.thrift.TBase<insertView_args, insertView_args._Fields>, java.io.Serializable, Cloneable, Comparable<insertView_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("insertView_args");

    private static final org.apache.thrift.protocol.TField DATA_FIELD_DESC = new org.apache.thrift.protocol.TField("data", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField VISIBILITY_FIELD_DESC = new org.apache.thrift.protocol.TField("visibility", org.apache.thrift.protocol.TType.STRUCT, (short)3);
    private static final org.apache.thrift.protocol.TField SECURITY_FIELD_DESC = new org.apache.thrift.protocol.TField("security", org.apache.thrift.protocol.TType.STRUCT, (short)4);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new insertView_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new insertView_argsTupleSchemeFactory());
    }

    public ByteBuffer data; // required
    public ezbake.warehouse.ViewId id; // required
    public ezbake.base.thrift.Visibility visibility; // required
    public ezbake.base.thrift.EzSecurityToken security; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      DATA((short)1, "data"),
      ID((short)2, "id"),
      VISIBILITY((short)3, "visibility"),
      SECURITY((short)4, "security");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // DATA
            return DATA;
          case 2: // ID
            return ID;
          case 3: // VISIBILITY
            return VISIBILITY;
          case 4: // SECURITY
            return SECURITY;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.DATA, new org.apache.thrift.meta_data.FieldMetaData("data", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , true)));
      tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ezbake.warehouse.ViewId.class)));
      tmpMap.put(_Fields.VISIBILITY, new org.apache.thrift.meta_data.FieldMetaData("visibility", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ezbake.base.thrift.Visibility.class)));
      tmpMap.put(_Fields.SECURITY, new org.apache.thrift.meta_data.FieldMetaData("security", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ezbake.base.thrift.EzSecurityToken.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(insertView_args.class, metaDataMap);
    }

    public insertView_args() {
    }

    public insertView_args(
      ByteBuffer data,
      ezbake.warehouse.ViewId id,
      ezbake.base.thrift.Visibility visibility,
      ezbake.base.thrift.EzSecurityToken security)
    {
      this();
      this.data = data;
      this.id = id;
      this.visibility = visibility;
      this.security = security;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public insertView_args(insertView_args other) {
      if (other.isSetData()) {
        this.data = org.apache.thrift.TBaseHelper.copyBinary(other.data);
;
      }
      if (other.isSetId()) {
        this.id = new ezbake.warehouse.ViewId(other.id);
      }
      if (other.isSetVisibility()) {
        this.visibility = new ezbake.base.thrift.Visibility(other.visibility);
      }
      if (other.isSetSecurity()) {
        this.security = new ezbake.base.thrift.EzSecurityToken(other.security);
      }
    }

    public insertView_args deepCopy() {
      return new insertView_args(this);
    }

    @Override
    public void clear() {
      this.data = null;
      this.id = null;
      this.visibility = null;
      this.security = null;
    }

    public byte[] getData() {
      setData(org.apache.thrift.TBaseHelper.rightSize(data));
      return data == null ? null : data.array();
    }

    public ByteBuffer bufferForData() {
      return data;
    }

    public insertView_args setData(byte[] data) {
      setData(data == null ? (ByteBuffer)null : ByteBuffer.wrap(data));
      return this;
    }

    public insertView_args setData(ByteBuffer data) {
      this.data = data;
      return this;
    }

    public void unsetData() {
      this.data = null;
    }

    /** Returns true if field data is set (has been assigned a value) and false otherwise */
    public boolean isSetData() {
      return this.data != null;
    }

    public void setDataIsSet(boolean value) {
      if (!value) {
        this.data = null;
      }
    }

    public ezbake.warehouse.ViewId getId() {
      return this.id;
    }

    public insertView_args setId(ezbake.warehouse.ViewId id) {
      this.id = id;
      return this;
    }

    public void unsetId() {
      this.id = null;
    }

    /** Returns true if field id is set (has been assigned a value) and false otherwise */
    public boolean isSetId() {
      return this.id != null;
    }

    public void setIdIsSet(boolean value) {
      if (!value) {
        this.id = null;
      }
    }

    public ezbake.base.thrift.Visibility getVisibility() {
      return this.visibility;
    }

    public insertView_args setVisibility(ezbake.base.thrift.Visibility visibility) {
      this.visibility = visibility;
      return this;
    }

    public void unsetVisibility() {
      this.visibility = null;
    }

    /** Returns true if field visibility is set (has been assigned a value) and false otherwise */
    public boolean isSetVisibility() {
      return this.visibility != null;
    }

    public void setVisibilityIsSet(boolean value) {
      if (!value) {
        this.visibility = null;
      }
    }

    public ezbake.base.thrift.EzSecurityToken getSecurity() {
      return this.security;
    }

    public insertView_args setSecurity(ezbake.base.thrift.EzSecurityToken security) {
      this.security = security;
      return this;
    }

    public void unsetSecurity() {
      this.security = null;
    }

    /** Returns true if field security is set (has been assigned a value) and false otherwise */
    public boolean isSetSecurity() {
      return this.security != null;
    }

    public void setSecurityIsSet(boolean value) {
      if (!value) {
        this.security = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case DATA:
        if (value == null) {
          unsetData();
        } else {
          setData((ByteBuffer)value);
        }
        break;

      case ID:
        if (value == null) {
          unsetId();
        } else {
          setId((ezbake.warehouse.ViewId)value);
        }
        break;

      case VISIBILITY:
        if (value == null) {
          unsetVisibility();
        } else {
          setVisibility((ezbake.base.thrift.Visibility)value);
        }
        break;

      case SECURITY:
        if (value == null) {
          unsetSecurity();
        } else {
          setSecurity((ezbake.base.thrift.EzSecurityToken)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case DATA:
        return getData();

      case ID:
        return getId();

      case VISIBILITY:
        return getVisibility();

      case SECURITY:
        return getSecurity();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case DATA:
        return isSetData();
      case ID:
        return isSetId();
      case VISIBILITY:
        return isSetVisibility();
      case SECURITY:
        return isSetSecurity();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof insertView_args)
        return this.equals((insertView_args)that);
      return false;
    }

    public boolean equals(insertView_args that) {
      if (that == null)
        return false;

      boolean this_present_data = true && this.isSetData();
      boolean that_present_data = true && that.isSetData();
      if (this_present_data || that_present_data) {
        if (!(this_present_data && that_present_data))
          return false;
        if (!this.data.equals(that.data))
          return false;
      }

      boolean this_present_id = true && this.isSetId();
      boolean that_present_id = true && that.isSetId();
      if (this_present_id || that_present_id) {
        if (!(this_present_id && that_present_id))
          return false;
        if (!this.id.equals(that.id))
          return false;
      }

      boolean this_present_visibility = true && this.isSetVisibility();
      boolean that_present_visibility = true && that.isSetVisibility();
      if (this_present_visibility || that_present_visibility) {
        if (!(this_present_visibility && that_present_visibility))
          return false;
        if (!this.visibility.equals(that.visibility))
          return false;
      }

      boolean this_present_security = true && this.isSetSecurity();
      boolean that_present_security = true && that.isSetSecurity();
      if (this_present_security || that_present_security) {
        if (!(this_present_security && that_present_security))
          return false;
        if (!this.security.equals(that.security))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(insertView_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetData()).compareTo(other.isSetData());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetData()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.data, other.data);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetId()).compareTo(other.isSetId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetVisibility()).compareTo(other.isSetVisibility());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetVisibility()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.visibility, other.visibility);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSecurity()).compareTo(other.isSetSecurity());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSecurity()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.security, other.security);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("insertView_args(");
      boolean first = true;

      sb.append("data:");
      if (this.data == null) {
        sb.append("null");
      } else {
        org.apache.thrift.TBaseHelper.toString(this.data, sb);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("id:");
      if (this.id == null) {
        sb.append("null");
      } else {
        sb.append(this.id);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("visibility:");
      if (this.visibility == null) {
        sb.append("null");
      } else {
        sb.append(this.visibility);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("security:");
      if (this.security == null) {
        sb.append("null");
      } else {
        sb.append(this.security);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (id != null) {
        id.validate();
      }
      if (visibility != null) {
        visibility.validate();
      }
      if (security != null) {
        security.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class insertView_argsStandardSchemeFactory implements SchemeFactory {
      public insertView_argsStandardScheme getScheme() {
        return new insertView_argsStandardScheme();
      }
    }

    private static class insertView_argsStandardScheme extends StandardScheme<insertView_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, insertView_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // DATA
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.data = iprot.readBinary();
                struct.setDataIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.id = new ezbake.warehouse.ViewId();
                struct.id.read(iprot);
                struct.setIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // VISIBILITY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.visibility = new ezbake.base.thrift.Visibility();
                struct.visibility.read(iprot);
                struct.setVisibilityIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // SECURITY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.security = new ezbake.base.thrift.EzSecurityToken();
                struct.security.read(iprot);
                struct.setSecurityIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, insertView_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.data != null) {
          oprot.writeFieldBegin(DATA_FIELD_DESC);
          oprot.writeBinary(struct.data);
          oprot.writeFieldEnd();
        }
        if (struct.id != null) {
          oprot.writeFieldBegin(ID_FIELD_DESC);
          struct.id.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.visibility != null) {
          oprot.writeFieldBegin(VISIBILITY_FIELD_DESC);
          struct.visibility.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.security != null) {
          oprot.writeFieldBegin(SECURITY_FIELD_DESC);
          struct.security.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class insertView_argsTupleSchemeFactory implements SchemeFactory {
      public insertView_argsTupleScheme getScheme() {
        return new insertView_argsTupleScheme();
      }
    }

    private static class insertView_argsTupleScheme extends TupleScheme<insertView_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, insertView_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetData()) {
          optionals.set(0);
        }
        if (struct.isSetId()) {
          optionals.set(1);
        }
        if (struct.isSetVisibility()) {
          optionals.set(2);
        }
        if (struct.isSetSecurity()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetData()) {
          oprot.writeBinary(struct.data);
        }
        if (struct.isSetId()) {
          struct.id.write(oprot);
        }
        if (struct.isSetVisibility()) {
          struct.visibility.write(oprot);
        }
        if (struct.isSetSecurity()) {
          struct.security.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, insertView_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.data = iprot.readBinary();
          struct.setDataIsSet(true);
        }
        if (incoming.get(1)) {
          struct.id = new ezbake.warehouse.ViewId();
          struct.id.read(iprot);
          struct.setIdIsSet(true);
        }
        if (incoming.get(2)) {
          struct.visibility = new ezbake.base.thrift.Visibility();
          struct.visibility.read(iprot);
          struct.setVisibilityIsSet(true);
        }
        if (incoming.get(3)) {
          struct.security = new ezbake.base.thrift.EzSecurityToken();
          struct.security.read(iprot);
          struct.setSecurityIsSet(true);
        }
      }
    }

  }

  public static class insertView_result implements org.apache.thrift.TBase<insertView_result, insertView_result._Fields>, java.io.Serializable, Cloneable, Comparable<insertView_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("insertView_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new insertView_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new insertView_resultTupleSchemeFactory());
    }

    public ezbake.warehouse.IngestStatus success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ezbake.warehouse.IngestStatus.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(insertView_result.class, metaDataMap);
    }

    public insertView_result() {
    }

    public insertView_result(
      ezbake.warehouse.IngestStatus success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public insertView_result(insertView_result other) {
      if (other.isSetSuccess()) {
        this.success = new ezbake.warehouse.IngestStatus(other.success);
      }
    }

    public insertView_result deepCopy() {
      return new insertView_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public ezbake.warehouse.IngestStatus getSuccess() {
      return this.success;
    }

    public insertView_result setSuccess(ezbake.warehouse.IngestStatus success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((ezbake.warehouse.IngestStatus)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof insertView_result)
        return this.equals((insertView_result)that);
      return false;
    }

    public boolean equals(insertView_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(insertView_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("insertView_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class insertView_resultStandardSchemeFactory implements SchemeFactory {
      public insertView_resultStandardScheme getScheme() {
        return new insertView_resultStandardScheme();
      }
    }

    private static class insertView_resultStandardScheme extends StandardScheme<insertView_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, insertView_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new ezbake.warehouse.IngestStatus();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, insertView_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class insertView_resultTupleSchemeFactory implements SchemeFactory {
      public insertView_resultTupleScheme getScheme() {
        return new insertView_resultTupleScheme();
      }
    }

    private static class insertView_resultTupleScheme extends TupleScheme<insertView_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, insertView_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, insertView_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new ezbake.warehouse.IngestStatus();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getLatestView_args implements org.apache.thrift.TBase<getLatestView_args, getLatestView_args._Fields>, java.io.Serializable, Cloneable, Comparable<getLatestView_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getLatestView_args");

    private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField SECURITY_FIELD_DESC = new org.apache.thrift.protocol.TField("security", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getLatestView_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getLatestView_argsTupleSchemeFactory());
    }

    public ezbake.warehouse.ViewId id; // required
    public ezbake.base.thrift.EzSecurityToken security; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ID((short)1, "id"),
      SECURITY((short)2, "security");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ID
            return ID;
          case 2: // SECURITY
            return SECURITY;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ezbake.warehouse.ViewId.class)));
      tmpMap.put(_Fields.SECURITY, new org.apache.thrift.meta_data.FieldMetaData("security", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ezbake.base.thrift.EzSecurityToken.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getLatestView_args.class, metaDataMap);
    }

    public getLatestView_args() {
    }

    public getLatestView_args(
      ezbake.warehouse.ViewId id,
      ezbake.base.thrift.EzSecurityToken security)
    {
      this();
      this.id = id;
      this.security = security;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getLatestView_args(getLatestView_args other) {
      if (other.isSetId()) {
        this.id = new ezbake.warehouse.ViewId(other.id);
      }
      if (other.isSetSecurity()) {
        this.security = new ezbake.base.thrift.EzSecurityToken(other.security);
      }
    }

    public getLatestView_args deepCopy() {
      return new getLatestView_args(this);
    }

    @Override
    public void clear() {
      this.id = null;
      this.security = null;
    }

    public ezbake.warehouse.ViewId getId() {
      return this.id;
    }

    public getLatestView_args setId(ezbake.warehouse.ViewId id) {
      this.id = id;
      return this;
    }

    public void unsetId() {
      this.id = null;
    }

    /** Returns true if field id is set (has been assigned a value) and false otherwise */
    public boolean isSetId() {
      return this.id != null;
    }

    public void setIdIsSet(boolean value) {
      if (!value) {
        this.id = null;
      }
    }

    public ezbake.base.thrift.EzSecurityToken getSecurity() {
      return this.security;
    }

    public getLatestView_args setSecurity(ezbake.base.thrift.EzSecurityToken security) {
      this.security = security;
      return this;
    }

    public void unsetSecurity() {
      this.security = null;
    }

    /** Returns true if field security is set (has been assigned a value) and false otherwise */
    public boolean isSetSecurity() {
      return this.security != null;
    }

    public void setSecurityIsSet(boolean value) {
      if (!value) {
        this.security = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ID:
        if (value == null) {
          unsetId();
        } else {
          setId((ezbake.warehouse.ViewId)value);
        }
        break;

      case SECURITY:
        if (value == null) {
          unsetSecurity();
        } else {
          setSecurity((ezbake.base.thrift.EzSecurityToken)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ID:
        return getId();

      case SECURITY:
        return getSecurity();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ID:
        return isSetId();
      case SECURITY:
        return isSetSecurity();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getLatestView_args)
        return this.equals((getLatestView_args)that);
      return false;
    }

    public boolean equals(getLatestView_args that) {
      if (that == null)
        return false;

      boolean this_present_id = true && this.isSetId();
      boolean that_present_id = true && that.isSetId();
      if (this_present_id || that_present_id) {
        if (!(this_present_id && that_present_id))
          return false;
        if (!this.id.equals(that.id))
          return false;
      }

      boolean this_present_security = true && this.isSetSecurity();
      boolean that_present_security = true && that.isSetSecurity();
      if (this_present_security || that_present_security) {
        if (!(this_present_security && that_present_security))
          return false;
        if (!this.security.equals(that.security))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getLatestView_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetId()).compareTo(other.isSetId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSecurity()).compareTo(other.isSetSecurity());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSecurity()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.security, other.security);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getLatestView_args(");
      boolean first = true;

      sb.append("id:");
      if (this.id == null) {
        sb.append("null");
      } else {
        sb.append(this.id);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("security:");
      if (this.security == null) {
        sb.append("null");
      } else {
        sb.append(this.security);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (id != null) {
        id.validate();
      }
      if (security != null) {
        security.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getLatestView_argsStandardSchemeFactory implements SchemeFactory {
      public getLatestView_argsStandardScheme getScheme() {
        return new getLatestView_argsStandardScheme();
      }
    }

    private static class getLatestView_argsStandardScheme extends StandardScheme<getLatestView_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getLatestView_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.id = new ezbake.warehouse.ViewId();
                struct.id.read(iprot);
                struct.setIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // SECURITY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.security = new ezbake.base.thrift.EzSecurityToken();
                struct.security.read(iprot);
                struct.setSecurityIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getLatestView_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.id != null) {
          oprot.writeFieldBegin(ID_FIELD_DESC);
          struct.id.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.security != null) {
          oprot.writeFieldBegin(SECURITY_FIELD_DESC);
          struct.security.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getLatestView_argsTupleSchemeFactory implements SchemeFactory {
      public getLatestView_argsTupleScheme getScheme() {
        return new getLatestView_argsTupleScheme();
      }
    }

    private static class getLatestView_argsTupleScheme extends TupleScheme<getLatestView_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getLatestView_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetId()) {
          optionals.set(0);
        }
        if (struct.isSetSecurity()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetId()) {
          struct.id.write(oprot);
        }
        if (struct.isSetSecurity()) {
          struct.security.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getLatestView_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.id = new ezbake.warehouse.ViewId();
          struct.id.read(iprot);
          struct.setIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.security = new ezbake.base.thrift.EzSecurityToken();
          struct.security.read(iprot);
          struct.setSecurityIsSet(true);
        }
      }
    }

  }

  public static class getLatestView_result implements org.apache.thrift.TBase<getLatestView_result, getLatestView_result._Fields>, java.io.Serializable, Cloneable, Comparable<getLatestView_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getLatestView_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getLatestView_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getLatestView_resultTupleSchemeFactory());
    }

    public ezbake.warehouse.BinaryReplay success; // required
    public ezbake.warehouse.EntryNotInWarehouseException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      E((short)1, "e");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ezbake.warehouse.BinaryReplay.class)));
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getLatestView_result.class, metaDataMap);
    }

    public getLatestView_result() {
    }

    public getLatestView_result(
      ezbake.warehouse.BinaryReplay success,
      ezbake.warehouse.EntryNotInWarehouseException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getLatestView_result(getLatestView_result other) {
      if (other.isSetSuccess()) {
        this.success = new ezbake.warehouse.BinaryReplay(other.success);
      }
      if (other.isSetE()) {
        this.e = new ezbake.warehouse.EntryNotInWarehouseException(other.e);
      }
    }

    public getLatestView_result deepCopy() {
      return new getLatestView_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.e = null;
    }

    public ezbake.warehouse.BinaryReplay getSuccess() {
      return this.success;
    }

    public getLatestView_result setSuccess(ezbake.warehouse.BinaryReplay success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public ezbake.warehouse.EntryNotInWarehouseException getE() {
      return this.e;
    }

    public getLatestView_result setE(ezbake.warehouse.EntryNotInWarehouseException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((ezbake.warehouse.BinaryReplay)value);
        }
        break;

      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((ezbake.warehouse.EntryNotInWarehouseException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case E:
        return getE();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case E:
        return isSetE();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getLatestView_result)
        return this.equals((getLatestView_result)that);
      return false;
    }

    public boolean equals(getLatestView_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getLatestView_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetE()).compareTo(other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getLatestView_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getLatestView_resultStandardSchemeFactory implements SchemeFactory {
      public getLatestView_resultStandardScheme getScheme() {
        return new getLatestView_resultStandardScheme();
      }
    }

    private static class getLatestView_resultStandardScheme extends StandardScheme<getLatestView_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getLatestView_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new ezbake.warehouse.BinaryReplay();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // E
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e = new ezbake.warehouse.EntryNotInWarehouseException();
                struct.e.read(iprot);
                struct.setEIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getLatestView_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.e != null) {
          oprot.writeFieldBegin(E_FIELD_DESC);
          struct.e.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getLatestView_resultTupleSchemeFactory implements SchemeFactory {
      public getLatestView_resultTupleScheme getScheme() {
        return new getLatestView_resultTupleScheme();
      }
    }

    private static class getLatestView_resultTupleScheme extends TupleScheme<getLatestView_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getLatestView_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetE()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetE()) {
          struct.e.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getLatestView_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new ezbake.warehouse.BinaryReplay();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.e = new ezbake.warehouse.EntryNotInWarehouseException();
          struct.e.read(iprot);
          struct.setEIsSet(true);
        }
      }
    }

  }

  public static class getView_args implements org.apache.thrift.TBase<getView_args, getView_args._Fields>, java.io.Serializable, Cloneable, Comparable<getView_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getView_args");

    private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField TIMESTAMP_FIELD_DESC = new org.apache.thrift.protocol.TField("timestamp", org.apache.thrift.protocol.TType.I64, (short)2);
    private static final org.apache.thrift.protocol.TField SECURITY_FIELD_DESC = new org.apache.thrift.protocol.TField("security", org.apache.thrift.protocol.TType.STRUCT, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getView_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getView_argsTupleSchemeFactory());
    }

    public ezbake.warehouse.ViewId id; // required
    public long timestamp; // required
    public ezbake.base.thrift.EzSecurityToken security; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ID((short)1, "id"),
      TIMESTAMP((short)2, "timestamp"),
      SECURITY((short)3, "security");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ID
            return ID;
          case 2: // TIMESTAMP
            return TIMESTAMP;
          case 3: // SECURITY
            return SECURITY;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __TIMESTAMP_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ezbake.warehouse.ViewId.class)));
      tmpMap.put(_Fields.TIMESTAMP, new org.apache.thrift.meta_data.FieldMetaData("timestamp", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.SECURITY, new org.apache.thrift.meta_data.FieldMetaData("security", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ezbake.base.thrift.EzSecurityToken.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getView_args.class, metaDataMap);
    }

    public getView_args() {
    }

    public getView_args(
      ezbake.warehouse.ViewId id,
      long timestamp,
      ezbake.base.thrift.EzSecurityToken security)
    {
      this();
      this.id = id;
      this.timestamp = timestamp;
      setTimestampIsSet(true);
      this.security = security;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getView_args(getView_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetId()) {
        this.id = new ezbake.warehouse.ViewId(other.id);
      }
      this.timestamp = other.timestamp;
      if (other.isSetSecurity()) {
        this.security = new ezbake.base.thrift.EzSecurityToken(other.security);
      }
    }

    public getView_args deepCopy() {
      return new getView_args(this);
    }

    @Override
    public void clear() {
      this.id = null;
      setTimestampIsSet(false);
      this.timestamp = 0;
      this.security = null;
    }

    public ezbake.warehouse.ViewId getId() {
      return this.id;
    }

    public getView_args setId(ezbake.warehouse.ViewId id) {
      this.id = id;
      return this;
    }

    public void unsetId() {
      this.id = null;
    }

    /** Returns true if field id is set (has been assigned a value) and false otherwise */
    public boolean isSetId() {
      return this.id != null;
    }

    public void setIdIsSet(boolean value) {
      if (!value) {
        this.id = null;
      }
    }

    public long getTimestamp() {
      return this.timestamp;
    }

    public getView_args setTimestamp(long timestamp) {
      this.timestamp = timestamp;
      setTimestampIsSet(true);
      return this;
    }

    public void unsetTimestamp() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TIMESTAMP_ISSET_ID);
    }

    /** Returns true if field timestamp is set (has been assigned a value) and false otherwise */
    public boolean isSetTimestamp() {
      return EncodingUtils.testBit(__isset_bitfield, __TIMESTAMP_ISSET_ID);
    }

    public void setTimestampIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TIMESTAMP_ISSET_ID, value);
    }

    public ezbake.base.thrift.EzSecurityToken getSecurity() {
      return this.security;
    }

    public getView_args setSecurity(ezbake.base.thrift.EzSecurityToken security) {
      this.security = security;
      return this;
    }

    public void unsetSecurity() {
      this.security = null;
    }

    /** Returns true if field security is set (has been assigned a value) and false otherwise */
    public boolean isSetSecurity() {
      return this.security != null;
    }

    public void setSecurityIsSet(boolean value) {
      if (!value) {
        this.security = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case ID:
        if (value == null) {
          unsetId();
        } else {
          setId((ezbake.warehouse.ViewId)value);
        }
        break;

      case TIMESTAMP:
        if (value == null) {
          unsetTimestamp();
        } else {
          setTimestamp((Long)value);
        }
        break;

      case SECURITY:
        if (value == null) {
          unsetSecurity();
        } else {
          setSecurity((ezbake.base.thrift.EzSecurityToken)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case ID:
        return getId();

      case TIMESTAMP:
        return Long.valueOf(getTimestamp());

      case SECURITY:
        return getSecurity();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case ID:
        return isSetId();
      case TIMESTAMP:
        return isSetTimestamp();
      case SECURITY:
        return isSetSecurity();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getView_args)
        return this.equals((getView_args)that);
      return false;
    }

    public boolean equals(getView_args that) {
      if (that == null)
        return false;

      boolean this_present_id = true && this.isSetId();
      boolean that_present_id = true && that.isSetId();
      if (this_present_id || that_present_id) {
        if (!(this_present_id && that_present_id))
          return false;
        if (!this.id.equals(that.id))
          return false;
      }

      boolean this_present_timestamp = true;
      boolean that_present_timestamp = true;
      if (this_present_timestamp || that_present_timestamp) {
        if (!(this_present_timestamp && that_present_timestamp))
          return false;
        if (this.timestamp != that.timestamp)
          return false;
      }

      boolean this_present_security = true && this.isSetSecurity();
      boolean that_present_security = true && that.isSetSecurity();
      if (this_present_security || that_present_security) {
        if (!(this_present_security && that_present_security))
          return false;
        if (!this.security.equals(that.security))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getView_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetId()).compareTo(other.isSetId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTimestamp()).compareTo(other.isSetTimestamp());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTimestamp()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.timestamp, other.timestamp);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSecurity()).compareTo(other.isSetSecurity());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSecurity()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.security, other.security);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getView_args(");
      boolean first = true;

      sb.append("id:");
      if (this.id == null) {
        sb.append("null");
      } else {
        sb.append(this.id);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("timestamp:");
      sb.append(this.timestamp);
      first = false;
      if (!first) sb.append(", ");
      sb.append("security:");
      if (this.security == null) {
        sb.append("null");
      } else {
        sb.append(this.security);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (id != null) {
        id.validate();
      }
      if (security != null) {
        security.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getView_argsStandardSchemeFactory implements SchemeFactory {
      public getView_argsStandardScheme getScheme() {
        return new getView_argsStandardScheme();
      }
    }

    private static class getView_argsStandardScheme extends StandardScheme<getView_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getView_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.id = new ezbake.warehouse.ViewId();
                struct.id.read(iprot);
                struct.setIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // TIMESTAMP
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.timestamp = iprot.readI64();
                struct.setTimestampIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // SECURITY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.security = new ezbake.base.thrift.EzSecurityToken();
                struct.security.read(iprot);
                struct.setSecurityIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getView_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.id != null) {
          oprot.writeFieldBegin(ID_FIELD_DESC);
          struct.id.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(TIMESTAMP_FIELD_DESC);
        oprot.writeI64(struct.timestamp);
        oprot.writeFieldEnd();
        if (struct.security != null) {
          oprot.writeFieldBegin(SECURITY_FIELD_DESC);
          struct.security.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getView_argsTupleSchemeFactory implements SchemeFactory {
      public getView_argsTupleScheme getScheme() {
        return new getView_argsTupleScheme();
      }
    }

    private static class getView_argsTupleScheme extends TupleScheme<getView_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getView_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetId()) {
          optionals.set(0);
        }
        if (struct.isSetTimestamp()) {
          optionals.set(1);
        }
        if (struct.isSetSecurity()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetId()) {
          struct.id.write(oprot);
        }
        if (struct.isSetTimestamp()) {
          oprot.writeI64(struct.timestamp);
        }
        if (struct.isSetSecurity()) {
          struct.security.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getView_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.id = new ezbake.warehouse.ViewId();
          struct.id.read(iprot);
          struct.setIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.timestamp = iprot.readI64();
          struct.setTimestampIsSet(true);
        }
        if (incoming.get(2)) {
          struct.security = new ezbake.base.thrift.EzSecurityToken();
          struct.security.read(iprot);
          struct.setSecurityIsSet(true);
        }
      }
    }

  }

  public static class getView_result implements org.apache.thrift.TBase<getView_result, getView_result._Fields>, java.io.Serializable, Cloneable, Comparable<getView_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getView_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getView_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getView_resultTupleSchemeFactory());
    }

    public ezbake.warehouse.BinaryReplay success; // required
    public ezbake.warehouse.EntryNotInWarehouseException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      E((short)1, "e");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ezbake.warehouse.BinaryReplay.class)));
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getView_result.class, metaDataMap);
    }

    public getView_result() {
    }

    public getView_result(
      ezbake.warehouse.BinaryReplay success,
      ezbake.warehouse.EntryNotInWarehouseException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getView_result(getView_result other) {
      if (other.isSetSuccess()) {
        this.success = new ezbake.warehouse.BinaryReplay(other.success);
      }
      if (other.isSetE()) {
        this.e = new ezbake.warehouse.EntryNotInWarehouseException(other.e);
      }
    }

    public getView_result deepCopy() {
      return new getView_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.e = null;
    }

    public ezbake.warehouse.BinaryReplay getSuccess() {
      return this.success;
    }

    public getView_result setSuccess(ezbake.warehouse.BinaryReplay success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public ezbake.warehouse.EntryNotInWarehouseException getE() {
      return this.e;
    }

    public getView_result setE(ezbake.warehouse.EntryNotInWarehouseException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((ezbake.warehouse.BinaryReplay)value);
        }
        break;

      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((ezbake.warehouse.EntryNotInWarehouseException)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case E:
        return getE();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case E:
        return isSetE();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getView_result)
        return this.equals((getView_result)that);
      return false;
    }

    public boolean equals(getView_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getView_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetE()).compareTo(other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getView_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getView_resultStandardSchemeFactory implements SchemeFactory {
      public getView_resultStandardScheme getScheme() {
        return new getView_resultStandardScheme();
      }
    }

    private static class getView_resultStandardScheme extends StandardScheme<getView_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getView_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new ezbake.warehouse.BinaryReplay();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // E
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e = new ezbake.warehouse.EntryNotInWarehouseException();
                struct.e.read(iprot);
                struct.setEIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getView_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.e != null) {
          oprot.writeFieldBegin(E_FIELD_DESC);
          struct.e.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getView_resultTupleSchemeFactory implements SchemeFactory {
      public getView_resultTupleScheme getScheme() {
        return new getView_resultTupleScheme();
      }
    }

    private static class getView_resultTupleScheme extends TupleScheme<getView_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getView_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetE()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetE()) {
          struct.e.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getView_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new ezbake.warehouse.BinaryReplay();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.e = new ezbake.warehouse.EntryNotInWarehouseException();
          struct.e.read(iprot);
          struct.setEIsSet(true);
        }
      }
    }

  }

  public static class importFromHadoop_args implements org.apache.thrift.TBase<importFromHadoop_args, importFromHadoop_args._Fields>, java.io.Serializable, Cloneable, Comparable<importFromHadoop_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("importFromHadoop_args");

    private static final org.apache.thrift.protocol.TField FILENAME_FIELD_DESC = new org.apache.thrift.protocol.TField("filename", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField VISIBILITY_FIELD_DESC = new org.apache.thrift.protocol.TField("visibility", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField SECURITY_FIELD_DESC = new org.apache.thrift.protocol.TField("security", org.apache.thrift.protocol.TType.STRUCT, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new importFromHadoop_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new importFromHadoop_argsTupleSchemeFactory());
    }

    public String filename; // required
    public ezbake.base.thrift.Visibility visibility; // required
    public ezbake.base.thrift.EzSecurityToken security; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      FILENAME((short)1, "filename"),
      VISIBILITY((short)2, "visibility"),
      SECURITY((short)3, "security");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // FILENAME
            return FILENAME;
          case 2: // VISIBILITY
            return VISIBILITY;
          case 3: // SECURITY
            return SECURITY;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.FILENAME, new org.apache.thrift.meta_data.FieldMetaData("filename", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.VISIBILITY, new org.apache.thrift.meta_data.FieldMetaData("visibility", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ezbake.base.thrift.Visibility.class)));
      tmpMap.put(_Fields.SECURITY, new org.apache.thrift.meta_data.FieldMetaData("security", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ezbake.base.thrift.EzSecurityToken.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(importFromHadoop_args.class, metaDataMap);
    }

    public importFromHadoop_args() {
    }

    public importFromHadoop_args(
      String filename,
      ezbake.base.thrift.Visibility visibility,
      ezbake.base.thrift.EzSecurityToken security)
    {
      this();
      this.filename = filename;
      this.visibility = visibility;
      this.security = security;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public importFromHadoop_args(importFromHadoop_args other) {
      if (other.isSetFilename()) {
        this.filename = other.filename;
      }
      if (other.isSetVisibility()) {
        this.visibility = new ezbake.base.thrift.Visibility(other.visibility);
      }
      if (other.isSetSecurity()) {
        this.security = new ezbake.base.thrift.EzSecurityToken(other.security);
      }
    }

    public importFromHadoop_args deepCopy() {
      return new importFromHadoop_args(this);
    }

    @Override
    public void clear() {
      this.filename = null;
      this.visibility = null;
      this.security = null;
    }

    public String getFilename() {
      return this.filename;
    }

    public importFromHadoop_args setFilename(String filename) {
      this.filename = filename;
      return this;
    }

    public void unsetFilename() {
      this.filename = null;
    }

    /** Returns true if field filename is set (has been assigned a value) and false otherwise */
    public boolean isSetFilename() {
      return this.filename != null;
    }

    public void setFilenameIsSet(boolean value) {
      if (!value) {
        this.filename = null;
      }
    }

    public ezbake.base.thrift.Visibility getVisibility() {
      return this.visibility;
    }

    public importFromHadoop_args setVisibility(ezbake.base.thrift.Visibility visibility) {
      this.visibility = visibility;
      return this;
    }

    public void unsetVisibility() {
      this.visibility = null;
    }

    /** Returns true if field visibility is set (has been assigned a value) and false otherwise */
    public boolean isSetVisibility() {
      return this.visibility != null;
    }

    public void setVisibilityIsSet(boolean value) {
      if (!value) {
        this.visibility = null;
      }
    }

    public ezbake.base.thrift.EzSecurityToken getSecurity() {
      return this.security;
    }

    public importFromHadoop_args setSecurity(ezbake.base.thrift.EzSecurityToken security) {
      this.security = security;
      return this;
    }

    public void unsetSecurity() {
      this.security = null;
    }

    /** Returns true if field security is set (has been assigned a value) and false otherwise */
    public boolean isSetSecurity() {
      return this.security != null;
    }

    public void setSecurityIsSet(boolean value) {
      if (!value) {
        this.security = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case FILENAME:
        if (value == null) {
          unsetFilename();
        } else {
          setFilename((String)value);
        }
        break;

      case VISIBILITY:
        if (value == null) {
          unsetVisibility();
        } else {
          setVisibility((ezbake.base.thrift.Visibility)value);
        }
        break;

      case SECURITY:
        if (value == null) {
          unsetSecurity();
        } else {
          setSecurity((ezbake.base.thrift.EzSecurityToken)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case FILENAME:
        return getFilename();

      case VISIBILITY:
        return getVisibility();

      case SECURITY:
        return getSecurity();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case FILENAME:
        return isSetFilename();
      case VISIBILITY:
        return isSetVisibility();
      case SECURITY:
        return isSetSecurity();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof importFromHadoop_args)
        return this.equals((importFromHadoop_args)that);
      return false;
    }

    public boolean equals(importFromHadoop_args that) {
      if (that == null)
        return false;

      boolean this_present_filename = true && this.isSetFilename();
      boolean that_present_filename = true && that.isSetFilename();
      if (this_present_filename || that_present_filename) {
        if (!(this_present_filename && that_present_filename))
          return false;
        if (!this.filename.equals(that.filename))
          return false;
      }

      boolean this_present_visibility = true && this.isSetVisibility();
      boolean that_present_visibility = true && that.isSetVisibility();
      if (this_present_visibility || that_present_visibility) {
        if (!(this_present_visibility && that_present_visibility))
          return false;
        if (!this.visibility.equals(that.visibility))
          return false;
      }

      boolean this_present_security = true && this.isSetSecurity();
      boolean that_present_security = true && that.isSetSecurity();
      if (this_present_security || that_present_security) {
        if (!(this_present_security && that_present_security))
          return false;
        if (!this.security.equals(that.security))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(importFromHadoop_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetFilename()).compareTo(other.isSetFilename());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFilename()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.filename, other.filename);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetVisibility()).compareTo(other.isSetVisibility());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetVisibility()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.visibility, other.visibility);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSecurity()).compareTo(other.isSetSecurity());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSecurity()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.security, other.security);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("importFromHadoop_args(");
      boolean first = true;

      sb.append("filename:");
      if (this.filename == null) {
        sb.append("null");
      } else {
        sb.append(this.filename);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("visibility:");
      if (this.visibility == null) {
        sb.append("null");
      } else {
        sb.append(this.visibility);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("security:");
      if (this.security == null) {
        sb.append("null");
      } else {
        sb.append(this.security);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (visibility != null) {
        visibility.validate();
      }
      if (security != null) {
        security.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class importFromHadoop_argsStandardSchemeFactory implements SchemeFactory {
      public importFromHadoop_argsStandardScheme getScheme() {
        return new importFromHadoop_argsStandardScheme();
      }
    }

    private static class importFromHadoop_argsStandardScheme extends StandardScheme<importFromHadoop_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, importFromHadoop_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // FILENAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.filename = iprot.readString();
                struct.setFilenameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // VISIBILITY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.visibility = new ezbake.base.thrift.Visibility();
                struct.visibility.read(iprot);
                struct.setVisibilityIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // SECURITY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.security = new ezbake.base.thrift.EzSecurityToken();
                struct.security.read(iprot);
                struct.setSecurityIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, importFromHadoop_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.filename != null) {
          oprot.writeFieldBegin(FILENAME_FIELD_DESC);
          oprot.writeString(struct.filename);
          oprot.writeFieldEnd();
        }
        if (struct.visibility != null) {
          oprot.writeFieldBegin(VISIBILITY_FIELD_DESC);
          struct.visibility.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.security != null) {
          oprot.writeFieldBegin(SECURITY_FIELD_DESC);
          struct.security.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class importFromHadoop_argsTupleSchemeFactory implements SchemeFactory {
      public importFromHadoop_argsTupleScheme getScheme() {
        return new importFromHadoop_argsTupleScheme();
      }
    }

    private static class importFromHadoop_argsTupleScheme extends TupleScheme<importFromHadoop_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, importFromHadoop_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetFilename()) {
          optionals.set(0);
        }
        if (struct.isSetVisibility()) {
          optionals.set(1);
        }
        if (struct.isSetSecurity()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetFilename()) {
          oprot.writeString(struct.filename);
        }
        if (struct.isSetVisibility()) {
          struct.visibility.write(oprot);
        }
        if (struct.isSetSecurity()) {
          struct.security.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, importFromHadoop_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.filename = iprot.readString();
          struct.setFilenameIsSet(true);
        }
        if (incoming.get(1)) {
          struct.visibility = new ezbake.base.thrift.Visibility();
          struct.visibility.read(iprot);
          struct.setVisibilityIsSet(true);
        }
        if (incoming.get(2)) {
          struct.security = new ezbake.base.thrift.EzSecurityToken();
          struct.security.read(iprot);
          struct.setSecurityIsSet(true);
        }
      }
    }

  }

  public static class importFromHadoop_result implements org.apache.thrift.TBase<importFromHadoop_result, importFromHadoop_result._Fields>, java.io.Serializable, Cloneable, Comparable<importFromHadoop_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("importFromHadoop_result");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new importFromHadoop_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new importFromHadoop_resultTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(importFromHadoop_result.class, metaDataMap);
    }

    public importFromHadoop_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public importFromHadoop_result(importFromHadoop_result other) {
    }

    public importFromHadoop_result deepCopy() {
      return new importFromHadoop_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof importFromHadoop_result)
        return this.equals((importFromHadoop_result)that);
      return false;
    }

    public boolean equals(importFromHadoop_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(importFromHadoop_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("importFromHadoop_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class importFromHadoop_resultStandardSchemeFactory implements SchemeFactory {
      public importFromHadoop_resultStandardScheme getScheme() {
        return new importFromHadoop_resultStandardScheme();
      }
    }

    private static class importFromHadoop_resultStandardScheme extends StandardScheme<importFromHadoop_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, importFromHadoop_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, importFromHadoop_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class importFromHadoop_resultTupleSchemeFactory implements SchemeFactory {
      public importFromHadoop_resultTupleScheme getScheme() {
        return new importFromHadoop_resultTupleScheme();
      }
    }

    private static class importFromHadoop_resultTupleScheme extends TupleScheme<importFromHadoop_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, importFromHadoop_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, importFromHadoop_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class updateEntry_args implements org.apache.thrift.TBase<updateEntry_args, updateEntry_args._Fields>, java.io.Serializable, Cloneable, Comparable<updateEntry_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateEntry_args");

    private static final org.apache.thrift.protocol.TField UPDATE_FIELD_DESC = new org.apache.thrift.protocol.TField("update", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField VISIBILITY_FIELD_DESC = new org.apache.thrift.protocol.TField("visibility", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField SECURITY_FIELD_DESC = new org.apache.thrift.protocol.TField("security", org.apache.thrift.protocol.TType.STRUCT, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateEntry_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateEntry_argsTupleSchemeFactory());
    }

    public ezbake.warehouse.UpdateEntry update; // required
    public ezbake.base.thrift.Visibility visibility; // required
    public ezbake.base.thrift.EzSecurityToken security; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      UPDATE((short)1, "update"),
      VISIBILITY((short)2, "visibility"),
      SECURITY((short)3, "security");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // UPDATE
            return UPDATE;
          case 2: // VISIBILITY
            return VISIBILITY;
          case 3: // SECURITY
            return SECURITY;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.UPDATE, new org.apache.thrift.meta_data.FieldMetaData("update", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ezbake.warehouse.UpdateEntry.class)));
      tmpMap.put(_Fields.VISIBILITY, new org.apache.thrift.meta_data.FieldMetaData("visibility", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ezbake.base.thrift.Visibility.class)));
      tmpMap.put(_Fields.SECURITY, new org.apache.thrift.meta_data.FieldMetaData("security", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ezbake.base.thrift.EzSecurityToken.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateEntry_args.class, metaDataMap);
    }

    public updateEntry_args() {
    }

    public updateEntry_args(
      ezbake.warehouse.UpdateEntry update,
      ezbake.base.thrift.Visibility visibility,
      ezbake.base.thrift.EzSecurityToken security)
    {
      this();
      this.update = update;
      this.visibility = visibility;
      this.security = security;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateEntry_args(updateEntry_args other) {
      if (other.isSetUpdate()) {
        this.update = new ezbake.warehouse.UpdateEntry(other.update);
      }
      if (other.isSetVisibility()) {
        this.visibility = new ezbake.base.thrift.Visibility(other.visibility);
      }
      if (other.isSetSecurity()) {
        this.security = new ezbake.base.thrift.EzSecurityToken(other.security);
      }
    }

    public updateEntry_args deepCopy() {
      return new updateEntry_args(this);
    }

    @Override
    public void clear() {
      this.update = null;
      this.visibility = null;
      this.security = null;
    }

    public ezbake.warehouse.UpdateEntry getUpdate() {
      return this.update;
    }

    public updateEntry_args setUpdate(ezbake.warehouse.UpdateEntry update) {
      this.update = update;
      return this;
    }

    public void unsetUpdate() {
      this.update = null;
    }

    /** Returns true if field update is set (has been assigned a value) and false otherwise */
    public boolean isSetUpdate() {
      return this.update != null;
    }

    public void setUpdateIsSet(boolean value) {
      if (!value) {
        this.update = null;
      }
    }

    public ezbake.base.thrift.Visibility getVisibility() {
      return this.visibility;
    }

    public updateEntry_args setVisibility(ezbake.base.thrift.Visibility visibility) {
      this.visibility = visibility;
      return this;
    }

    public void unsetVisibility() {
      this.visibility = null;
    }

    /** Returns true if field visibility is set (has been assigned a value) and false otherwise */
    public boolean isSetVisibility() {
      return this.visibility != null;
    }

    public void setVisibilityIsSet(boolean value) {
      if (!value) {
        this.visibility = null;
      }
    }

    public ezbake.base.thrift.EzSecurityToken getSecurity() {
      return this.security;
    }

    public updateEntry_args setSecurity(ezbake.base.thrift.EzSecurityToken security) {
      this.security = security;
      return this;
    }

    public void unsetSecurity() {
      this.security = null;
    }

    /** Returns true if field security is set (has been assigned a value) and false otherwise */
    public boolean isSetSecurity() {
      return this.security != null;
    }

    public void setSecurityIsSet(boolean value) {
      if (!value) {
        this.security = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case UPDATE:
        if (value == null) {
          unsetUpdate();
        } else {
          setUpdate((ezbake.warehouse.UpdateEntry)value);
        }
        break;

      case VISIBILITY:
        if (value == null) {
          unsetVisibility();
        } else {
          setVisibility((ezbake.base.thrift.Visibility)value);
        }
        break;

      case SECURITY:
        if (value == null) {
          unsetSecurity();
        } else {
          setSecurity((ezbake.base.thrift.EzSecurityToken)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case UPDATE:
        return getUpdate();

      case VISIBILITY:
        return getVisibility();

      case SECURITY:
        return getSecurity();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case UPDATE:
        return isSetUpdate();
      case VISIBILITY:
        return isSetVisibility();
      case SECURITY:
        return isSetSecurity();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateEntry_args)
        return this.equals((updateEntry_args)that);
      return false;
    }

    public boolean equals(updateEntry_args that) {
      if (that == null)
        return false;

      boolean this_present_update = true && this.isSetUpdate();
      boolean that_present_update = true && that.isSetUpdate();
      if (this_present_update || that_present_update) {
        if (!(this_present_update && that_present_update))
          return false;
        if (!this.update.equals(that.update))
          return false;
      }

      boolean this_present_visibility = true && this.isSetVisibility();
      boolean that_present_visibility = true && that.isSetVisibility();
      if (this_present_visibility || that_present_visibility) {
        if (!(this_present_visibility && that_present_visibility))
          return false;
        if (!this.visibility.equals(that.visibility))
          return false;
      }

      boolean this_present_security = true && this.isSetSecurity();
      boolean that_present_security = true && that.isSetSecurity();
      if (this_present_security || that_present_security) {
        if (!(this_present_security && that_present_security))
          return false;
        if (!this.security.equals(that.security))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(updateEntry_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetUpdate()).compareTo(other.isSetUpdate());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUpdate()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.update, other.update);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetVisibility()).compareTo(other.isSetVisibility());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetVisibility()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.visibility, other.visibility);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSecurity()).compareTo(other.isSetSecurity());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSecurity()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.security, other.security);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateEntry_args(");
      boolean first = true;

      sb.append("update:");
      if (this.update == null) {
        sb.append("null");
      } else {
        sb.append(this.update);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("visibility:");
      if (this.visibility == null) {
        sb.append("null");
      } else {
        sb.append(this.visibility);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("security:");
      if (this.security == null) {
        sb.append("null");
      } else {
        sb.append(this.security);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (update != null) {
        update.validate();
      }
      if (visibility != null) {
        visibility.validate();
      }
      if (security != null) {
        security.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateEntry_argsStandardSchemeFactory implements SchemeFactory {
      public updateEntry_argsStandardScheme getScheme() {
        return new updateEntry_argsStandardScheme();
      }
    }

    private static class updateEntry_argsStandardScheme extends StandardScheme<updateEntry_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateEntry_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // UPDATE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.update = new ezbake.warehouse.UpdateEntry();
                struct.update.read(iprot);
                struct.setUpdateIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // VISIBILITY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.visibility = new ezbake.base.thrift.Visibility();
                struct.visibility.read(iprot);
                struct.setVisibilityIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // SECURITY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.security = new ezbake.base.thrift.EzSecurityToken();
                struct.security.read(iprot);
                struct.setSecurityIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateEntry_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.update != null) {
          oprot.writeFieldBegin(UPDATE_FIELD_DESC);
          struct.update.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.visibility != null) {
          oprot.writeFieldBegin(VISIBILITY_FIELD_DESC);
          struct.visibility.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.security != null) {
          oprot.writeFieldBegin(SECURITY_FIELD_DESC);
          struct.security.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateEntry_argsTupleSchemeFactory implements SchemeFactory {
      public updateEntry_argsTupleScheme getScheme() {
        return new updateEntry_argsTupleScheme();
      }
    }

    private static class updateEntry_argsTupleScheme extends TupleScheme<updateEntry_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateEntry_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetUpdate()) {
          optionals.set(0);
        }
        if (struct.isSetVisibility()) {
          optionals.set(1);
        }
        if (struct.isSetSecurity()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetUpdate()) {
          struct.update.write(oprot);
        }
        if (struct.isSetVisibility()) {
          struct.visibility.write(oprot);
        }
        if (struct.isSetSecurity()) {
          struct.security.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateEntry_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.update = new ezbake.warehouse.UpdateEntry();
          struct.update.read(iprot);
          struct.setUpdateIsSet(true);
        }
        if (incoming.get(1)) {
          struct.visibility = new ezbake.base.thrift.Visibility();
          struct.visibility.read(iprot);
          struct.setVisibilityIsSet(true);
        }
        if (incoming.get(2)) {
          struct.security = new ezbake.base.thrift.EzSecurityToken();
          struct.security.read(iprot);
          struct.setSecurityIsSet(true);
        }
      }
    }

  }

  public static class updateEntry_result implements org.apache.thrift.TBase<updateEntry_result, updateEntry_result._Fields>, java.io.Serializable, Cloneable, Comparable<updateEntry_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateEntry_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new updateEntry_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new updateEntry_resultTupleSchemeFactory());
    }

    public ezbake.warehouse.IngestStatus success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ezbake.warehouse.IngestStatus.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateEntry_result.class, metaDataMap);
    }

    public updateEntry_result() {
    }

    public updateEntry_result(
      ezbake.warehouse.IngestStatus success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateEntry_result(updateEntry_result other) {
      if (other.isSetSuccess()) {
        this.success = new ezbake.warehouse.IngestStatus(other.success);
      }
    }

    public updateEntry_result deepCopy() {
      return new updateEntry_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public ezbake.warehouse.IngestStatus getSuccess() {
      return this.success;
    }

    public updateEntry_result setSuccess(ezbake.warehouse.IngestStatus success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((ezbake.warehouse.IngestStatus)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof updateEntry_result)
        return this.equals((updateEntry_result)that);
      return false;
    }

    public boolean equals(updateEntry_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(updateEntry_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("updateEntry_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateEntry_resultStandardSchemeFactory implements SchemeFactory {
      public updateEntry_resultStandardScheme getScheme() {
        return new updateEntry_resultStandardScheme();
      }
    }

    private static class updateEntry_resultStandardScheme extends StandardScheme<updateEntry_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateEntry_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new ezbake.warehouse.IngestStatus();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateEntry_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateEntry_resultTupleSchemeFactory implements SchemeFactory {
      public updateEntry_resultTupleScheme getScheme() {
        return new updateEntry_resultTupleScheme();
      }
    }

    private static class updateEntry_resultTupleScheme extends TupleScheme<updateEntry_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateEntry_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateEntry_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new ezbake.warehouse.IngestStatus();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class put_args implements org.apache.thrift.TBase<put_args, put_args._Fields>, java.io.Serializable, Cloneable, Comparable<put_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("put_args");

    private static final org.apache.thrift.protocol.TField PUT_REQUEST_FIELD_DESC = new org.apache.thrift.protocol.TField("putRequest", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField SECURITY_FIELD_DESC = new org.apache.thrift.protocol.TField("security", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new put_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new put_argsTupleSchemeFactory());
    }

    public ezbake.warehouse.PutRequest putRequest; // required
    public ezbake.base.thrift.EzSecurityToken security; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PUT_REQUEST((short)1, "putRequest"),
      SECURITY((short)2, "security");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PUT_REQUEST
            return PUT_REQUEST;
          case 2: // SECURITY
            return SECURITY;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PUT_REQUEST, new org.apache.thrift.meta_data.FieldMetaData("putRequest", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ezbake.warehouse.PutRequest.class)));
      tmpMap.put(_Fields.SECURITY, new org.apache.thrift.meta_data.FieldMetaData("security", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ezbake.base.thrift.EzSecurityToken.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(put_args.class, metaDataMap);
    }

    public put_args() {
    }

    public put_args(
      ezbake.warehouse.PutRequest putRequest,
      ezbake.base.thrift.EzSecurityToken security)
    {
      this();
      this.putRequest = putRequest;
      this.security = security;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public put_args(put_args other) {
      if (other.isSetPutRequest()) {
        this.putRequest = new ezbake.warehouse.PutRequest(other.putRequest);
      }
      if (other.isSetSecurity()) {
        this.security = new ezbake.base.thrift.EzSecurityToken(other.security);
      }
    }

    public put_args deepCopy() {
      return new put_args(this);
    }

    @Override
    public void clear() {
      this.putRequest = null;
      this.security = null;
    }

    public ezbake.warehouse.PutRequest getPutRequest() {
      return this.putRequest;
    }

    public put_args setPutRequest(ezbake.warehouse.PutRequest putRequest) {
      this.putRequest = putRequest;
      return this;
    }

    public void unsetPutRequest() {
      this.putRequest = null;
    }

    /** Returns true if field putRequest is set (has been assigned a value) and false otherwise */
    public boolean isSetPutRequest() {
      return this.putRequest != null;
    }

    public void setPutRequestIsSet(boolean value) {
      if (!value) {
        this.putRequest = null;
      }
    }

    public ezbake.base.thrift.EzSecurityToken getSecurity() {
      return this.security;
    }

    public put_args setSecurity(ezbake.base.thrift.EzSecurityToken security) {
      this.security = security;
      return this;
    }

    public void unsetSecurity() {
      this.security = null;
    }

    /** Returns true if field security is set (has been assigned a value) and false otherwise */
    public boolean isSetSecurity() {
      return this.security != null;
    }

    public void setSecurityIsSet(boolean value) {
      if (!value) {
        this.security = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case PUT_REQUEST:
        if (value == null) {
          unsetPutRequest();
        } else {
          setPutRequest((ezbake.warehouse.PutRequest)value);
        }
        break;

      case SECURITY:
        if (value == null) {
          unsetSecurity();
        } else {
          setSecurity((ezbake.base.thrift.EzSecurityToken)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case PUT_REQUEST:
        return getPutRequest();

      case SECURITY:
        return getSecurity();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case PUT_REQUEST:
        return isSetPutRequest();
      case SECURITY:
        return isSetSecurity();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof put_args)
        return this.equals((put_args)that);
      return false;
    }

    public boolean equals(put_args that) {
      if (that == null)
        return false;

      boolean this_present_putRequest = true && this.isSetPutRequest();
      boolean that_present_putRequest = true && that.isSetPutRequest();
      if (this_present_putRequest || that_present_putRequest) {
        if (!(this_present_putRequest && that_present_putRequest))
          return false;
        if (!this.putRequest.equals(that.putRequest))
          return false;
      }

      boolean this_present_security = true && this.isSetSecurity();
      boolean that_present_security = true && that.isSetSecurity();
      if (this_present_security || that_present_security) {
        if (!(this_present_security && that_present_security))
          return false;
        if (!this.security.equals(that.security))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(put_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetPutRequest()).compareTo(other.isSetPutRequest());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPutRequest()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.putRequest, other.putRequest);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSecurity()).compareTo(other.isSetSecurity());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSecurity()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.security, other.security);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("put_args(");
      boolean first = true;

      sb.append("putRequest:");
      if (this.putRequest == null) {
        sb.append("null");
      } else {
        sb.append(this.putRequest);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("security:");
      if (this.security == null) {
        sb.append("null");
      } else {
        sb.append(this.security);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (putRequest != null) {
        putRequest.validate();
      }
      if (security != null) {
        security.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class put_argsStandardSchemeFactory implements SchemeFactory {
      public put_argsStandardScheme getScheme() {
        return new put_argsStandardScheme();
      }
    }

    private static class put_argsStandardScheme extends StandardScheme<put_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, put_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PUT_REQUEST
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.putRequest = new ezbake.warehouse.PutRequest();
                struct.putRequest.read(iprot);
                struct.setPutRequestIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // SECURITY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.security = new ezbake.base.thrift.EzSecurityToken();
                struct.security.read(iprot);
                struct.setSecurityIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, put_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.putRequest != null) {
          oprot.writeFieldBegin(PUT_REQUEST_FIELD_DESC);
          struct.putRequest.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.security != null) {
          oprot.writeFieldBegin(SECURITY_FIELD_DESC);
          struct.security.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class put_argsTupleSchemeFactory implements SchemeFactory {
      public put_argsTupleScheme getScheme() {
        return new put_argsTupleScheme();
      }
    }

    private static class put_argsTupleScheme extends TupleScheme<put_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, put_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetPutRequest()) {
          optionals.set(0);
        }
        if (struct.isSetSecurity()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetPutRequest()) {
          struct.putRequest.write(oprot);
        }
        if (struct.isSetSecurity()) {
          struct.security.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, put_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.putRequest = new ezbake.warehouse.PutRequest();
          struct.putRequest.read(iprot);
          struct.setPutRequestIsSet(true);
        }
        if (incoming.get(1)) {
          struct.security = new ezbake.base.thrift.EzSecurityToken();
          struct.security.read(iprot);
          struct.setSecurityIsSet(true);
        }
      }
    }

  }

  public static class put_result implements org.apache.thrift.TBase<put_result, put_result._Fields>, java.io.Serializable, Cloneable, Comparable<put_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("put_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new put_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new put_resultTupleSchemeFactory());
    }

    public ezbake.warehouse.IngestStatus success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ezbake.warehouse.IngestStatus.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(put_result.class, metaDataMap);
    }

    public put_result() {
    }

    public put_result(
      ezbake.warehouse.IngestStatus success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public put_result(put_result other) {
      if (other.isSetSuccess()) {
        this.success = new ezbake.warehouse.IngestStatus(other.success);
      }
    }

    public put_result deepCopy() {
      return new put_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public ezbake.warehouse.IngestStatus getSuccess() {
      return this.success;
    }

    public put_result setSuccess(ezbake.warehouse.IngestStatus success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((ezbake.warehouse.IngestStatus)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof put_result)
        return this.equals((put_result)that);
      return false;
    }

    public boolean equals(put_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(put_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("put_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class put_resultStandardSchemeFactory implements SchemeFactory {
      public put_resultStandardScheme getScheme() {
        return new put_resultStandardScheme();
      }
    }

    private static class put_resultStandardScheme extends StandardScheme<put_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, put_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new ezbake.warehouse.IngestStatus();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, put_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class put_resultTupleSchemeFactory implements SchemeFactory {
      public put_resultTupleScheme getScheme() {
        return new put_resultTupleScheme();
      }
    }

    private static class put_resultTupleScheme extends TupleScheme<put_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, put_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, put_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new ezbake.warehouse.IngestStatus();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getEntryDetails_args implements org.apache.thrift.TBase<getEntryDetails_args, getEntryDetails_args._Fields>, java.io.Serializable, Cloneable, Comparable<getEntryDetails_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getEntryDetails_args");

    private static final org.apache.thrift.protocol.TField URI_FIELD_DESC = new org.apache.thrift.protocol.TField("uri", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField SECURITY_FIELD_DESC = new org.apache.thrift.protocol.TField("security", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getEntryDetails_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getEntryDetails_argsTupleSchemeFactory());
    }

    public String uri; // required
    public ezbake.base.thrift.EzSecurityToken security; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      URI((short)1, "uri"),
      SECURITY((short)2, "security");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // URI
            return URI;
          case 2: // SECURITY
            return SECURITY;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.URI, new org.apache.thrift.meta_data.FieldMetaData("uri", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.SECURITY, new org.apache.thrift.meta_data.FieldMetaData("security", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ezbake.base.thrift.EzSecurityToken.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getEntryDetails_args.class, metaDataMap);
    }

    public getEntryDetails_args() {
    }

    public getEntryDetails_args(
      String uri,
      ezbake.base.thrift.EzSecurityToken security)
    {
      this();
      this.uri = uri;
      this.security = security;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getEntryDetails_args(getEntryDetails_args other) {
      if (other.isSetUri()) {
        this.uri = other.uri;
      }
      if (other.isSetSecurity()) {
        this.security = new ezbake.base.thrift.EzSecurityToken(other.security);
      }
    }

    public getEntryDetails_args deepCopy() {
      return new getEntryDetails_args(this);
    }

    @Override
    public void clear() {
      this.uri = null;
      this.security = null;
    }

    public String getUri() {
      return this.uri;
    }

    public getEntryDetails_args setUri(String uri) {
      this.uri = uri;
      return this;
    }

    public void unsetUri() {
      this.uri = null;
    }

    /** Returns true if field uri is set (has been assigned a value) and false otherwise */
    public boolean isSetUri() {
      return this.uri != null;
    }

    public void setUriIsSet(boolean value) {
      if (!value) {
        this.uri = null;
      }
    }

    public ezbake.base.thrift.EzSecurityToken getSecurity() {
      return this.security;
    }

    public getEntryDetails_args setSecurity(ezbake.base.thrift.EzSecurityToken security) {
      this.security = security;
      return this;
    }

    public void unsetSecurity() {
      this.security = null;
    }

    /** Returns true if field security is set (has been assigned a value) and false otherwise */
    public boolean isSetSecurity() {
      return this.security != null;
    }

    public void setSecurityIsSet(boolean value) {
      if (!value) {
        this.security = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case URI:
        if (value == null) {
          unsetUri();
        } else {
          setUri((String)value);
        }
        break;

      case SECURITY:
        if (value == null) {
          unsetSecurity();
        } else {
          setSecurity((ezbake.base.thrift.EzSecurityToken)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case URI:
        return getUri();

      case SECURITY:
        return getSecurity();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case URI:
        return isSetUri();
      case SECURITY:
        return isSetSecurity();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getEntryDetails_args)
        return this.equals((getEntryDetails_args)that);
      return false;
    }

    public boolean equals(getEntryDetails_args that) {
      if (that == null)
        return false;

      boolean this_present_uri = true && this.isSetUri();
      boolean that_present_uri = true && that.isSetUri();
      if (this_present_uri || that_present_uri) {
        if (!(this_present_uri && that_present_uri))
          return false;
        if (!this.uri.equals(that.uri))
          return false;
      }

      boolean this_present_security = true && this.isSetSecurity();
      boolean that_present_security = true && that.isSetSecurity();
      if (this_present_security || that_present_security) {
        if (!(this_present_security && that_present_security))
          return false;
        if (!this.security.equals(that.security))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getEntryDetails_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetUri()).compareTo(other.isSetUri());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUri()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.uri, other.uri);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetSecurity()).compareTo(other.isSetSecurity());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSecurity()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.security, other.security);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getEntryDetails_args(");
      boolean first = true;

      sb.append("uri:");
      if (this.uri == null) {
        sb.append("null");
      } else {
        sb.append(this.uri);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("security:");
      if (this.security == null) {
        sb.append("null");
      } else {
        sb.append(this.security);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (security != null) {
        security.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getEntryDetails_argsStandardSchemeFactory implements SchemeFactory {
      public getEntryDetails_argsStandardScheme getScheme() {
        return new getEntryDetails_argsStandardScheme();
      }
    }

    private static class getEntryDetails_argsStandardScheme extends StandardScheme<getEntryDetails_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getEntryDetails_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // URI
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.uri = iprot.readString();
                struct.setUriIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // SECURITY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.security = new ezbake.base.thrift.EzSecurityToken();
                struct.security.read(iprot);
                struct.setSecurityIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getEntryDetails_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.uri != null) {
          oprot.writeFieldBegin(URI_FIELD_DESC);
          oprot.writeString(struct.uri);
          oprot.writeFieldEnd();
        }
        if (struct.security != null) {
          oprot.writeFieldBegin(SECURITY_FIELD_DESC);
          struct.security.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getEntryDetails_argsTupleSchemeFactory implements SchemeFactory {
      public getEntryDetails_argsTupleScheme getScheme() {
        return new getEntryDetails_argsTupleScheme();
      }
    }

    private static class getEntryDetails_argsTupleScheme extends TupleScheme<getEntryDetails_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getEntryDetails_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetUri()) {
          optionals.set(0);
        }
        if (struct.isSetSecurity()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetUri()) {
          oprot.writeString(struct.uri);
        }
        if (struct.isSetSecurity()) {
          struct.security.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getEntryDetails_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.uri = iprot.readString();
          struct.setUriIsSet(true);
        }
        if (incoming.get(1)) {
          struct.security = new ezbake.base.thrift.EzSecurityToken();
          struct.security.read(iprot);
          struct.setSecurityIsSet(true);
        }
      }
    }

  }

  public static class getEntryDetails_result implements org.apache.thrift.TBase<getEntryDetails_result, getEntryDetails_result._Fields>, java.io.Serializable, Cloneable, Comparable<getEntryDetails_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getEntryDetails_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getEntryDetails_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getEntryDetails_resultTupleSchemeFactory());
    }

    public ezbake.warehouse.EntryDetail success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ezbake.warehouse.EntryDetail.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getEntryDetails_result.class, metaDataMap);
    }

    public getEntryDetails_result() {
    }

    public getEntryDetails_result(
      ezbake.warehouse.EntryDetail success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getEntryDetails_result(getEntryDetails_result other) {
      if (other.isSetSuccess()) {
        this.success = new ezbake.warehouse.EntryDetail(other.success);
      }
    }

    public getEntryDetails_result deepCopy() {
      return new getEntryDetails_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public ezbake.warehouse.EntryDetail getSuccess() {
      return this.success;
    }

    public getEntryDetails_result setSuccess(ezbake.warehouse.EntryDetail success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((ezbake.warehouse.EntryDetail)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getEntryDetails_result)
        return this.equals((getEntryDetails_result)that);
      return false;
    }

    public boolean equals(getEntryDetails_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getEntryDetails_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getEntryDetails_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getEntryDetails_resultStandardSchemeFactory implements SchemeFactory {
      public getEntryDetails_resultStandardScheme getScheme() {
        return new getEntryDetails_resultStandardScheme();
      }
    }

    private static class getEntryDetails_resultStandardScheme extends StandardScheme<getEntryDetails_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getEntryDetails_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new ezbake.warehouse.EntryDetail();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getEntryDetails_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getEntryDetails_resultTupleSchemeFactory implements SchemeFactory {
      public getEntryDetails_resultTupleScheme getScheme() {
        return new getEntryDetails_resultTupleScheme();
      }
    }

    private static class getEntryDetails_resultTupleScheme extends TupleScheme<getEntryDetails_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getEntryDetails_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getEntryDetails_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = new ezbake.warehouse.EntryDetail();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

}
