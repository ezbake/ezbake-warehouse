/*   Copyright (C) 2013-2014 Computer Sciences Corporation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License. */

/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package ezbake.warehouse;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * Encapsulates status of an ingest. Has the status, list of failed URIs (in case
 * there are any failures) and the time of ingest.
 */
public class IngestStatus implements org.apache.thrift.TBase<IngestStatus, IngestStatus._Fields>, java.io.Serializable, Cloneable, Comparable<IngestStatus> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("IngestStatus");

  private static final org.apache.thrift.protocol.TField TIMESTAMP_FIELD_DESC = new org.apache.thrift.protocol.TField("timestamp", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("status", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField FAILED_URIS_FIELD_DESC = new org.apache.thrift.protocol.TField("failedURIs", org.apache.thrift.protocol.TType.LIST, (short)3);
  private static final org.apache.thrift.protocol.TField FAILURE_REASON_FIELD_DESC = new org.apache.thrift.protocol.TField("failureReason", org.apache.thrift.protocol.TType.STRING, (short)4);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new IngestStatusStandardSchemeFactory());
    schemes.put(TupleScheme.class, new IngestStatusTupleSchemeFactory());
  }

  public long timestamp; // required
  /**
   * 
   * @see IngestStatusEnum
   */
  public IngestStatusEnum status; // required
  public List<String> failedURIs; // optional
  public String failureReason; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    TIMESTAMP((short)1, "timestamp"),
    /**
     * 
     * @see IngestStatusEnum
     */
    STATUS((short)2, "status"),
    FAILED_URIS((short)3, "failedURIs"),
    FAILURE_REASON((short)4, "failureReason");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // TIMESTAMP
          return TIMESTAMP;
        case 2: // STATUS
          return STATUS;
        case 3: // FAILED_URIS
          return FAILED_URIS;
        case 4: // FAILURE_REASON
          return FAILURE_REASON;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __TIMESTAMP_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  private _Fields optionals[] = {_Fields.FAILED_URIS,_Fields.FAILURE_REASON};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.TIMESTAMP, new org.apache.thrift.meta_data.FieldMetaData("timestamp", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.STATUS, new org.apache.thrift.meta_data.FieldMetaData("status", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, IngestStatusEnum.class)));
    tmpMap.put(_Fields.FAILED_URIS, new org.apache.thrift.meta_data.FieldMetaData("failedURIs", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.FAILURE_REASON, new org.apache.thrift.meta_data.FieldMetaData("failureReason", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(IngestStatus.class, metaDataMap);
  }

  public IngestStatus() {
  }

  public IngestStatus(
    long timestamp,
    IngestStatusEnum status)
  {
    this();
    this.timestamp = timestamp;
    setTimestampIsSet(true);
    this.status = status;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public IngestStatus(IngestStatus other) {
    __isset_bitfield = other.__isset_bitfield;
    this.timestamp = other.timestamp;
    if (other.isSetStatus()) {
      this.status = other.status;
    }
    if (other.isSetFailedURIs()) {
      List<String> __this__failedURIs = new ArrayList<String>(other.failedURIs);
      this.failedURIs = __this__failedURIs;
    }
    if (other.isSetFailureReason()) {
      this.failureReason = other.failureReason;
    }
  }

  public IngestStatus deepCopy() {
    return new IngestStatus(this);
  }

  @Override
  public void clear() {
    setTimestampIsSet(false);
    this.timestamp = 0;
    this.status = null;
    this.failedURIs = null;
    this.failureReason = null;
  }

  public long getTimestamp() {
    return this.timestamp;
  }

  public IngestStatus setTimestamp(long timestamp) {
    this.timestamp = timestamp;
    setTimestampIsSet(true);
    return this;
  }

  public void unsetTimestamp() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TIMESTAMP_ISSET_ID);
  }

  /** Returns true if field timestamp is set (has been assigned a value) and false otherwise */
  public boolean isSetTimestamp() {
    return EncodingUtils.testBit(__isset_bitfield, __TIMESTAMP_ISSET_ID);
  }

  public void setTimestampIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TIMESTAMP_ISSET_ID, value);
  }

  /**
   * 
   * @see IngestStatusEnum
   */
  public IngestStatusEnum getStatus() {
    return this.status;
  }

  /**
   * 
   * @see IngestStatusEnum
   */
  public IngestStatus setStatus(IngestStatusEnum status) {
    this.status = status;
    return this;
  }

  public void unsetStatus() {
    this.status = null;
  }

  /** Returns true if field status is set (has been assigned a value) and false otherwise */
  public boolean isSetStatus() {
    return this.status != null;
  }

  public void setStatusIsSet(boolean value) {
    if (!value) {
      this.status = null;
    }
  }

  public int getFailedURIsSize() {
    return (this.failedURIs == null) ? 0 : this.failedURIs.size();
  }

  public java.util.Iterator<String> getFailedURIsIterator() {
    return (this.failedURIs == null) ? null : this.failedURIs.iterator();
  }

  public void addToFailedURIs(String elem) {
    if (this.failedURIs == null) {
      this.failedURIs = new ArrayList<String>();
    }
    this.failedURIs.add(elem);
  }

  public List<String> getFailedURIs() {
    return this.failedURIs;
  }

  public IngestStatus setFailedURIs(List<String> failedURIs) {
    this.failedURIs = failedURIs;
    return this;
  }

  public void unsetFailedURIs() {
    this.failedURIs = null;
  }

  /** Returns true if field failedURIs is set (has been assigned a value) and false otherwise */
  public boolean isSetFailedURIs() {
    return this.failedURIs != null;
  }

  public void setFailedURIsIsSet(boolean value) {
    if (!value) {
      this.failedURIs = null;
    }
  }

  public String getFailureReason() {
    return this.failureReason;
  }

  public IngestStatus setFailureReason(String failureReason) {
    this.failureReason = failureReason;
    return this;
  }

  public void unsetFailureReason() {
    this.failureReason = null;
  }

  /** Returns true if field failureReason is set (has been assigned a value) and false otherwise */
  public boolean isSetFailureReason() {
    return this.failureReason != null;
  }

  public void setFailureReasonIsSet(boolean value) {
    if (!value) {
      this.failureReason = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case TIMESTAMP:
      if (value == null) {
        unsetTimestamp();
      } else {
        setTimestamp((Long)value);
      }
      break;

    case STATUS:
      if (value == null) {
        unsetStatus();
      } else {
        setStatus((IngestStatusEnum)value);
      }
      break;

    case FAILED_URIS:
      if (value == null) {
        unsetFailedURIs();
      } else {
        setFailedURIs((List<String>)value);
      }
      break;

    case FAILURE_REASON:
      if (value == null) {
        unsetFailureReason();
      } else {
        setFailureReason((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case TIMESTAMP:
      return Long.valueOf(getTimestamp());

    case STATUS:
      return getStatus();

    case FAILED_URIS:
      return getFailedURIs();

    case FAILURE_REASON:
      return getFailureReason();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case TIMESTAMP:
      return isSetTimestamp();
    case STATUS:
      return isSetStatus();
    case FAILED_URIS:
      return isSetFailedURIs();
    case FAILURE_REASON:
      return isSetFailureReason();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof IngestStatus)
      return this.equals((IngestStatus)that);
    return false;
  }

  public boolean equals(IngestStatus that) {
    if (that == null)
      return false;

    boolean this_present_timestamp = true;
    boolean that_present_timestamp = true;
    if (this_present_timestamp || that_present_timestamp) {
      if (!(this_present_timestamp && that_present_timestamp))
        return false;
      if (this.timestamp != that.timestamp)
        return false;
    }

    boolean this_present_status = true && this.isSetStatus();
    boolean that_present_status = true && that.isSetStatus();
    if (this_present_status || that_present_status) {
      if (!(this_present_status && that_present_status))
        return false;
      if (!this.status.equals(that.status))
        return false;
    }

    boolean this_present_failedURIs = true && this.isSetFailedURIs();
    boolean that_present_failedURIs = true && that.isSetFailedURIs();
    if (this_present_failedURIs || that_present_failedURIs) {
      if (!(this_present_failedURIs && that_present_failedURIs))
        return false;
      if (!this.failedURIs.equals(that.failedURIs))
        return false;
    }

    boolean this_present_failureReason = true && this.isSetFailureReason();
    boolean that_present_failureReason = true && that.isSetFailureReason();
    if (this_present_failureReason || that_present_failureReason) {
      if (!(this_present_failureReason && that_present_failureReason))
        return false;
      if (!this.failureReason.equals(that.failureReason))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(IngestStatus other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetTimestamp()).compareTo(other.isSetTimestamp());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTimestamp()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.timestamp, other.timestamp);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStatus()).compareTo(other.isSetStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.status, other.status);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFailedURIs()).compareTo(other.isSetFailedURIs());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFailedURIs()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.failedURIs, other.failedURIs);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFailureReason()).compareTo(other.isSetFailureReason());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFailureReason()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.failureReason, other.failureReason);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("IngestStatus(");
    boolean first = true;

    sb.append("timestamp:");
    sb.append(this.timestamp);
    first = false;
    if (!first) sb.append(", ");
    sb.append("status:");
    if (this.status == null) {
      sb.append("null");
    } else {
      sb.append(this.status);
    }
    first = false;
    if (isSetFailedURIs()) {
      if (!first) sb.append(", ");
      sb.append("failedURIs:");
      if (this.failedURIs == null) {
        sb.append("null");
      } else {
        sb.append(this.failedURIs);
      }
      first = false;
    }
    if (isSetFailureReason()) {
      if (!first) sb.append(", ");
      sb.append("failureReason:");
      if (this.failureReason == null) {
        sb.append("null");
      } else {
        sb.append(this.failureReason);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // alas, we cannot check 'timestamp' because it's a primitive and you chose the non-beans generator.
    if (status == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'status' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class IngestStatusStandardSchemeFactory implements SchemeFactory {
    public IngestStatusStandardScheme getScheme() {
      return new IngestStatusStandardScheme();
    }
  }

  private static class IngestStatusStandardScheme extends StandardScheme<IngestStatus> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, IngestStatus struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // TIMESTAMP
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.timestamp = iprot.readI64();
              struct.setTimestampIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.status = IngestStatusEnum.findByValue(iprot.readI32());
              struct.setStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // FAILED_URIS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list24 = iprot.readListBegin();
                struct.failedURIs = new ArrayList<String>(_list24.size);
                for (int _i25 = 0; _i25 < _list24.size; ++_i25)
                {
                  String _elem26;
                  _elem26 = iprot.readString();
                  struct.failedURIs.add(_elem26);
                }
                iprot.readListEnd();
              }
              struct.setFailedURIsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // FAILURE_REASON
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.failureReason = iprot.readString();
              struct.setFailureReasonIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetTimestamp()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'timestamp' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, IngestStatus struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(TIMESTAMP_FIELD_DESC);
      oprot.writeI64(struct.timestamp);
      oprot.writeFieldEnd();
      if (struct.status != null) {
        oprot.writeFieldBegin(STATUS_FIELD_DESC);
        oprot.writeI32(struct.status.getValue());
        oprot.writeFieldEnd();
      }
      if (struct.failedURIs != null) {
        if (struct.isSetFailedURIs()) {
          oprot.writeFieldBegin(FAILED_URIS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.failedURIs.size()));
            for (String _iter27 : struct.failedURIs)
            {
              oprot.writeString(_iter27);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.failureReason != null) {
        if (struct.isSetFailureReason()) {
          oprot.writeFieldBegin(FAILURE_REASON_FIELD_DESC);
          oprot.writeString(struct.failureReason);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class IngestStatusTupleSchemeFactory implements SchemeFactory {
    public IngestStatusTupleScheme getScheme() {
      return new IngestStatusTupleScheme();
    }
  }

  private static class IngestStatusTupleScheme extends TupleScheme<IngestStatus> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, IngestStatus struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeI64(struct.timestamp);
      oprot.writeI32(struct.status.getValue());
      BitSet optionals = new BitSet();
      if (struct.isSetFailedURIs()) {
        optionals.set(0);
      }
      if (struct.isSetFailureReason()) {
        optionals.set(1);
      }
      oprot.writeBitSet(optionals, 2);
      if (struct.isSetFailedURIs()) {
        {
          oprot.writeI32(struct.failedURIs.size());
          for (String _iter28 : struct.failedURIs)
          {
            oprot.writeString(_iter28);
          }
        }
      }
      if (struct.isSetFailureReason()) {
        oprot.writeString(struct.failureReason);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, IngestStatus struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.timestamp = iprot.readI64();
      struct.setTimestampIsSet(true);
      struct.status = IngestStatusEnum.findByValue(iprot.readI32());
      struct.setStatusIsSet(true);
      BitSet incoming = iprot.readBitSet(2);
      if (incoming.get(0)) {
        {
          org.apache.thrift.protocol.TList _list29 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.failedURIs = new ArrayList<String>(_list29.size);
          for (int _i30 = 0; _i30 < _list29.size; ++_i30)
          {
            String _elem31;
            _elem31 = iprot.readString();
            struct.failedURIs.add(_elem31);
          }
        }
        struct.setFailedURIsIsSet(true);
      }
      if (incoming.get(1)) {
        struct.failureReason = iprot.readString();
        struct.setFailureReasonIsSet(true);
      }
    }
  }

}

